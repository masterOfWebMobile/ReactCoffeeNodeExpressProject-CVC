// Generated by CoffeeScript 1.9.3
(function() {
  var $l, BrowseFilter, ProfileSearchResults, React, _, createFactory, d, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  $l = require('./locale');

  BrowseFilter = createFactory({
    handleFilterChange: function(e) {
      return this.props.handleFilterChange(e.target.name, e.target.value);
    },
    render: function() {
      var ages, distance, genders, i, ref, ref1, ref2, ref3, ref4, results;
      genders = [
        {
          value: 'M',
          label: 'Men'
        }, {
          value: 'F',
          label: 'Women'
        }
      ];
      ages = _.map((function() {
        results = [];
        for (i = 18; i <= 99; i++){ results.push(i); }
        return results;
      }).apply(this), function(age) {
        return {
          value: age.toString(),
          label: age
        };
      });
      distance = _.map([100, 200, 300, 500, 2000], function(d) {
        return {
          value: d.toString(),
          label: d + " mi"
        };
      });
      return d.div.apply(d, [{
        className: 'filters'
      }].concat(slice.call([
        d.SelectField({
          label: 'Show me',
          options: genders,
          name: 'gender',
          defaultValue: (ref = this.props.filter) != null ? ref.gender : void 0,
          onChange: this.handleFilterChange
        }), d.SelectField({
          label: 'Looking for',
          options: genders,
          name: 'lookingFor[gender]',
          defaultValue: (ref1 = this.props.filter) != null ? (ref2 = ref1.lookingFor) != null ? ref2.gender : void 0 : void 0,
          onChange: this.handleFilterChange
        }), d.SelectField({
          label: 'Between',
          options: ages,
          name: 'minAge',
          defaultValue: (ref3 = this.props.filter) != null ? ref3.minAge : void 0,
          onChange: this.handleFilterChange
        }), d.SelectField({
          label: 'and',
          options: ages,
          name: 'maxAge',
          defaultValue: (ref4 = this.props.filter) != null ? ref4.maxAge : void 0,
          onChange: this.handleFilterChange
        })
      ])));
    }
  });

  ProfileSearchResults = createFactory({
    renderItem: function(itemIndex, scrollTop, itemSize, canvas) {
      var ageAndLocation, dims, ff, profile, ref, ref1, ref2, ref3, style, url;
      profile = this.props.store.getProfile(itemIndex);
      ff = canvas.FontFace('Open Sans, Helvetica, sans-serif', null, {
        weight: 700
      });
      dims = canvas.measureText("Loading...", itemSize, ff, 16, 30);
      style = {
        top: itemSize / 2 - dims.height / 2,
        left: itemSize / 2 - dims.width / 2,
        fontFace: ff,
        fontSize: 16,
        width: dims.width,
        height: dims.height,
        lineHeight: dims.height,
        color: 'grey',
        backgroundColor: 'white'
      };
      if (profile != null) {
        ageAndLocation = "" + profile.age;
        if ((profile != null ? (ref = profile.profileLocation) != null ? ref.city : void 0 : void 0) != null) {
          ageAndLocation = ageAndLocation + " from " + profile.profileLocation.city + ", " + profile.profileLocation.stateCode;
        }
        url = "" + ((ref1 = profile.primaryPhoto) != null ? ref1.cdnBaseUrl : void 0) + ((ref2 = profile.primaryPhoto) != null ? (ref3 = ref2.urls) != null ? ref3['300x300'] : void 0 : void 0);
        return canvas.Group({
          style: {
            left: 0,
            top: 0,
            width: itemSize,
            height: itemSize,
            backgroundColor: 'white'
          }
        }, canvas.Text({
          style: style
        }, "Loading..."), canvas.Image({
          style: {
            top: 0,
            left: 0,
            width: itemSize - 1,
            height: itemSize - 1,
            borderWidth: 0,
            borderColor: 'white'
          },
          src: url
        }), canvas.Group({
          style: {
            left: 0,
            top: 0,
            width: itemSize - 2,
            height: 30,
            backgroundColor: 'rgba(100,100,100,.8)'
          }
        }, canvas.Text({
          style: {
            top: 5,
            left: 5,
            width: itemSize - 11,
            height: 20,
            lineHeight: 20,
            fontSize: 18,
            fontFace: ff,
            color: 'white'
          }
        }, "" + ageAndLocation)));
      } else if (this.props.store.isLoading() === true) {
        return canvas.Group({
          style: {
            left: 0,
            top: 0,
            width: itemSize,
            height: itemSize,
            backgroundColor: 'white'
          }
        }, canvas.Text({
          style: style
        }, "Loading..."));
      }
    },
    handleClick: function(itemIndex, e) {
      var profile;
      profile = this.props.store.getProfile(itemIndex);
      if (profile != null) {
        if (e.itemX > e.itemWidth - 30 && e.itemY < 30) {
          return this.handleFlag(itemIndex, e);
        } else {
          if (this.props.onClick != null) {
            return this.props.onClick(profile);
          }
        }
      }
    },
    handleFlag: function(itemIndex, e) {
      return console.log("FLAG", itemIndex);
    },
    render: function() {
      if (this.props.store.getLoadedCount() === 0) {
        if (this.props.store.isLoading()) {
          return d.div({
            className: 'info-message'
          }, "Loading...");
        } else {
          return d.div({
            className: 'info-message'
          }, $l('notEnoughUsers'));
        }
      }
      return d.CanvasGridView({
        ref: 'listView',
        style: {
          top: '120px'
        },
        numberOfItems: this.props.store.getLoadedCount() || 0,
        itemSize: 300,
        itemMinSize: 200,
        renderItem: this.renderItem,
        onClick: this.handleClick,
        scrollTop: this.props.store.getScrollTop(),
        onScroll: this.props.store.setScrollTop.bind(this.props.store)
      });
    }
  });

  module.exports = createFactory({
    propTypes: {
      defaultFilter: React.PropTypes.object.isRequired
    },
    getDefaultProps: function() {
      return {
        store: new stores.BrowseStore()
      };
    },
    handleClick: function(profile) {
      return this.props.onChangePath("/profile/" + profile.guid);
    },
    handleChange: function() {
      return this.forceUpdate();
    },
    componentWillMount: function() {
      this.props.store.preload(this.props.items, this.props.totalFound);
      return this.props.store.init(this.props.defaultFilter);
    },
    componentDidMount: function() {
      this.props.store.on('change', this.handleChange);
      return this.props.store.setRestClient(this.props.restClient);
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    handleSearch: function() {
      return this.props.store.search();
    },
    render: function() {
      return d.div({
        className: 'browse'
      }, BrowseFilter({
        filter: this.props.store.getFilter(),
        handleFilterChange: this.props.store.handleFilterChange.bind(this.props.store)
      }), ProfileSearchResults({
        ref: 'results',
        store: this.props.store,
        onClick: this.handleClick
      }));
    }
  });

}).call(this);

//# sourceMappingURL=browse.js.map
