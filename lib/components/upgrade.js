// Generated by CoffeeScript 1.9.3
(function() {
  var $l, PaymentMethodForm, PricingOption, PurchaseCompleted, React, _, createFactory, d, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  $l = require('./locale');

  PaymentMethodForm = createFactory({
    getInitialState: function() {
      return {};
    },
    handleChange: function(e) {
      var field, value;
      field = $(e.target).attr('name');
      value = $(e.target).val();
      return this.setState(_.object([[field, value]]));
    },
    tokenize: function() {
      var options;
      options = {
        full_name: this.state.name,
        year: "20" + this.state.year,
        month: this.state.month
      };
      Spreedly.tokenizeCreditCard(options);
      return this.setState({
        errorMessages: {}
      });
    },
    componentDidMount: function() {
      return $.getScript("https://core.spreedly.com/iframe/iframe-1.3.min.js", (function(_this) {
        return function() {
          Spreedly.init();
          Spreedly.on('ready', function() {
            var attributes, style, styleMap;
            attributes = ['margin-top', 'margin-bottom', 'padding', 'display', 'width', 'background-color', 'border', 'color', 'font-family', 'font-size', 'font-weight'];
            styleMap = $(_this.refs.name.getDOMNode()).css(attributes);
            style = ("padding: 15px 5px  2px 5px;\ndisplay: inline-block;\nwidth: 100%;\nbackground-color: transparent;\nborder: 0px;\ncolor: black;\nfont-family: " + styleMap['font-family'] + ";\nfont-size: " + styleMap['font-size'] + ";\nfont-weight: " + styleMap['font-weight']).replace(/(\r\n|\n|\r)/gm, '');
            Spreedly.setStyle('number', style);
            Spreedly.setStyle('cvv', style);
            if (_this.props.onReady != null) {
              return _this.props.onReady();
            }
          });
          Spreedly.on('paymentMethod', function(token, pmData) {
            if (_this.props.onTokenized != null) {
              return _this.props.onTokenized(token);
            }
          });
          return Spreedly.on('errors', function(errors) {
            var errorMessages, fieldMap;
            errorMessages = {};
            fieldMap = {
              last_name: 'name',
              first_name: 'name',
              number: 'card',
              year: 'expDate',
              month: 'expDate'
            };
            _.each(errors, function(error) {
              if (error.attribute == null) {
                return;
              }
              return errorMessages[fieldMap[error.attribute] || error.attribute] = $l("upgrade." + error.key);
            });
            _this.setState({
              errorMessages: errorMessages
            });
            if (_this.props.onError != null) {
              return _this.props.onError(errors);
            }
          });
        };
      })(this));
    },
    componentWillUnmount: function() {
      if (window.Spreedly != null) {
        Spreedly.removeHandlers();
        return Spreedly.unload();
      }
    },
    render: function() {
      var ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
      return d.div({
        className: 'payment-method'
      }, d.InputField({
        ref: "name",
        name: "name",
        type: "text",
        placeholder: "Name",
        onChange: this.handleChange,
        defaultValue: (ref = this.state) != null ? ref.name : void 0,
        errorMessage: (ref1 = this.state) != null ? (ref2 = ref1.errorMessages) != null ? ref2.name : void 0 : void 0
      }), d.LabeledField({
        name: 'card',
        label: "Credit Card Number",
        errorMessage: (ref3 = this.state) != null ? (ref4 = ref3.errorMessages) != null ? ref4.card : void 0 : void 0
      }, d.div({
        id: "spreedly-number",
        className: 'spreedly-field'
      })), d.div({
        className: 'card-details'
      }, d.LabeledField({
        name: 'exp-date',
        label: 'Expiration Date',
        errorMessage: (ref5 = this.state) != null ? (ref6 = ref5.errorMessages) != null ? ref6.expDate : void 0 : void 0
      }, d.input({
        ref: "month",
        className: 'field-month',
        name: 'month',
        type: "number",
        min: "1",
        max: "12",
        placeholder: "MM",
        onChange: this.handleChange,
        defaultValue: (ref7 = this.state) != null ? ref7.month : void 0
      }), d.span({
        className: 'separator'
      }, "/"), d.input({
        ref: "year",
        className: 'field-year',
        name: 'year',
        type: "number",
        min: "15",
        max: "30",
        placeholder: "YY",
        onChange: this.handleChange,
        defaultValue: (ref8 = this.state) != null ? ref8.year : void 0
      })), d.LabeledField({
        name: 'cvv',
        label: "CVV",
        errorMessage: (ref9 = this.state) != null ? (ref10 = ref9.errorMessages) != null ? ref10.cvv : void 0 : void 0
      }, d.div({
        id: "spreedly-cvv",
        className: 'spreedly-field'
      }))), d.script({
        'id': "spreedly-iframe",
        'data-environment-key': this.props.environmentKey,
        'data-number-id': "spreedly-number",
        'data-cvv-id': "spreedly-cvv"
      }));
    }
  });

  PurchaseCompleted = createFactory({
    render: function() {
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'upgrade-completed'
      }, d.div({
        className: 'message'
      }, "Your purchase has been completed"), d.Button({
        className: 'continue',
        onClick: this.props.onContinue
      }, "Continue"))));
    }
  });

  exports.PaymentMethod = createFactory({
    getInitialState: function() {
      return {};
    },
    handleError: function() {
      this.refs.submitButton.enable();
      return this.refs.progressBar.hide();
    },
    handleTokenized: function(token) {
      return this.props.restClient.post("/" + token, {}, {
        error: (function(_this) {
          return function() {
            var args, err, i, res;
            res = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), err = arguments[i++];
            _this.setState({
              errorMessage: (err != null ? err.message : void 0) || $l("upgrade.genericError")
            });
            _this.refs.submitButton.enable();
            return _this.refs.progressBar.hide();
          };
        })(this),
        success: (function(_this) {
          return function(features) {
            if (_this.props.onUpdateFeatures != null) {
              _this.props.onUpdateFeatures(features);
            }
            return _this.setState({
              errorMessage: null,
              completed: true
            });
          };
        })(this)
      });
    },
    handleTokenize: function(e) {
      e.preventDefault();
      e.stopPropagation();
      this.refs.submitButton.disable();
      this.refs.paymentMethodForm.tokenize();
      return this.refs.progressBar.show("Processing Payment", 0);
    },
    handleReady: function() {
      return this.refs.submitButton.enable();
    },
    handleLearnMore: function(e) {
      e.preventDefault();
      $(this.refs.learnMore.getDOMNode()).hide();
      return $(this.refs.disclaimer3.getDOMNode()).show();
    },
    handleHideDisclaimer: function(e) {
      e.preventDefault();
      $(this.refs.learnMore.getDOMNode()).show();
      return $(this.refs.disclaimer3.getDOMNode()).hide();
    },
    handleCustomerSupport: function(e) {
      e.preventDefault();
      return this.props.onCustomerSupport(e);
    },
    handleContinue: function(e) {
      var navigateTo, ref;
      navigateTo = ((ref = this.props.route.params) != null ? ref.navigateTo : void 0) || "/browse";
      return this.props.onChangePath(navigateTo);
    },
    render: function() {
      var ref, ref1, ref2;
      if ((ref = this.state) != null ? ref.completed : void 0) {
        return PurchaseCompleted({
          onContinue: this.handleContinue
        });
      }
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.ProgressBar({
        ref: 'progressBar'
      }), d.div({
        className: 'upgrade'
      }, d.div({
        className: "selected-option"
      }, PricingOption({
        showTotal: true,
        type: this.props.upgrade.currentOption,
        option: this.props.upgrade.pricing[this.props.upgrade.currentOption]
      })), ((ref1 = this.state) != null ? ref1.errorMessage : void 0) != null ? d.div({}, d.div({
        className: "error-message alert alert-error"
      }, this.state.errorMessage)) : void 0, d.div({
        ref: 'paymentMethod',
        className: 'payment-method-container'
      }, PaymentMethodForm({
        ref: 'paymentMethodForm',
        onTokenized: this.handleTokenized,
        onReady: this.handleReady,
        onError: this.handleError,
        environmentKey: (ref2 = this.props.upgrade) != null ? ref2.environmentKey : void 0
      }), d.div({
        className: 'disclaimer1'
      }, $l('upgrade.disclaimer1')), d.Button({
        ref: 'submitButton',
        disabled: true,
        onClick: this.handleTokenize
      }, "Subscribe Now"), d.br({}), d.div({
        className: 'disclaimers'
      }, d.div({
        className: 'disclaimer2'
      }, $l('upgrade.disclaimer2'), d.a({
        ref: 'learnMore',
        className: 'learn-more',
        href: '#',
        onClick: this.handleLearnMore
      }, $l('upgrade.learnMore'))), d.br({}), d.div({
        ref: 'disclaimer3',
        className: 'disclaimer3'
      }, $l('upgrade.disclaimer3'), d.a({
        ref: 'here',
        className: 'here',
        href: '#',
        onClick: this.handleCustomerSupport
      }, $l('upgrade.here')), $l('upgrade.disclaimer4'), d.a({
        ref: 'hide',
        className: 'hide',
        href: '#',
        onClick: this.handleHideDisclaimer
      }, $l('upgrade.hide'))))))));
    }
  });

  PricingOption = createFactory({
    render: function() {
      var ref, ref1, ref2, ref3;
      return d.div({
        className: "pricing-option"
      }, ((ref = this.props.option) != null ? (ref1 = ref.flags) != null ? ref1.popular : void 0 : void 0) && this.props.decorate ? d.div({
        className: 'alert'
      }, $l('upgrade.pricing.popular'), d.span({
        className: 'discount'
      }, this.props.option.discount, "%")) : void 0, ((ref2 = this.props.option) != null ? (ref3 = ref2.flags) != null ? ref3.bestValue : void 0 : void 0) && this.props.decorate ? d.div({
        className: 'alert'
      }, $l('upgrade.pricing.bestValue'), d.span({
        className: 'discount'
      }, this.props.option.discount, "%")) : void 0, d.span({
        className: 'description'
      }, this.props.glyphs ? d.Glyph({
        glyph: "hand-o-right"
      }) : void 0, $l("upgrade.pricing." + this.props.type)), d.span.apply(d, [{
        className: 'price'
      }].concat(slice.call(((this.props.option.duration != null) && !this.props.showTotal ? [
        d.span({
          className: "at"
        }, $l("upgrade.pricing.at")), "$", (Math.round(this.props.option.price / this.props.option.duration[0]) / 100).toFixed(2), d.span({
          className: 'per-month'
        }, $l("upgrade.pricing.perMonth"))
      ] : ["$", (this.props.option.price / 100).toFixed(2)])))), this.props.glyphs ? d.Glyph({
        glyph: 'chevron-right'
      }) : void 0);
    }
  });

  exports.Upgrade = createFactory({
    handleClick: function(type, e) {
      return this.props.onChangePath("/upgrade/" + type + (this.props.route.qs || ""));
    },
    render: function() {
      var pricing;
      pricing = _.map(this.props.upgrade.pricing, function(def, name) {
        def.name = name;
        return def;
      });
      pricing = _.sortBy(pricing, function(def) {
        return -def.price;
      });
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'upgrade'
      }, d.h1({}, $l('upgrade.choosePlan')), d.ul.apply(d, [{
        className: 'pricing-options'
      }].concat(slice.call(_.map(pricing, (function(_this) {
        return function(def) {
          if (!def.standalone) {
            return;
          }
          return d.li({
            className: "button"
          }, d.a({
            onClick: _this.handleClick.bind(null, def.name)
          }, PricingOption({
            type: def.name,
            option: def,
            glyphs: true,
            decorate: true
          })));
        };
      })(this))))))));
    }
  });

}).call(this);

//# sourceMappingURL=upgrade.js.map
