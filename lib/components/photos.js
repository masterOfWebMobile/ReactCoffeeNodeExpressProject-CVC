// Generated by CoffeeScript 1.9.3
(function() {
  var $l, Photo, PhotoList, PhotoPlaceholder, PhotoSummary, React, UploadPrimaryPhoto, _, createFactory, d, ref, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  ref = require('./profile'), Photo = ref.Photo, PhotoPlaceholder = ref.PhotoPlaceholder;

  $l = require('./locale');

  UploadPrimaryPhoto = createFactory({
    handlePickPhoto: function() {
      return this.refs.fileUploader.pickFile();
    },
    render: function() {
      return d.div.apply(d, [{
        className: 'upload-photo'
      }].concat(slice.call([
        d.FileUploader({
          ref: 'fileUploader',
          name: 'photo',
          accept: 'image/*',
          onProgress: this.props.onProgress,
          onComplete: this.props.onComplete,
          parameters: {
            continueTo: this.props.continueTo
          }
        }), PhotoPlaceholder({
          className: 'primary',
          gender: this.props.gender,
          message: 'Pick your photo',
          onClick: this.handlePickPhoto
        }, d.a({
          className: 'link-overlay',
          href: '#'
        }))
      ])));
    }
  });

  PhotoSummary = createFactory({
    render: function() {
      return d.div.apply(d, [{
        className: "photo-summary " + (this.props.children.album === 'primary' ? 'primary' : void 0)
      }].concat(slice.call([
        this.props.children.storage === 'pending' ? PhotoPlaceholder({
          gender: this.props.gender,
          message: 'Pending'
        }) : Photo({
          dims: '100x100'
        }, this.props.children), d.div.apply(d, [{
          className: 'buttons'
        }].concat(slice.call([
          d.Button({
            className: 'square delete',
            href: '#',
            onClick: this.props.onDelete.bind(null, this.props.children.guid)
          }, "Delete"), this.props.children.album !== 'primary' ? d.Button({
            className: 'square primary',
            href: '#',
            onClick: this.props.onMakePrimary.bind(null, this.props.children.guid)
          }, "Make Primary") : void 0
        ])))
      ])));
    }
  });

  PhotoList = createFactory({
    render: function() {
      return d.div.apply(d, [{
        className: 'list'
      }].concat(slice.call(_.map(this.props.store.getPhotos(), (function(_this) {
        return function(photo) {
          return PhotoSummary({
            onDelete: _this.props.onDelete,
            onMakePrimary: _this.props.onMakePrimary,
            gender: _this.props.gender
          }, photo);
        };
      })(this)))));
    }
  });

  module.exports = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.PhotosStore()
      };
    },
    handleContinue: function() {
      return this.props.onChangePath(this.props.continueTo);
    },
    handleUploadPhoto: function(e) {
      return this.refs.fileUploader.pickFile();
    },
    handleDelete: function(guid, e) {
      return this.props.store["delete"](guid);
    },
    handleMakePrimary: function(guid, e) {
      return this.props.store.makePrimary(guid);
    },
    handleChange: function() {
      return this.forceUpdate();
    },
    componentWillMount: function() {
      return this.props.store.init(this.props.photos);
    },
    componentDidMount: function() {
      this.props.store.on('change', this.handleChange);
      return this.props.store.setRestClient(this.props.restClient);
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    handleProgress: function(progress) {
      return this.refs.progressBar.show((Math.round(progress)) + "%", progress);
    },
    handleComplete: function(success, result) {
      if (success) {
        this.setState({
          message: $l('photos.uploadOk'),
          error: false
        });
      } else {
        this.setState({
          message: $l('photos.uploadFailed'),
          error: true
        });
      }
      this.refs.dialog.show(false, false);
      return this.refs.progressBar.hide();
    },
    handleDialogClose: function() {
      this.refs.dialog.hide();
      if (this.state.error) {
        return;
      }
      this.props.store.refresh();
      if (this.props.continueTo != null) {
        return this.props.onChangePath(this.props.continueTo, true);
      }
    },
    render: function() {
      var ref1, ref2;
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.ModalDialog({
        ref: 'dialog',
        className: 'dialog'
      }, d.div({
        className: 'message'
      }, (ref1 = this.state) != null ? ref1.message : void 0), d.div({
        className: 'buttons'
      }, d.Button({
        className: 'close',
        onClick: this.handleDialogClose
      }, "Close"))), d.ProgressBar({
        ref: 'progressBar'
      }), d.div.apply(d, [{
        className: 'manage-photos'
      }].concat(slice.call(_.flatten([
        !(this.props.store.getPhotos().length > 0) ? UploadPrimaryPhoto({
          gender: (ref2 = this.props.myProfileSummary) != null ? ref2.gender : void 0,
          continueTo: this.props.continueTo,
          onProgress: this.handleProgress,
          onComplete: this.handleComplete
        }) : [
          d.div.apply(d, [{
            className: 'buttons'
          }].concat(slice.call([
            d.Button({
              className: 'square upload-photo',
              onClick: this.handleUploadPhoto
            }, "Upload More Photos"), d.FileUploader({
              ref: 'fileUploader',
              name: 'photo',
              accept: 'image/*',
              onProgress: this.handleProgress,
              onComplete: this.handleComplete,
              parameters: {
                continueTo: this.props.continueTo
              }
            })
          ]))), PhotoList({
            store: this.props.store,
            onDelete: this.handleDelete,
            onMakePrimary: this.handleMakePrimary,
            gender: this.props.myProfileSummary.gender
          })
        ], this.props.continueTo != null ? d.div({
          className: 'buttons'
        }, d.Button({
          className: 'square',
          onClick: this.handleContinue
        }, "Continue")) : void 0
      ]))))));
    }
  });

}).call(this);

//# sourceMappingURL=photos.js.map
