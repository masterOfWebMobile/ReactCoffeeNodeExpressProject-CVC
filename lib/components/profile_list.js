// Generated by CoffeeScript 1.9.3
(function() {
  var $l, React, _, createFactory, d, moment, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  $l = require('./locale');

  moment = require('moment');

  exports.ListContainer = createFactory({
    handleChange: function() {
      return this.forceUpdate();
    },
    componentDidMount: function() {
      return this.props.store.on('change', this.handleChange);
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    handleResize: function() {
      return this.forceUpdate();
    },
    handleClick: function(e) {
      e.item = this.props.store.getItem(e.itemIndex);
      if ((e.item != null) && (this.props.onClick != null)) {
        return this.props.onClick(e);
      }
    },
    getListView: function() {
      return this.refs.listView;
    },
    renderItem: function(index, scrollTop, containerSize, canvas) {
      var item;
      item = this.props.store.getItem(index);
      if (item == null) {
        return;
      }
      return this.props.renderItem(item, scrollTop, containerSize.width, canvas);
    },
    render: function() {
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'list-container'
      }, this.props.store.getLoadedCount() === 0 ? this.props.store.isLoading() ? d.div({
        className: 'info-message'
      }, this.props.loadingMessage) : d.div({
        className: 'info-message'
      }, this.props.emptyMessage) : d.CanvasListView({
        ref: 'listView',
        numberOfItemsGetter: (function(_this) {
          return function() {
            return _this.props.store.getLoadedCount();
          };
        })(this),
        itemHeightGetter: (function(_this) {
          return function() {
            return _this.props.itemHeight;
          };
        })(this),
        itemGetter: this.renderItem,
        onClick: this.handleClick,
        onResize: this.handleResize,
        scrollTop: this.props.store.getScrollTop(),
        style: {
          top: '0px'
        }
      }))));
    }
  });

  exports.ProfileListContainer = createFactory({
    componentDidMount: function() {
      if (!this.props.backNavigation) {
        this.props.store.reset();
      }
      this.props.store.setRestClient(this.props.restClient);
      return this.props.store.init();
    },
    handleLike: function(profile) {
      return this.props.store.like(profile.guid);
    },
    handleHide: function(profile) {
      return this.props.store.hide(profile.guid);
    },
    handleBlock: function(profile) {
      if (confirm($l("blockConfirmation").replace(/username/, profile.username).replace(/pronoun/, $l("genderCapPronouns." + profile.gender)))) {
        return this.props.store.block(profile.guid);
      }
    },
    handleHide: function(profile) {
      return this.props.store.hide(profile.guid);
    },
    handleClick: function(e) {
      var isWithin, ref, ref1, selectedAction;
      if (e.item.blocked) {
        return;
      }
      isWithin = function(dims) {
        return dims.left < e.itemX && (dims.left + dims.width) > e.itemX && dims.top < e.itemY && (dims.height + dims.top) > e.itemY;
      };
      if (((ref = this.state) != null ? ref.showOptionsFor : void 0) === e.item.guid) {
        selectedAction = null;
        _.each(this.actions, function(dim, action) {
          if (isWithin(dim)) {
            return selectedAction = action;
          }
        });
        if (selectedAction === 'message') {
          this.props.onChangePath("/conversation/" + e.item.guid);
        } else if (selectedAction === 'hide') {
          this.handleHide(e.item);
        } else if (selectedAction === 'block') {
          this.handleBlock(e.item);
        }
        return this.setState({
          showOptionsFor: null
        });
      } else if (((ref1 = this.state) != null ? ref1.showOptionsFor : void 0) != null) {
        return this.setState({
          showOptionsFor: null
        });
      } else {
        if (isWithin(this.likeButtonStyle)) {
          return this.handleLike(e.item);
        } else if (isWithin(this.hideButtonStyle)) {
          return this.handleHide(e.item);
        } else if (isWithin(this.moreOptionsButtonStyle)) {
          return this.setState({
            showOptionsFor: e.item.guid
          });
        } else {
          return this.props.onChangePath("/profile/" + e.item.guid);
        }
      }
    },
    renderProfile: function(profile, scrollTop, width, canvas) {
      var alertColor, buttonColor, buttonStyle, height, location, primaryColor, ref, ref1, ref2, ref3, ref4, renderButtonWithLabel, selectedButtonStyle, timestamp, url;
      if (this.props.store.getScrollTop() !== scrollTop && (((ref = this.state) != null ? ref.showOptionsFor : void 0) != null)) {
        setTimeout(((function(_this) {
          return function() {
            return _this.setState({
              showOptionsFor: null
            });
          };
        })(this)), 0);
      }
      this.props.store.setScrollTop(scrollTop);
      height = 100;
      if (profile.primaryPhoto != null) {
        url = "" + ((ref1 = profile.primaryPhoto) != null ? ref1.cdnBaseUrl : void 0) + ((ref2 = profile.primaryPhoto) != null ? (ref3 = ref2.urls) != null ? ref3['100x100'] : void 0 : void 0);
      } else {
        url = $l("genericPhotos." + profile.gender);
      }
      primaryColor = "rgb(18, 103, 112)";
      alertColor = "rgb(248, 215, 13)";
      buttonColor = "rgb(108, 79, 114)";
      buttonStyle = {
        backgroundColor: buttonColor,
        color: "white",
        borderWidth: 2,
        borderRadius: 20,
        height: 40,
        width: 40
      };
      selectedButtonStyle = _.defaults({
        backgroundColor: alertColor,
        color: primaryColor,
        borderColor: primaryColor
      }, buttonStyle);
      location = "";
      if (profile.profileLocation != null) {
        location = profile.profileLocation.city + ", " + profile.profileLocation.stateCode;
      }
      this.likeButtonStyle = _.defaults({
        fontSize: 32,
        left: 110,
        top: 50
      }, (profile.liked ? selectedButtonStyle : buttonStyle));
      this.hideButtonStyle = _.defaults({
        fontSize: 32,
        left: 160,
        top: 50
      }, (profile.hidden ? selectedButtonStyle : buttonStyle));
      this.moreOptionsButtonStyle = _.merge(_.defaults({
        fontSize: 20,
        left: width - 31,
        top: 1,
        backgroundColor: 'white'
      }, selectedButtonStyle), {
        height: 25,
        width: 30,
        borderRadius: 0,
        backgroundColor: 'white',
        borderColor: 'white'
      });
      renderButtonWithLabel = (function(_this) {
        return function(action, position, buttonCount, label, icon) {
          var buttonLeft, buttonSpacing, left, menuButtonStyle, style;
          if (_this.actions == null) {
            _this.actions = {};
          }
          menuButtonStyle = {
            color: "white",
            height: 80,
            width: 80,
            top: 10,
            borderColor: 'white',
            borderRadius: 10
          };
          buttonSpacing = Math.min(width / buttonCount - 80, 40);
          buttonLeft = width / 2 - ((buttonSpacing + 80) * buttonCount) / 2;
          left = buttonLeft + buttonSpacing / 2 + (buttonSpacing + 80) * position;
          style = _.defaults({
            fontSize: 40,
            left: left
          }, menuButtonStyle);
          _this.actions[action] = style;
          return canvas.Group({}, d.CanvasIcon({
            style: style
          }, icon), canvas.renderText(label, 16, 80, 100, {
            translateY: 60,
            translateX: left,
            color: 'white',
            fontWeight: 700,
            textAlign: 'center'
          }));
        };
      })(this);
      timestamp = profile.reverseLikedOn || profile.lastVisitedOn;
      timestamp = timestamp != null ? moment(timestamp).fromNow() : void 0;
      return canvas.Group.apply(canvas, [{
        style: {
          left: 0,
          top: 0,
          width: width,
          height: height - 1,
          backgroundColor: 'white'
        }
      }].concat(slice.call(_.filter([
        !profile.viewed ? canvas.Group({
          style: {
            top: 9,
            left: 9,
            width: 82,
            height: 82,
            borderRadius: 41,
            borderWidth: 4,
            borderColor: 'rgb(128, 255, 0)'
          }
        }) : void 0, canvas.Image({
          style: {
            top: 10,
            left: 10,
            width: 80,
            height: 80,
            borderRadius: 40,
            borderWidth: 2,
            borderColor: 'grey'
          },
          src: url
        }), canvas.renderText(profile.username, 16, 600, 100, {
          translateY: 2,
          translateX: 110,
          color: 'grey',
          fontWeight: 700
        }), canvas.renderText(location, 16, 600, 150, {
          translateY: 20,
          translateX: 110,
          color: 'grey',
          fontWeight: 700
        }), timestamp != null ? canvas.renderText(timestamp, 16, 600, 150, {
          translateY: 72,
          translateX: width - 155,
          width: 150,
          textAlign: 'right',
          color: 'grey',
          fontWeight: 700
        }) : void 0, d.CanvasIcon({
          style: this.likeButtonStyle
        }, "\uf005"), d.CanvasIcon({
          style: this.moreOptionsButtonStyle
        }, "\uf142"), profile.blocked || profile.hidden ? canvas.Group({
          style: {
            left: 0,
            top: 0,
            width: width,
            height: height - 1,
            backgroundColor: 'rgba(220,220,220,.9)'
          }
        }) : void 0, ((ref4 = this.state) != null ? ref4.showOptionsFor : void 0) === profile.guid ? canvas.Group({
          style: {
            left: 0,
            top: 0,
            width: width,
            height: height - 1,
            backgroundColor: 'rgba(120,120,120,.9)'
          }
        }, renderButtonWithLabel("message", 0, 3, "Message", "\uf075"), renderButtonWithLabel("hide", 1, 3, "Hide", "\uf00d"), renderButtonWithLabel("block", 2, 3, "Block", "\uf071")) : void 0
      ], function(i) {
        return i != null;
      }))));
    },
    render: function() {
      return exports.ListContainer({
        store: this.props.store,
        renderItem: this.renderProfile,
        itemHeight: 100,
        onClick: this.handleClick
      });
    }
  });

  exports.LikedBy = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.ProfileListStore()
      };
    },
    render: function() {
      return d.ProfileListContainer(this.props);
    }
  });

  exports.Visitors = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.ProfileListStore()
      };
    },
    render: function() {
      return d.ProfileListContainer(this.props);
    }
  });

}).call(this);

//# sourceMappingURL=profile_list.js.map
