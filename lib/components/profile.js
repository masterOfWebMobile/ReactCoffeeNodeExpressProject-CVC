// Generated by CoffeeScript 1.9.3
(function() {
  var $l, AdvancedCriteriaTable, EditLabel, EditableSection, LookingForTable, Photo, PhotoPlaceholder, PhotoWithPlaceholder, PopupMenu, ProfileContent, ProfileInfo, React, Section, SlidingPhotoGallery, Username, _, ages, createFactory, d, i, results, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  $l = require('./locale');

  ages = _.object(_.map((function() {
    results = [];
    for (i = 18; i <= 99; i++){ results.push(i); }
    return results;
  }).apply(this), function(age) {
    return [age, age];
  }));

  exports.PhotoPlaceholder = PhotoPlaceholder = createFactory({
    propTypes: {
      gender: React.PropTypes.string.isRequired,
      message: React.PropTypes.string
    },
    render: function() {
      var genderMap;
      genderMap = {
        M: 'male',
        'F': 'female'
      };
      return Photo({
        className: "photo-generic " + genderMap[this.props.gender] + " " + this.props.className,
        message: this.props.message,
        onClick: this.props.onClick
      }, this.props.children);
    }
  });

  exports.Photo = Photo = createFactory({
    handleClick: function(e) {
      e.preventDefault();
      if (this.props.onClick != null) {
        return this.props.onClick(e);
      }
    },
    render: function() {
      var photo, ref, url;
      photo = _.flatten([this.props.children])[0];
      url = photo != null ? (ref = photo.urls) != null ? ref[this.props.dims] : void 0 : void 0;
      if (url != null) {
        url = "" + (photo != null ? photo.cdnBaseUrl : void 0) + url;
      }
      return d.div({
        className: "photo " + this.props.className
      }, this.props.message == null ? d.div({
        className: 'loading'
      }, d.span({}, "Loading...")) : void 0, d.img({
        width: '100%',
        height: '100%',
        src: url
      }), this.props.message != null ? d.div({
        className: "message"
      }, this.props.message) : void 0, this.props.onClick ? d.a({
        className: 'link-overlay',
        href: '#',
        onClick: this.handleClick
      }) : void 0);
    }
  });

  EditLabel = createFactory({
    render: function() {
      return d.div({
        className: 'edit-label'
      }, this.props.children != null ? d.h3({}, this.props.children) : void 0, !this.props.editMode === true ? d.Button({
        className: 'tiny edit square uppercase',
        onClick: this.props.onEdit
      }, 'Edit') : void 0, this.props.editMode === true ? d.Button({
        className: 'tiny save square uppercase',
        onClick: this.props.onSave
      }, 'Save') : void 0, this.props.editMode === true ? d.Button({
        className: 'tiny cancel square uppercase',
        onClick: this.props.onCancel
      }, 'Cancel') : void 0);
    }
  });

  EditableSection = function(focusProps) {
    return function(Component) {
      return createFactory({
        handleEdit: function() {
          this.setState({
            editMode: true
          });
          if (focusProps.focusOn != null) {
            return focusProps.focusOn(this.refs.section.getDOMNode());
          }
        },
        handleCancel: function() {
          this.setState({
            editMode: false
          });
          if (focusProps.unfocus != null) {
            return focusProps.unfocus();
          }
        },
        handleSave: function() {
          this.setState({
            editMode: false
          });
          if (this.props.onChange != null) {
            this.props.onChange(this.refs.component.value());
          }
          if (focusProps.unfocus != null) {
            return focusProps.unfocus();
          }
        },
        componentDidMount: function() {
          return $(this.refs.section.getDOMNode()).resize((function(_this) {
            return function() {
              if (focusProps.onResize != null) {
                return focusProps.onResize();
              }
            };
          })(this));
        },
        render: function() {
          var ref, ref1, ref2;
          return d.div({
            ref: 'section',
            className: this.props.className + " " + (((ref = this.state) != null ? ref.editMode : void 0) ? 'edit-mode' : '')
          }, EditLabel({
            onEdit: this.props.onEdit || this.handleEdit,
            editMode: (ref1 = this.state) != null ? ref1.editMode : void 0,
            onCancel: this.handleCancel,
            onSave: this.handleSave
          }, this.props.label), Component(_.defaults({
            ref: 'component',
            editMode: (ref2 = this.state) != null ? ref2.editMode : void 0,
            editable: true
          }, this.props), this.props.children));
        }
      });
    };
  };

  Section = function(Component) {
    return createFactory({
      render: function() {
        return d.div({
          className: this.props.className
        }, this.props.label ? d.h3({}, this.props.label) : void 0, Component(_.defaults({
          ref: 'component'
        }, this.props), this.props.children));
      }
    });
  };

  AdvancedCriteriaTable = createFactory({
    value: function() {
      return _.merge({}, this.props.children, this.state);
    },
    handleChange: function(field, e) {
      var value;
      value = $(this.refs[field].getDOMNode()).val();
      return this.setState(_.object([[field, value]]));
    },
    render: function() {
      return d.div.apply(d, [{}].concat(slice.call(_.map(this.props.children, (function(_this) {
        return function(v, k) {
          var options, ref, rendered;
          if (((ref = _this.state) != null ? ref[k] : void 0) != null) {
            v = _this.state[k];
          }
          rendered = {
            label: $l("advancedCriteria." + k),
            value: (v != null) && v !== '' ? $l("options." + k + "." + v) || v : void 0
          };
          options = $l("options." + k);
          if (_this.props.editMode) {
            if (_.isObject(options)) {
              rendered.value = d.select.apply(d, [{
                ref: k,
                value: v,
                onChange: _this.handleChange.bind(null, k)
              }, d.option({}, "")].concat(slice.call(_.map(options, function(label, option) {
                return d.option({
                  value: option
                }, label);
              }))));
            } else {
              rendered.value = d.input({
                ref: k,
                value: rendered.value,
                onChange: _this.handleChange.bind(null, k)
              });
            }
          }
          if (((rendered.value != null) && rendered.value !== '') || _this.props.editable) {
            return d.DescriptionList({
              label: rendered.label
            }, rendered.value);
          }
        };
      })(this)))));
    }
  });

  LookingForTable = createFactory({
    value: function() {
      return _.merge({}, this.props.children, this.state);
    },
    handleChange: function(e) {
      var field, value;
      value = $(e.target).val();
      field = $(e.target).attr('name');
      return this.setState(_.object([[field, value]]));
    },
    render: function() {
      var ref, ref1, ref2, ref3, ref4;
      if (this.props.editMode) {
        return d.BulletList.apply(d, [{}].concat(slice.call([
          d.DropDown({
            name: 'gender',
            value: ((ref = this.state) != null ? ref.gender : void 0) || this.props.children.gender,
            onChange: this.handleChange
          }, $l("gender_plural")), d.span({}, "Between ", d.DropDown({
            name: 'minAge',
            value: ((ref1 = this.state) != null ? ref1.minAge : void 0) || this.props.children.minAge,
            onChange: this.handleChange
          }, ages), " and ", d.DropDown({
            name: 'maxAge',
            value: ((ref2 = this.state) != null ? ref2.maxAge : void 0) || this.props.children.maxAge,
            onChange: this.handleChange
          }, ages)), d.DropDown({
            name: 'distance',
            value: ((ref3 = this.state) != null ? ref3.distance : void 0) || this.props.children.distance,
            onChange: this.handleChange
          }, $l("options.distance")), d.DropDown({
            name: 'relationshipType',
            value: ((ref4 = this.state) != null ? ref4.relationshipType : void 0) || this.props.children.relationshipType,
            onChange: this.handleChange
          }, $l("options.relationshipType"))
        ])));
      } else {
        return d.BulletList.apply(d, [{}].concat(slice.call([$l("gender_plural." + this.props.children.gender), d.span.apply(d, [{}].concat(slice.call(["Between ", d.span({}, this.props.children.minAge), " and ", d.span({}, this.props.children.maxAge)]))), $l("options.distance." + this.props.children.distance), $l("options.relationshipType." + this.props.children.relationshipType)])));
      }
    }
  });

  ProfileContent = createFactory({
    value: function() {
      if (this.refs.textarea == null) {
        return this.props.children;
      }
      return this.refs.textarea.value();
    },
    render: function() {
      if (this.props.editMode) {
        return d.AutoGrowTextArea({
          ref: 'textarea',
          defaultValue: this.props.children
        });
      } else {
        return d.span({}, this.props.children);
      }
    }
  });

  Username = createFactory({
    handleChange: function(e) {
      var field, value;
      value = $(e.target).val();
      field = $(e.target).attr('name');
      return this.setState(_.object([[field, value]]));
    },
    value: function() {
      var ref;
      return ((ref = this.state) != null ? ref.username : void 0) || this.props.children;
    },
    render: function() {
      var ref;
      return d.h3({
        className: 'username'
      }, this.props.editMode ? d.input({
        name: 'username',
        value: ((ref = this.state) != null ? ref.username : void 0) || this.props.children,
        onChange: this.handleChange
      }) : this.props.children);
    }
  });

  ProfileInfo = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.LocationStore()
      };
    },
    getInitialState: function() {
      var ref, ref1;
      return {
        postalCode: (ref = this.props.children.profileLocation) != null ? ref.postalCode : void 0,
        profileLocationGuid: (ref1 = this.props.children.profileLocation) != null ? ref1.guid : void 0,
        profileLocation: this.props.children.profileLocation,
        age: this.props.children.age,
        gender: this.props.children.gender
      };
    },
    handleChange: function(e) {
      var field, value;
      value = $(e.target).val();
      field = $(e.target).attr('name');
      return this.setState(_.object([[field, value]]));
    },
    value: function() {
      return _.omit(this.state, 'postalCode', 'locations');
    },
    handlePostalChange: function(value) {
      this.props.store.updateLocations(value);
      return this.setState({
        postalCode: value
      });
    },
    handleStoreChange: function() {
      var locations, ref;
      locations = this.props.store.getLocations();
      this.setState({
        profileLocation: locations[0]
      });
      if (!this.props.store.getLocation(this.state.profileLocationGuid)) {
        this.setState({
          profileLocationGuid: (ref = locations[0]) != null ? ref.guid : void 0
        });
      }
      return this.forceUpdate();
    },
    componentDidMount: function() {
      this.props.store.setRestClient(this.props.restClient);
      this.props.store.on('change', this.handleStoreChange);
      if (this.props.editable) {
        this.props.store.preload([this.props.children.profileLocation]);
        return this.handlePostalChange(this.state.postalCode);
      }
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleStoreChange);
    },
    handleCityChange: function(e) {
      return this.setState({
        profileLocationGuid: $(e.target).val(),
        profileLocation: this.props.store.getLocation($(e.target).val())
      });
    },
    render: function() {
      var ref, ref1, ref2, ref3, ref4, ref5;
      return d.div.apply(d, [{
        className: 'info',
        ref: 'info'
      }].concat(slice.call((this.props.editMode ? [
        d.DropDown({
          name: 'age',
          value: ((ref = this.state) != null ? ref.age : void 0) || this.props.children.age,
          onChange: this.handleChange
        }, ages), d.DropDown({
          name: 'gender',
          value: ((ref1 = this.state) != null ? ref1.gender : void 0) || this.props.children.gender,
          onChange: this.handleChange
        }, $l("gender")), d.div({
          className: 'location'
        }, d.div({
          className: 'location-field'
        }, d.label({}, $l('location.postalCode')), d.input({
          defaultValue: this.state.postalCode,
          onChange: (function(_this) {
            return function(e) {
              return _this.handlePostalChange($(e.target).val());
            };
          })(this)
        })), d.div({
          className: 'location-field'
        }, d.label({}, $l('location.city')), d.select.apply(d, [{
          defaultValue: this.state.profileLocationGuid,
          onChange: this.handleCityChange
        }].concat(slice.call(_.map(this.props.store.getLocations(), function(loc) {
          return d.option({
            value: loc.guid
          }, loc.city + ", " + loc.stateCode);
        }))))))
      ] : [
        d.Glyph({
          glyph: 'map-marker'
        }), d.span({}, ((ref2 = this.props.children.profileLocation) != null ? ref2.city : void 0) + ", " + ((ref3 = this.props.children.profileLocation) != null ? ref3.stateCode : void 0) + " "), d.span({}, $l("gender." + (((ref4 = this.state) != null ? ref4.gender : void 0) || this.props.children.gender))), d.span({}, " "), d.span({}, ((ref5 = this.state) != null ? ref5.age : void 0) || this.props.children.age), d.Glyph({
          glyph: 'camera'
        }), d.span({
          className: 'camera-count'
        }, "3")
      ]))));
    }
  });

  PhotoWithPlaceholder = createFactory({
    render: function() {
      var ref;
      if ((this.props.photo != null) && this.props.photo.storage !== 'pending') {
        return Photo({
          className: 'primary',
          dims: '300x300'
        }, this.props.photo);
      } else {
        return PhotoPlaceholder({
          className: 'primary',
          gender: this.props.gender,
          message: (((ref = this.props.photo) != null ? ref.storage : void 0) === 'pending' ? 'Pending' : void 0)
        });
      }
    }
  });

  SlidingPhotoGallery = createFactory({
    getInitialState: function() {
      return {
        index: 0
      };
    },
    getDeltaX: function(e) {
      var deltaX;
      deltaX = this.startX - e.changedTouches[0].screenX;
      if (deltaX < 0 && this.state.index === 0) {
        deltaX = 0;
      }
      if (deltaX > 0 && this.state.index === this.props.photos.length - 1) {
        deltaX = 0;
      }
      return deltaX;
    },
    handleTouchMove: function(e) {
      var deltaX;
      deltaX = this.getDeltaX(e);
      $(this.refs.current.getDOMNode()).css({
        left: -deltaX
      });
      if (this.refs.next != null) {
        $(this.refs.next.getDOMNode()).css({
          left: this.containerWidth - deltaX
        });
      }
      if (this.refs.previous != null) {
        return $(this.refs.previous.getDOMNode()).css({
          left: -this.containerWidth - deltaX
        });
      }
    },
    handleTouchStart: function(e) {
      this.containerWidth = $(this.refs.current.getDOMNode()).innerWidth();
      return this.startX = e.changedTouches[0].screenX;
    },
    handleTouchEnd: function(e) {
      var deltaX;
      deltaX = this.getDeltaX(e);
      if (deltaX > (this.containerWidth / 3)) {
        this.setState({
          index: this.state.index + 1
        });
      } else if (deltaX < -(this.containerWidth / 3)) {
        this.setState({
          index: this.state.index - 1
        });
      }
      $(this.refs.current.getDOMNode()).css({
        left: 0
      });
      if (this.refs.next != null) {
        $(this.refs.next.getDOMNode()).css({
          left: 0
        });
      }
      if (this.refs.previous != null) {
        return $(this.refs.previous.getDOMNode()).css({
          left: 0
        });
      }
    },
    handleClick: function(e) {
      e.preventDefault();
      if ($(this.refs.current.getDOMNode()).innerWidth() !== 300) {
        return;
      }
      if (this.props.onClick != null) {
        return this.props.onClick(e);
      }
    },
    render: function() {
      return d.div({
        ref: 'container',
        className: 'sliding-gallery',
        onClick: this.handleClick,
        onTouchStart: this.handleTouchStart,
        onTouchEnd: this.handleTouchEnd,
        onTouchMove: this.handleTouchMove
      }, this.props.photos[this.state.index - 1] != null ? d.div({
        ref: 'previous',
        className: 'previous'
      }, PhotoWithPlaceholder({
        photo: this.props.photos[this.state.index - 1],
        gender: this.props.gender
      })) : void 0, d.div({
        ref: 'current',
        className: 'current'
      }, PhotoWithPlaceholder({
        photo: this.props.photos[this.state.index],
        gender: this.props.gender
      })), this.props.photos[this.state.index + 1] != null ? d.div({
        ref: 'next',
        className: 'next'
      }, PhotoWithPlaceholder({
        photo: this.props.photos[this.state.index + 1],
        gender: this.props.gender
      })) : void 0);
    }
  });

  PopupMenu = createFactory({
    getInitialState: function() {
      return {
        visible: this.props.visible || false
      };
    },
    show: function() {
      return this.setState({
        visible: true
      });
    },
    hide: function() {
      return this.setState({
        visible: false
      });
    },
    handleItemClick: function(item, e) {
      e.preventDefault();
      this.hide();
      if (this.props.onClick != null) {
        return this.props.onClick(item, e);
      }
    },
    render: function() {
      console.log(this.props);
      return d.div({
        className: "popup-menu-container " + (this.state.visible ? 'visible' : 'hidden'),
        onClick: this.hide
      }, d.span({
        className: 'align-helper'
      }), d.div.apply(d, [{
        className: 'popup-menu'
      }].concat(slice.call(_.map(this.props.items, (function(_this) {
        return function(item) {
          return d.a({
            href: '#',
            onClick: _this.handleItemClick.bind(null, item)
          }, $l("popupMenu." + item));
        };
      })(this))))));
    }
  });

  exports.Profile = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.ProfileStore()
      };
    },
    getInitialState: function() {
      return {};
    },
    componentWillReceiveProps: function(nextProps) {
      return this.props.store.preload(nextProps.profile);
    },
    componentWillMount: function() {
      return this.props.store.preload(this.props.profile);
    },
    componentDidMount: function() {
      this.props.store.setRestClient(this.props.restClient);
      return this.props.store.on('change', (function(_this) {
        return function() {
          return _this.forceUpdate();
        };
      })(this));
    },
    handleChange: function(section, values) {
      var updates;
      updates = _.object([[section, values]]);
      this.props.restClient.post('', updates);
      return this.setState(updates);
    },
    handleChangeContent: function(section, values) {
      var updates;
      updates = _.object([[section, values]]);
      this.props.restClient.post('', {
        content: updates
      });
      return this.setState(_.object([["content_" + section, values]]));
    },
    handleProfileInfoChange: function(profileInfo) {
      this.props.restClient.post('', profileInfo);
      return this.setState(profileInfo);
    },
    handleLikeProfile: function() {
      return this.props.store.flipLikeFlag();
    },
    handleHideProfile: function() {
      return this.props.store.hide();
    },
    handleReportProfile: function() {
      return this.refs.reportOptions.show();
    },
    handleSendMessage: function() {
      var profile;
      profile = this.props.store.getState();
      return this.props.onChangePath("/conversation/" + profile.guid);
    },
    handleShowMoreOptions: function(e) {
      return this.refs.moreOptions.show();
    },
    handleOptionClick: function(choice, e) {
      if (choice === 'message') {
        return this.handleSendMessage();
      } else if (choice === 'like') {
        return this.handleLikeProfile();
      } else if (choice === 'hide') {
        return this.handleHideProfile();
      } else if (choice === 'report') {
        return this.handleReportProfile();
      }
    },
    handleReportOption: function(choice) {
      return this.props.store.report(choice);
    },
    render: function() {
      var photo, profile, ref, ref1, ref2, ref3, ref4, ref5, section, url;
      profile = this.props.store.getState();
      if (profile == null) {
        return d.div({
          className: 'outer-container'
        }, d.div({
          className: 'inner-container',
          style: {
            paddingTop: 20
          }
        }, d.h2({}, $l('removedProfile'))));
      }
      section = this.props.editable ? EditableSection({
        focusOn: (function(_this) {
          return function(element) {
            return _this.refs.focusSection.focus(element);
          };
        })(this),
        unfocus: (function(_this) {
          return function() {
            return _this.refs.focusSection.unfocus();
          };
        })(this),
        onResize: (function(_this) {
          return function() {
            return _this.refs.focusSection.handleWindowResize();
          };
        })(this)
      }) : Section;
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.FocusSection({
        ref: 'focusSection',
        animate: true
      }), PopupMenu({
        ref: 'moreOptions',
        items: ['message', 'like', 'hide', 'report'],
        onClick: this.handleOptionClick
      }), PopupMenu({
        ref: 'reportOptions',
        items: ['fake', 'scammer', 'badPhoto', 'offensive', 'other', 'cancel'],
        onClick: this.handleReportOption
      }), d.div.apply(d, [{
        className: 'profile'
      }].concat(slice.call([
        d.div.apply(d, [{
          className: 'photos-and-info'
        }].concat(slice.call([d.div.apply(d, [{
            className: 'photos'
          }].concat(slice.call([SlidingPhotoGallery({
              gender: profile.gender,
              onClick: ((function(_this) {
                return function() {
                  return _this.setState({
                    zoomPhotoIndex: 0
                  });
                };
              })(this)),
              photos: _.filter(_.flatten([profile.primaryPhoto, profile.photos]), function(p) {
                return p != null;
              })
            })].concat(slice.call(_.map(profile.photos, (function(_this) {
              return function(photo, index) {
                if (photo.storage !== 'pending') {
                  return Photo({
                    className: 'other',
                    dims: '300x300',
                    onClick: function() {
                      return _this.setState({
                        zoomPhotoIndex: index + 1
                      });
                    }
                  }, photo);
                } else {
                  return PhotoPlaceholder({
                    className: 'other',
                    gender: profile.gender,
                    message: (photo.storage === 'pending' ? 'Pending' : void 0)
                  });
                }
              };
            })(this))))))), Section(Username)({
            className: 'username-container'
          }, profile.username), section(ProfileInfo)({
            className: 'profile-info-container',
            onChange: this.handleProfileInfoChange,
            restClient: this.props.rootRestClient
          }, _.pick(_.defaults({}, this.state || {}, profile), 'age', 'gender', 'city', 'profileLocation'))].concat(slice.call((this.props.editable !== true ? [
            d.Button({
              className: 'send-message square',
              onClick: this.handleSendMessage
            }, d.Glyph({
              glyph: 'envelope'
            }), d.span({
              className: 'button-label'
            }, "Message")), d.Button({
              className: "like-profile square" + (((ref = profile.flags) != null ? ref.liked : void 0) ? ' is-liked' : ''),
              onClick: this.handleLikeProfile
            }, d.Glyph({
              glyph: 'heart'
            }), d.span({
              className: 'button-label'
            }, "Like")), d.Button({
              className: "more-options square",
              onClick: this.handleShowMoreOptions
            }, d.Glyph({
              glyph: 'ellipsis-h'
            }), d.span({
              className: 'button-label'
            }, "More"))
          ] : [
            d.Button({
              className: 'photos-button square',
              onClick: (function(_this) {
                return function() {
                  return _this.props.onChangePath('/photos');
                };
              })(this)
            }, d.Glyph({
              glyph: 'camera'
            }), d.span({
              className: 'button-label'
            }, "Photos"))
          ])))))), d.div.apply(d, [{
          className: "content-and-details " + ((((profile != null ? (ref3 = profile.content) != null ? ref3.length : void 0 : void 0) != null) || 0) === 0 ? 'no-content' : 'has-content')
        }].concat(slice.call([
          d.div.apply(d, [{
            className: 'content'
          }].concat(slice.call(_.map(profile.content || [], (function(_this) {
            return function(item) {
              var ref1;
              return section(ProfileContent)({
                className: 'item',
                label: $l("content." + item.type),
                onChange: _this.handleChangeContent.bind(null, item.type)
              }, ((ref1 = _this.state) != null ? ref1["content_" + item.type] : void 0) || item.content);
            };
          })(this))))), d.div({
            className: 'details'
          }, section(LookingForTable)({
            className: 'looking-for',
            label: 'Looking For',
            onChange: this.handleChange.bind(null, 'lookingFor')
          }, _.merge({}, profile.lookingFor, (ref1 = this.state) != null ? ref1.lookingFor : void 0)), section(AdvancedCriteriaTable)({
            className: 'my-details',
            label: 'My Details',
            onChange: this.handleChange.bind(null, 'advancedCriteria')
          }, _.merge({}, profile.advancedCriteria, ((ref2 = this.state) != null ? ref2.advancedCriteria : void 0) || {}))), d.div.apply(d, [{
            className: "profile-bottom-buttons"
          }].concat(slice.call([
            d.div({
              className: 'hide-user-button'
            }, d.Glyph({
              glyph: 'user'
            }), d.span({}, "Hide this user")), d.div({
              className: 'flag-user-button'
            }, d.Glyph({
              glyph: 'flag'
            }), d.span({}, "Flag this user"))
          ]))), d.div.apply(d, [{
            className: "profile-footer"
          }].concat(slice.call([
            [
              d.div.apply(d, [{
                className: 'profile-footer-link-groups'
              }].concat(slice.call([
                d.span({
                  className: 'about-us-link'
                }, "About Us"), d.span({
                  className: 'term-of-services-link'
                }, "Term Of Services"), d.span({
                  className: 'privacy-link'
                }, "Privacy"), d.span({
                  className: 'faqs-link'
                }, "FAQs")
              ]))), d.span({}, "CurvesConnect.com  &#169; 2016 All Rights Reserved.\nCurvesConnect&reg; does not conduct background checks on\nthe members or subscribes of this website.")
            ]
          ])))
        ])))
      ]))), this.state.zoomPhotoIndex != null ? (photo = this.state.zoomPhotoIndex === 0 ? profile.primaryPhoto : profile.photos[this.state.zoomPhotoIndex - 1], url = photo != null ? (ref4 = photo.urls) != null ? ref4['800x800'] : void 0 : void 0, url != null ? url = "" + (photo != null ? photo.cdnBaseUrl : void 0) + url : void 0, d.div({
        className: 'photo-gallery'
      }, d.span({
        className: 'align-helper'
      }), d.div({
        className: 'photo-wrapper'
      }, d.img({
        src: url
      }), d.div({
        className: 'close'
      }, d.Button({
        onClick: (function(_this) {
          return function() {
            return _this.setState({
              zoomPhotoIndex: null
            });
          };
        })(this)
      }, $l('close'))), this.state.zoomPhotoIndex > 0 ? d.div({
        className: 'back',
        onClick: (function(_this) {
          return function() {
            return _this.setState({
              zoomPhotoIndex: _this.state.zoomPhotoIndex - 1
            });
          };
        })(this)
      }, d.span({
        className: 'align-helper'
      }), d.Glyph({
        glyph: 'chevron-left'
      })) : void 0, this.state.zoomPhotoIndex < ((ref5 = profile.photos) != null ? ref5.length : void 0) ? d.div({
        className: 'forward',
        onClick: (function(_this) {
          return function() {
            return _this.setState({
              zoomPhotoIndex: _this.state.zoomPhotoIndex + 1
            });
          };
        })(this)
      }, d.span({
        className: 'align-helper'
      }), d.Glyph({
        glyph: 'chevron-right'
      })) : void 0))) : void 0));
    }
  });

}).call(this);

//# sourceMappingURL=profile.js.map
