// Generated by CoffeeScript 1.9.3
(function() {
  var _, inline, jade, mailgunFactory, mincer, moment, path, spawn, throttle, url;

  jade = require('jade');

  mincer = require('mincer');

  path = require('path');

  url = require('url');

  spawn = require('child_process').spawn;

  _ = require('lodash');

  throttle = require('core').throttle;

  inline = require('css-inline');

  moment = require('moment');

  mailgunFactory = require('mailgun-js');

  exports.MailgunApi = function($p, $options) {
    var domains, self;
    domains = {};
    return self = {
      send: function(sendingDomain, msg) {
        var mailgun;
        mailgun = domains[sendingDomain] || mailgunFactory({
          apiKey: $options.apiKey,
          domain: sendingDomain
        });
        return $p.wrap(mailgun.messages().send(msg, $p.ecb()));
      }
    };
  };

  exports.EmailProviderFactory = function($p, $options, emailRenderer, mailgunApi, localizedMessages, socialApiFactory) {
    return function(siteDefinition) {
      var getAccountAndProfile, getDefaultVariables, self, socialApi;
      socialApi = socialApiFactory(siteDefinition.socialApiDatabase);
      getAccountAndProfile = function(accountGuid) {
        return [socialApi.get("/accounts", accountGuid), socialApi.get("/profiles/by_account", accountGuid), socialApi.get("/accounts", accountGuid, "token")].then(function(account, profileGuid, loginToken) {
          return socialApi.get("/profiles", profileGuid).then(function(profile) {
            return $p.resolved(account, profile, loginToken);
          });
        });
      };
      getDefaultVariables = function(accountGuid) {
        return getAccountAndProfile(accountGuid).then(function(account, profile, loginToken) {
          var messages;
          messages = localizedMessages.getMessages(siteDefinition.siteKey);
          return $p.resolved({
            username: profile.username,
            emailAddress: account.emailAddress,
            baseUrl: "http://" + (siteDefinition.siteUrl || siteDefinition.siteName),
            cdnPrefix: "http://" + (siteDefinition.siteUrl || siteDefinition.siteName),
            messages: messages,
            auth: loginToken
          }, account, profile);
        });
      };
      return self = {
        renderWelcomeEmail: function(accountGuid, variables) {
          return getDefaultVariables(accountGuid).then(function(defaultVariables, account, profile) {
            variables = _.merge({}, defaultVariables, variables);
            return emailRenderer.render(siteDefinition.siteKey, "welcome", variables).then(function(html) {
              return {
                from: siteDefinition.messageOverrides.common.siteTitle + " <info@" + siteDefinition.siteName + ">",
                to: ($options != null ? $options.emailOverride : void 0) || variables.emailAddress,
                subject: "Welcome to CurvesConnect.com",
                html: html,
                'o:tag': ['welcome'],
                'o:campaign': ['welcome']
              };
            });
          });
        },
        renderNewMessageNotification: function(senderProfileGuid, receiverAccountGuid, variables) {
          return getDefaultVariables(receiverAccountGuid).then(function(defaultVariables, account, profile) {
            return socialApi.get("/profiles", senderProfileGuid).then(function(senderProfile) {
              variables = _.merge({}, defaultVariables, variables, {
                sender: senderProfile
              });
              return emailRenderer.render(siteDefinition.siteKey, "message_notification", variables).then(function(html) {
                return {
                  from: siteDefinition.messageOverrides.common.siteTitle + " <info@" + siteDefinition.siteName + ">",
                  to: ($options != null ? $options.emailOverride : void 0) || variables.emailAddress,
                  subject: "New message from " + senderProfile.username + "!",
                  html: html,
                  'o:tag': ['new_message'],
                  'o:campaign': ['new_message']
                };
              });
            });
          });
        },
        renderNewLikeNotification: function(senderProfileGuid, receiverAccountGuid, variables) {
          return getDefaultVariables(receiverAccountGuid).then(function(defaultVariables, account, profile) {
            return socialApi.get("/profiles", senderProfileGuid).then(function(senderProfile) {
              variables = _.merge({}, defaultVariables, variables, {
                sender: senderProfile
              });
              return emailRenderer.render(siteDefinition.siteKey, "like_notification", variables).then(function(html) {
                return {
                  from: siteDefinition.messageOverrides.common.siteTitle + " <info@" + siteDefinition.siteName + ">",
                  to: ($options != null ? $options.emailOverride : void 0) || variables.emailAddress,
                  subject: "Someone on " + siteDefinition.messageOverrides.common.siteTitle + " likes you!",
                  html: html,
                  'o:tag': ['new_like'],
                  'o:campaign': ['new_like']
                };
              });
            });
          });
        },
        renderUnreadMessagesEmail: function(accountGuid, variables) {
          return getDefaultVariables(accountGuid).then(function(defaultVariables, account, profile) {
            return socialApi.get("/messaging/inbox", profile.guid, 0, {
              pageSize: 0,
              unreadOnly: true
            }).then(function(results) {
              variables = _.merge({}, defaultVariables, variables || {}, {
                unreadMessageCount: results.total
              });
              return emailRenderer.render(siteDefinition.siteKey, "unread_messages", variables).then(function(html) {
                return $p.resolved({
                  from: siteDefinition.messageOverrides.common.siteTitle + " <info@" + siteDefinition.siteName + ">",
                  to: ($options != null ? $options.emailOverride : void 0) || variables.emailAddress,
                  subject: "You have unread messages waiting for you!",
                  html: html,
                  'o:tag': ['unread_messages'],
                  'o:campaign': ['unread_messages']
                }, results.total);
              });
            });
          });
        },
        renderDiscoverNewProfiles: function(accountGuid, variables) {
          return getDefaultVariables(accountGuid).then(function(defaultVariables, account, profile) {
            return socialApi.post("/discovery", profile.guid).then(function(results) {
              variables = _.merge({}, defaultVariables, variables || {}, {
                newProfilesToDiscover: results.totalFound
              });
              return emailRenderer.render(siteDefinition.siteKey, "discover_new_profiles", variables).then(function(html) {
                return $p.resolved({
                  from: siteDefinition.messageOverrides.common.siteTitle + " <info@" + siteDefinition.siteName + ">",
                  to: ($options != null ? $options.emailOverride : void 0) || variables.emailAddress,
                  subject: "You have new profiles to discover!",
                  html: html,
                  'o:tag': ['discover_new_profiles'],
                  'o:campaign': ['discover_new_profiles']
                }, results.totalFound);
              });
            });
          });
        },
        renderForgotPasswordNotification: function(accountGuid, variables) {
          return getDefaultVariables(accountGuid).then(function(defaultVariables, account, profile) {
            variables = _.merge({}, defaultVariables, variables);
            return emailRenderer.render(siteDefinition.siteKey, "forgot_password", variables).then(function(html) {
              return {
                from: siteDefinition.messageOverrides.common.siteTitle + " <info@" + siteDefinition.siteName + ">",
                to: ($options != null ? $options.emailOverride : void 0) || variables.emailAddress,
                subject: "Forgot you password?",
                html: html,
                'o:tag': ['forgot_password'],
                'o:campaign': ['forgot_password']
              };
            });
          });
        },
        sendWelcomeEmail: function(accountGuid, variables) {
          return self.renderWelcomeEmail(accountGuid, variables).then(function(renderedMessage) {
            return mailgunApi.send(siteDefinition.siteName, renderedMessage);
          });
        },
        sendNewMessageNotification: function(senderProfileGuid, receiverAccountGuid, variables) {
          return self.renderNewMessageNotification(senderProfileGuid, receiverAccountGuid, variables).then(function(renderedMessage) {
            return mailgunApi.send(siteDefinition.siteName, renderedMessage);
          });
        },
        sendNewLikeNotification: function(senderProfileGuid, receiverAccountGuid, variables) {
          return self.renderNewLikeNotification(senderProfileGuid, receiverAccountGuid, variables).then(function(renderedMessage) {
            return mailgunApi.send(siteDefinition.siteName, renderedMessage);
          });
        },
        sendForgotPasswordNotification: function(accountGuid, variables) {
          return self.renderForgotPasswordNotification(accountGuid).then(function(renderedMessage) {
            return mailgunApi.send(siteDefinition.siteName, renderedMessage);
          });
        },
        sendUnreadMessagesEmail: function(accountGuid, variables) {
          return self.renderUnreadMessagesEmail(accountGuid, variables).then(function(renderedMessage, unreadMessageCount) {
            if (unreadMessageCount > 0) {
              return mailgunApi.send(siteDefinition.siteName, renderedMessage);
            }
          });
        },
        sendDiscoverNewProfiles: function(accountGuid, variables) {
          return self.renderDiscoverNewProfiles(accountGuid, variables).then(function(renderedMessage, newProfilesToDiscover) {
            if (newProfilesToDiscover > 0) {
              return mailgunApi.send(siteDefinition.siteName, renderedMessage);
            }
          });
        }
      };
    };
  };

  exports.EmailRenderer = function($p, $options) {
    var basePath, environment, inlineThrottle, self, shortDate;
    if (($options != null ? $options.debug : void 0) === true) {
      mincer.logger.use(console);
    }
    basePath = process.cwd();
    environment = new mincer.Environment();
    environment.appendPath(path.join(basePath, 'assets/css'));
    environment.appendPath(path.join(basePath, 'assets/images'));
    environment.appendPath(path.join(basePath, 'assets/lib/ink'));
    shortDate = function(date) {
      if (date == null) {
        return date;
      }
      return moment(date).format("MM/DD/YYYY");
    };
    inlineThrottle = throttle(5, 100);
    return self = {
      render: function(siteId, template, locals) {
        var assetPath, fileName, html, renderOpts;
        assetPath = function(file) {
          var asset;
          file = file.replace(/\{siteId\}/g, siteId);
          asset = environment.findAsset(file);
          if (asset == null) {
            throw new Error("Unknown asset [" + file + "]");
          }
          path = "/assets/" + file;
          if ((locals != null ? locals.cdnPrefix : void 0) != null) {
            path = locals.cdnPrefix + path;
          }
          return path;
        };
        renderOpts = {
          pretty: true,
          assetPath: assetPath,
          embedAsset: function(file) {
            var asset;
            asset = environment.findAsset(file);
            return asset;
          }
        };
        fileName = "views/email/" + siteId + "/" + template + ".jade";
        locals = _.defaults(locals || {}, renderOpts);
        locals.shortDate = shortDate;
        locals.template = template;
        locals.href = function(href) {
          var parsedHref;
          if (locals.baseUrl != null) {
            href = locals.baseUrl + href;
          }
          parsedHref = url.parse(href, true);
          delete parsedHref.search;
          if (locals.auth != null) {
            parsedHref.query.auth = locals.auth;
          }
          parsedHref.query.utm_source = 'Existing';
          parsedHref.query.utm_campaign = template;
          parsedHref.query.utm_medium = 'Customer Email';
          return url.format(parsedHref);
        };
        locals = _.merge({}, locals, {
          assetPath: assetPath
        });
        html = jade.renderFile(fileName, locals).toString();
        return inlineThrottle(function() {
          return $p.wrap(inline(html, $p.ecb()));
        });
      }
    };
  };

}).call(this);

//# sourceMappingURL=emails.js.map
