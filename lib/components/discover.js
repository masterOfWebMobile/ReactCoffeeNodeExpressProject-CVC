// Generated by CoffeeScript 1.9.3
(function() {
  var $l, React, _, createFactory, d, moment, stores;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'), require('./profile_list'));

  createFactory = d.createFactory;

  stores = require('./stores');

  $l = require('./locale');

  moment = require('moment');

  exports.Discover = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.DiscoverStore()
      };
    },
    handleChange: function() {
      this.props.notificationStore.updateDiscoverCounter(this.props.store.getTotalFound());
      return this.forceUpdate();
    },
    handleViewProfile: function() {
      return this.props.onChangePath("/profile/" + (this.props.store.getCurrentProfile().guid));
    },
    handleSendMessage: function() {
      return this.props.onChangePath("/conversation/" + (this.props.store.getCurrentProfile().guid));
    },
    componentWillMount: function() {
      return this.props.store.preload(this.props.items, this.props.totalFound);
    },
    componentDidMount: function() {
      this.props.store.on('change', this.handleChange);
      return this.props.store.setRestClient(this.props.restClient);
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    render: function() {
      var profile, ref, ref1, ref2, status;
      profile = this.props.store.getCurrentProfile();
      status = this.props.store.getStatus();
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'discover'
      }, status === 'loading' ? d.div({
        className: 'loading'
      }, d.span({}, $l('loading'))) : status === 'empty' ? d.div({
        className: 'empty'
      }, d.span({}, $l('emptyDiscover'))) : void 0, d.div({
        className: 'photos'
      }, d.div({
        className: 'current'
      }, d.div({
        className: 'photo',
        style: {
          backgroundImage: "url(" + (profile != null ? (ref = profile.primaryPhoto) != null ? ref.cdnBaseUrl : void 0 : void 0) + (profile != null ? (ref1 = profile.primaryPhoto) != null ? (ref2 = ref1.urls) != null ? ref2['300x300'] : void 0 : void 0 : void 0) + ")"
        }
      }, d.div({
        className: 'overlay-container'
      }, d.Button({
        className: "view-profile square",
        onClick: this.handleViewProfile
      }, d.Glyph({
        glyph: 'info'
      })), d.Button({
        className: "send-message square",
        onClick: this.handleSendMessage
      }, d.Glyph({
        glyph: 'comment'
      })))))), d.div({
        className: 'buttons-container'
      }, d.div({
        className: 'buttons'
      }, d.Button({
        className: "hide-profile square",
        onClick: (function(_this) {
          return function() {
            _this.props.store.hide();
          };
        })(this)
      }, d.Glyph({
        glyph: 'remove'
      })), d.Button({
        className: "like-profile square",
        onClick: (function(_this) {
          return function() {
            _this.props.store.like();
          };
        })(this)
      }, d.Glyph({
        glyph: 'star'
      })))))));
    }
  });

}).call(this);

//# sourceMappingURL=discover.js.map
