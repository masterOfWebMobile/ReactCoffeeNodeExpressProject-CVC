(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var LandingPage, React, props;

  React = require('react');

  LandingPage = require('../components/app');

  props = JSON.parse(document.getElementById('initial-state').innerHTML);

  React.render(LandingPage(props), document.getElementById('app'));

}).call(this);



},{"../components/app":2,"react":undefined}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var $l, EventEmitter, Header, History, Home, PhotoPlaceholder, Profile, React, Support, _, createFactory, d, findRoute, parseRoute, ref, routes, stores,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  EventEmitter = require('events').EventEmitter;

  stores = require('./stores');

  ref = require('./profile'), Profile = ref.Profile, PhotoPlaceholder = ref.PhotoPlaceholder;

  Support = require('./support');

  $l = require('./locale');

  History = require('./history');

  Header = createFactory({
    propTypes: {
      onChangePath: React.PropTypes.func.isRequired
    },
    componentDidMount: function() {
      return this.props.notificationStore.on('change', this.handleChange);
    },
    componentWillUnmount: function() {
      return this.props.notificationStore.removeListener('change', this.handleChange);
    },
    handleChange: function() {
      return this.forceUpdate();
    },
    handleClick: function(path, e) {
      e.preventDefault();
      this.refs.menu.hide();
      return this.props.onChangePath(path);
    },
    handleSignout: function(e) {
      e.preventDefault();
      this.refs.menu.hide();
      if (confirm($l('signOutConfirmation'))) {
        return this.props.signOut();
      }
    },
    handleHelp: function(e) {
      if (e != null) {
        e.preventDefault();
      }
      this.refs.menu.hide();
      return this.refs.support.show();
    },
    handleShowMenu: function(e) {
      e.preventDefault();
      return this.refs.menu.show();
    },
    render: function() {
      var newDiscover, newLikedBy, newMessages, newVisitors, profile, ref1, ref2, ref3, ref4, showUpgrade;
      profile = this.props.myProfileSummary;
      newMessages = this.props.notificationStore.getNewMessages();
      newDiscover = this.props.notificationStore.getNewDiscover();
      newVisitors = this.props.notificationStore.getNewVisitors();
      newLikedBy = this.props.notificationStore.getNewLikedBy();
      showUpgrade = ((ref1 = this.props.features.billing) != null ? ref1.available : void 0) && !((ref2 = this.props.features.messaging) != null ? ref2.available : void 0);
      return d.div({
        className: "navigation-container" + (showUpgrade ? ' show-upgrade' : '')
      }, Support({
        ref: 'support',
        restClient: this.props.rootRestClient
      }), d.SlidingMenu({
        ref: 'menu'
      }, d.div({
        className: 'logo-white'
      }), showUpgrade ? d.Button({
        className: 'subscribe',
        onClick: this.handleClick.bind(null, '/upgrade')
      }, d.Glyph({
        glyph: 'certificate'
      }), d.span({}, $l('tooltips.subscribe'))) : void 0, d.Button({
        onClick: this.handleClick.bind(null, '/browse')
      }, d.Glyph({
        glyph: 'search'
      }), d.span({}, $l('tooltips.browse'))), d.Button({
        onClick: this.handleClick.bind(null, '/discover')
      }, d.Glyph({
        glyph: 'users'
      }), d.span({}, $l('tooltips.discover')), newDiscover > 0 ? d.span({
        className: 'counter'
      }, newDiscover) : void 0), ((ref3 = this.props.features.liked_by) != null ? ref3.enabled : void 0) ? d.Button({
        onClick: this.handleClick.bind(null, '/liked_by')
      }, d.Glyph({
        glyph: 'star'
      }), d.span({}, $l('tooltips.likedBy')), newLikedBy > 0 ? d.span({
        className: 'counter'
      }, newLikedBy) : void 0) : void 0, d.Button({
        onClick: this.handleClick.bind(null, '/inbox')
      }, d.Glyph({
        glyph: 'envelope'
      }), d.span({}, $l('tooltips.inbox')), newMessages > 0 ? d.span({
        className: 'counter'
      }, newMessages) : void 0), ((ref4 = this.props.features.visitors) != null ? ref4.enabled : void 0) ? d.Button({
        onClick: this.handleClick.bind(null, '/visitors')
      }, d.Glyph({
        glyph: 'eye'
      }), d.span({}, $l('tooltips.visitors')), newVisitors > 0 ? d.span({
        className: 'counter'
      }, newVisitors) : void 0) : void 0, d.Button({
        onClick: this.handleClick.bind(null, '/myprofile')
      }, d.Glyph({
        glyph: {
          M: 'male',
          'F': 'female'
        }[profile.gender]
      }), d.span({}, $l('tooltips.myprofile'))), d.Button({
        onClick: this.handleClick.bind(null, '/photos')
      }, d.Glyph({
        glyph: 'camera'
      }), d.span({}, $l('tooltips.photos'))), d.Button({
        onClick: this.handleClick.bind(null, '/settings')
      }, d.Glyph({
        glyph: 'wrench'
      }), d.span({}, $l('tooltips.settings'))), d.Button({
        onClick: this.handleHelp
      }, d.Glyph({
        glyph: 'question'
      }), d.span({}, $l('tooltips.help'))), d.Button({
        onClick: this.handleSignout
      }, d.Glyph({
        glyph: 'sign-out'
      }), d.span({}, $l('tooltips.signout')))), d.div({
        className: 'header'
      }, d.div({
        className: 'outer'
      }, d.div({
        className: 'inner'
      }, this.props.showBackButton ? d.a({
        className: 'sliding-menu-link',
        href: "#",
        onClick: this.props.onBack
      }, d.Glyph({
        glyph: 'arrow-left'
      })) : d.a({
        className: 'sliding-menu-link',
        href: "#",
        onClick: this.handleShowMenu
      }, d.Glyph({
        glyph: 'bars'
      })), d.div({
        className: 'logo-container'
      }, d.div({
        className: 'clickable long-logo-white',
        onClick: (function(_this) {
          return function() {
            return _this.handleClick.bind(null, '/browse');
          };
        })(this)
      }), d.div({
        className: 'clickable site-name',
        onClick: (function(_this) {
          return function() {
            return _this.handleClick.bind(null, '/browse');
          };
        })(this)
      })), showUpgrade ? d.a({
        className: 'primary button-link',
        title: $l('tooltips.subscribe'),
        href: "#",
        onClick: this.handleClick.bind(null, '/upgrade')
      }, $l("tooltips.subscribe")) : void 0, d.a({
        className: 'secondary circle-link',
        title: $l('tooltips.browse'),
        href: "#",
        onClick: this.handleClick.bind(null, '/browse')
      }, d.Glyph({
        glyph: 'search'
      })), d.div({
        className: 'secondary discover'
      }, d.a({
        className: 'circle-link',
        title: $l('tooltips.discover'),
        href: "#",
        onClick: this.handleClick.bind(null, '/discover')
      }, d.Glyph({
        glyph: 'users'
      })), newDiscover > 0 ? d.span({
        className: 'counter'
      }, newDiscover < 100 ? newDiscover : "99+") : void 0), d.div({
        className: 'secondary inbox'
      }, d.a({
        className: 'circle-link',
        title: $l('tooltips.inbox'),
        href: "#",
        onClick: this.handleClick.bind(null, '/inbox')
      }, d.Glyph({
        glyph: 'envelope'
      })), newMessages > 0 ? d.span({
        className: 'counter'
      }, newMessages) : void 0), d.a({
        className: 'other circle-link',
        title: $l('tooltips.myprofile'),
        href: "#",
        onClick: this.handleClick.bind(null, '/myprofile')
      }, d.Glyph({
        glyph: {
          M: 'male',
          'F': 'female'
        }[profile.gender]
      })), d.a({
        className: 'other circle-link',
        title: $l('tooltips.settings'),
        href: "#",
        onClick: this.handleClick.bind(null, '/settings')
      }, d.Glyph({
        glyph: 'wrench'
      })), d.a({
        className: 'other circle-link',
        title: $l('tooltips.signout'),
        href: "#",
        onClick: this.handleSignout
      }, d.Glyph({
        glyph: 'sign-out'
      }))))));
    }
  });

  Home = createFactory({
    getIntlMessage: function(key) {
      return key;
    },
    render: function() {
      return d.div.apply(d, [{
        className: 'home'
      }].concat(slice.call([d.h1({}, "Welcome [" + this.props.accountGuid + "] to " + (this.getIntlMessage('common.siteTitle')) + "! Looking at " + this.props.path)])));
    }
  });

  routes = {
    '^\/$': {
      component: Home
    },
    '^\/upload_photo$': {
      component: require('./photos'),
      props: {
        continueTo: '/'
      },
      showBackButton: true
    },
    '^\/photos$': {
      component: require('./photos'),
      dataPath: 'photos',
      showBackButton: true
    },
    '^\/browse$': {
      component: require('./browse'),
      dataPath: 'browse',
      store: stores.BrowseStore
    },
    '^\/profile\/.*$': {
      component: Profile,
      dataPath: 'profile',
      showBackButton: true
    },
    '^\/myprofile$': {
      component: Profile,
      dataPath: 'profile',
      props: {
        editable: true
      }
    },
    '^\/inbox$': {
      component: require('./messaging').Inbox,
      dataPath: 'inbox'
    },
    '^\/conversation\/.*$': {
      component: require('./messaging').Conversation,
      dataPath: 'conversation',
      showBackButton: true
    },
    '^\/discover$': {
      component: require('./discover').Discover,
      dataPath: 'discover'
    },
    '^\/liked_by$': {
      component: require('./profile_list').LikedBy,
      dataPath: 'likedBy'
    },
    '^\/visitors$': {
      component: require('./profile_list').Visitors,
      dataPath: 'likedBy'
    },
    '^\/upgrade$': {
      component: require('./upgrade').Upgrade,
      dataPath: 'upgrade',
      showBackButton: true
    },
    '^\/upgrade\/.*$': {
      component: require('./upgrade').PaymentMethod,
      dataPath: 'upgrade',
      showBackButton: true
    },
    '^\/settings$': {
      component: require('./settings').Settings
    },
    '^\/settings/change_password$': {
      component: require('./settings').ChangePassword,
      showBackButton: true
    },
    '^\/settings/email_preferences$': {
      component: require('./settings').EmailPreferences,
      dataPath: 'emailPreferences',
      showBackButton: true
    },
    '^\/settings/remove_profile$': {
      component: require('./settings').RemoveProfile,
      dataPath: 'removeProfile',
      showBackButton: true
    },
    '^\/settings/manage_subscription$': {
      component: require('./settings').ManageSubscription,
      dataPath: 'subscription',
      showBackButton: true
    }
  };

  parseRoute = function(path) {
    var params, parsed;
    parsed = path.match(/([^?]*)($|\?(.*)$)/);
    params = parsed != null ? parsed[3] : void 0;
    if (params != null) {
      params = _.object(_.map(params.split("&"), function(kv) {
        var pairs;
        pairs = kv.split("=");
        if (pairs[1] != null) {
          pairs[1] = decodeURIComponent(pairs[1]);
        }
        return pairs;
      }));
    }
    return {
      route: parsed != null ? parsed[1] : void 0,
      qs: parsed != null ? parsed[2] : void 0,
      params: params
    };
  };

  findRoute = function(path) {
    var def, r, route;
    route = parseRoute(path).route;
    for (r in routes) {
      if (!hasProp.call(routes, r)) continue;
      def = routes[r];
      if (route.match(RegExp(r)) != null) {
        return def;
      }
    }
  };

  module.exports = createFactory({
    getDefaultProps: function() {
      return {
        notificationStore: new stores.NotificationStore()
      };
    },
    getInitialState: function() {
      return _.omit(this.props, 'messages', 'notificationStore');
    },
    componentWillMount: function() {
      $l.setMessages(this.props.messages);
      this.props.notificationStore.init(this.props.counters);
      return d.setCookies(this.props.cookies);
    },
    componentDidMount: function() {
      this.pushStateEnabled = (typeof history !== "undefined" && history !== null ? history.pushState : void 0) != null;
      React.initializeTouchEvents(true);
      this.historyCounter = 0;
      this.errorCounter = 0;
      window.onerror = (function(_this) {
        return function(errorMessage, url, lineNumber, columnNumber, errObject) {
          var info;
          if (_this.errorCounter++ > 5) {
            return;
          }
          info = {
            message: errorMessage,
            stackTrace: errObject != null ? errObject.stack : void 0
          };
          return _this.ajax("/javascript_error", "POST", info);
        };
      })(this);
      window.gaReady = (function(_this) {
        return function() {
          return _this.trackPageview(window.location.pathname || window.location.toString());
        };
      })(this);
      if (this.pushStateEnabled) {
        History.mount(window);
        return History.on('popState', (function(_this) {
          return function(state, title, url) {
            _this.historyCounter--;
            state = _.merge(state, {
              backNavigation: true
            });
            return _this.setState(state);
          };
        })(this));
      }
    },
    ajax: function(url, type, data, callbacks) {
      var headers;
      if (_.isFunction(callbacks)) {
        callbacks = {
          success: callbacks,
          error: (function(_this) {
            return function(xhr, status, err) {
              return _this.setState({
                successMessage: void 0,
                errorMessage: xhr.responseText || "Unable to process request, please try again later!"
              });
            };
          })(this)
        };
      }
      headers = {
        'local-cookies': JSON.stringify(this.props.cookies)
      };
      if (type === 'GET') {
        if (url.indexOf("?") >= 0) {
          url += "&" + (Math.random());
        } else {
          url += "?" + (Math.random());
        }
      }
      return $.ajax({
        url: url,
        type: type,
        accepts: 'application/json',
        dataType: 'json',
        data: data,
        headers: headers,
        success: (function(_this) {
          return function() {
            var args, newUrl, ref1, ref2, ref3, ref4;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            if (((ref1 = args[2]) != null ? ref1.getAllResponseHeaders : void 0) != null) {
              newUrl = (ref2 = args[2]) != null ? ref2.getResponseHeader('change-location') : void 0;
              if ((newUrl != null ? newUrl.length : void 0) > 0) {
                window.location = newUrl;
                return;
              }
            }
            if (((ref3 = args[0]) != null ? ref3._redirectTo : void 0) != null) {
              return _this.handleChangePath((ref4 = args[0]) != null ? ref4._redirectTo : void 0);
            } else {
              if ((callbacks != null ? callbacks.success : void 0) != null) {
                return callbacks.success.apply(callbacks, args);
              }
            }
          };
        })(this),
        error: function() {
          var args, err, res;
          res = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          err = res.responseJSON;
          err = (err != null ? err.errors : void 0) || err;
          if ((err != null) && _.isArray(err) && err.length === 0) {
            err = null;
          }
          if ((callbacks != null ? callbacks.error : void 0) != null) {
            return callbacks.error.apply(callbacks, [res].concat(slice.call(args), [err]));
          }
        }
      });
    },
    trackPageview: function(pageUrl) {
      if (pageUrl == null) {
        pageUrl = "";
      }
      pageUrl = pageUrl.replace(/\?.*/, '');
      pageUrl = pageUrl.replace(/\/profile\/.*/, '/profile');
      pageUrl = pageUrl.replace(/\/conversation\/.*/, '/conversation');
      if (window.ga != null) {
        window.ga('set', 'page', pageUrl);
        return window.ga('send', 'pageview');
      }
    },
    handleChangePath: function(newPath, force) {
      var newUrl, route;
      route = findRoute(newPath);
      newUrl = "/app" + newPath;
      if (!this.pushStateEnabled) {
        return window.location = newUrl;
      }
      History.replaceState(this.state, "", window.location);
      return this.ajax(newUrl, "GET", null, (function(_this) {
        return function(newState) {
          if (_this.props.version !== newState.version) {
            return window.location = newUrl;
          }
          newState.backNavigation = false;
          newState.path = newPath;
          _this.props.notificationStore.updateCounters(newState.counters);
          newState.errorMessage = null;
          History.pushState(newState, "", newUrl);
          _this.historyCounter++;
          _this.trackPageview(newUrl);
          _this.forceUpdate = true;
          return _this.setState(newState);
        };
      })(this));
    },
    handleBack: function() {
      return History.back();
    },
    shouldComponentUpdate: function(nextProps, nextState) {
      return this.state.path !== nextState.path || this.forceUpdate;
    },
    render: function() {
      var componentProps, dataPath, dataProps, defaultCallbacks, primaryComponent, restClient, restClientFactory, rootRestClient, route, sharedProps;
      this.forceUpdate = false;
      route = parseRoute(this.state.path);
      primaryComponent = findRoute(route.route);
      defaultCallbacks = (function(_this) {
        return function(newState) {
          newState = _.omit(newState, 'path');
          return _this.setState(newState);
        };
      })(this);
      dataPath = primaryComponent.dataPath;
      restClientFactory = (function(_this) {
        return function(path, _defaultCallbacks) {
          return {
            get: function(url, data, callbacks) {
              return _this.ajax("/app" + path + url, "GET", data, callbacks || _defaultCallbacks);
            },
            post: function(url, data, callbacks) {
              return _this.ajax("/app" + path + url, "POST", data, callbacks || _defaultCallbacks);
            },
            put: function(url, data, callbacks) {
              return _this.ajax("/app" + path + url, "PUT", data, callbacks || _defaultCallbacks);
            },
            "delete": function(url, data, callbacks) {
              return _this.ajax("/app" + path + url, "DELETE", data, callbacks || _defaultCallbacks);
            }
          };
        };
      })(this);
      restClient = restClientFactory(route.route, defaultCallbacks);
      rootRestClient = restClientFactory("");
      console.log(this.historyCounter);
      sharedProps = {
        backNavigation: this.state.backNavigation || false,
        accountGuid: this.props.accountGuid,
        onChangePath: this.handleChangePath,
        path: this.state.path,
        route: route,
        restClient: restClient,
        rootRestClient: rootRestClient,
        myProfileSummary: this.props.myProfileSummary,
        notificationStore: this.props.notificationStore,
        features: this.state.features || this.props.features,
        showBackButton: this.historyCounter > 0 && primaryComponent.showBackButton,
        onBack: this.handleBack,
        onUpdateFeatures: (function(_this) {
          return function(features) {
            return _this.setState({
              features: features
            });
          };
        })(this),
        onCustomerSupport: (function(_this) {
          return function() {
            return _this.refs.header.handleHelp();
          };
        })(this),
        signOut: (function(_this) {
          return function() {
            $("<form id='sign-out' method='post' action='/signout' style='display:none'></form>").appendTo('body');
            return $('#sign-out').submit();
          };
        })(this)
      };
      dataProps = _.cloneDeep(this.state[primaryComponent.dataPath] || {});
      componentProps = _.merge({
        ref: 'primaryComponent'
      }, sharedProps, restClient, primaryComponent.props || {}, dataProps || {});
      return d.div({
        className: 'app-body curvesconnect'
      }, d.div({
        className: 'background'
      }, d.div({
        className: 'outer'
      }, d.div({
        className: 'inner'
      }))), d.div({
        className: 'outer'
      }, d.div({
        className: 'inner'
      }, this.state.errorMessage != null ? d.div({
        style: {
          color: 'red'
        }
      }, this.state.errorMessage) : void 0, this.state.successMessage != null ? d.div({
        style: {
          color: 'green'
        }
      }, this.state.errorMessage) : void 0, Header(_.merge({
        ref: 'header',
        myProfileSummary: this.props.myProfileSummary
      }, sharedProps)), primaryComponent.component(componentProps))));
    }
  });

}).call(this);



},{"./browse":3,"./canvas":4,"./common":5,"./discover":6,"./history":7,"./locale":8,"./messaging":9,"./photos":10,"./profile":11,"./profile_list":12,"./settings":13,"./stores":14,"./support":15,"./upgrade":16,"events":undefined,"lodash":undefined,"react":undefined}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var $l, BrowseFilter, ProfileSearchResults, React, _, createFactory, d, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  $l = require('./locale');

  BrowseFilter = createFactory({
    handleFilterChange: function(e) {
      return this.props.handleFilterChange(e.target.name, e.target.value);
    },
    render: function() {
      var ages, distance, genders, i, ref, ref1, ref2, ref3, ref4, results;
      genders = [
        {
          value: 'M',
          label: 'Men'
        }, {
          value: 'F',
          label: 'Women'
        }
      ];
      ages = _.map((function() {
        results = [];
        for (i = 18; i <= 99; i++){ results.push(i); }
        return results;
      }).apply(this), function(age) {
        return {
          value: age.toString(),
          label: age
        };
      });
      distance = _.map([100, 200, 300, 500, 2000], function(d) {
        return {
          value: d.toString(),
          label: d + " mi"
        };
      });
      return d.div.apply(d, [{
        className: 'filters'
      }].concat(slice.call([
        d.SelectField({
          label: 'Show me',
          options: genders,
          name: 'gender',
          defaultValue: (ref = this.props.filter) != null ? ref.gender : void 0,
          onChange: this.handleFilterChange
        }), d.SelectField({
          label: 'Looking for',
          options: genders,
          name: 'lookingFor[gender]',
          defaultValue: (ref1 = this.props.filter) != null ? (ref2 = ref1.lookingFor) != null ? ref2.gender : void 0 : void 0,
          onChange: this.handleFilterChange
        }), d.SelectField({
          label: 'Between',
          options: ages,
          name: 'minAge',
          defaultValue: (ref3 = this.props.filter) != null ? ref3.minAge : void 0,
          onChange: this.handleFilterChange
        }), d.SelectField({
          label: 'and',
          options: ages,
          name: 'maxAge',
          defaultValue: (ref4 = this.props.filter) != null ? ref4.maxAge : void 0,
          onChange: this.handleFilterChange
        })
      ])));
    }
  });

  ProfileSearchResults = createFactory({
    renderItem: function(itemIndex, scrollTop, itemSize, canvas) {
      var ageAndLocation, dims, ff, profile, ref, ref1, ref2, ref3, style, url;
      profile = this.props.store.getProfile(itemIndex);
      ff = canvas.FontFace('Open Sans, Helvetica, sans-serif', null, {
        weight: 700
      });
      dims = canvas.measureText("Loading...", itemSize, ff, 16, 30);
      style = {
        top: itemSize / 2 - dims.height / 2,
        left: itemSize / 2 - dims.width / 2,
        fontFace: ff,
        fontSize: 16,
        width: dims.width,
        height: dims.height,
        lineHeight: dims.height,
        color: 'grey',
        backgroundColor: 'white'
      };
      if (profile != null) {
        ageAndLocation = "" + profile.age;
        if ((profile != null ? (ref = profile.profileLocation) != null ? ref.city : void 0 : void 0) != null) {
          ageAndLocation = ageAndLocation + " from " + profile.profileLocation.city + ", " + profile.profileLocation.stateCode;
        }
        url = "" + ((ref1 = profile.primaryPhoto) != null ? ref1.cdnBaseUrl : void 0) + ((ref2 = profile.primaryPhoto) != null ? (ref3 = ref2.urls) != null ? ref3['300x300'] : void 0 : void 0);
        return canvas.Group({
          style: {
            left: 0,
            top: 0,
            width: itemSize,
            height: itemSize,
            backgroundColor: 'white'
          }
        }, canvas.Text({
          style: style
        }, "Loading..."), canvas.Image({
          style: {
            top: 0,
            left: 0,
            width: itemSize - 1,
            height: itemSize - 1,
            borderWidth: 0,
            borderColor: 'white'
          },
          src: url
        }), canvas.Group({
          style: {
            left: 0,
            top: 0,
            width: itemSize - 2,
            height: 30,
            backgroundColor: 'rgba(100,100,100,.8)'
          }
        }, canvas.Text({
          style: {
            top: 5,
            left: 5,
            width: itemSize - 11,
            height: 20,
            lineHeight: 20,
            fontSize: 18,
            fontFace: ff,
            color: 'white'
          }
        }, "" + ageAndLocation)));
      } else if (this.props.store.isLoading() === true) {
        return canvas.Group({
          style: {
            left: 0,
            top: 0,
            width: itemSize,
            height: itemSize,
            backgroundColor: 'white'
          }
        }, canvas.Text({
          style: style
        }, "Loading..."));
      }
    },
    handleClick: function(itemIndex, e) {
      var profile;
      profile = this.props.store.getProfile(itemIndex);
      if (profile != null) {
        if (e.itemX > e.itemWidth - 30 && e.itemY < 30) {
          return this.handleFlag(itemIndex, e);
        } else {
          if (this.props.onClick != null) {
            return this.props.onClick(profile);
          }
        }
      }
    },
    handleFlag: function(itemIndex, e) {
      return console.log("FLAG", itemIndex);
    },
    render: function() {
      if (this.props.store.getLoadedCount() === 0) {
        if (this.props.store.isLoading()) {
          return d.div({
            className: 'info-message'
          }, "Loading...");
        } else {
          return d.div({
            className: 'info-message'
          }, $l('notEnoughUsers'));
        }
      }
      return d.CanvasGridView({
        ref: 'listView',
        style: {
          top: '120px'
        },
        numberOfItems: this.props.store.getLoadedCount() || 0,
        itemSize: 300,
        itemMinSize: 200,
        renderItem: this.renderItem,
        onClick: this.handleClick,
        scrollTop: this.props.store.getScrollTop(),
        onScroll: this.props.store.setScrollTop.bind(this.props.store)
      });
    }
  });

  module.exports = createFactory({
    propTypes: {
      defaultFilter: React.PropTypes.object.isRequired
    },
    getDefaultProps: function() {
      return {
        store: new stores.BrowseStore()
      };
    },
    handleClick: function(profile) {
      return this.props.onChangePath("/profile/" + profile.guid);
    },
    handleChange: function() {
      return this.forceUpdate();
    },
    componentWillMount: function() {
      this.props.store.preload(this.props.items, this.props.totalFound);
      return this.props.store.init(this.props.defaultFilter);
    },
    componentDidMount: function() {
      this.props.store.on('change', this.handleChange);
      return this.props.store.setRestClient(this.props.restClient);
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    handleSearch: function() {
      return this.props.store.search();
    },
    render: function() {
      return d.div({
        className: 'browse'
      }, BrowseFilter({
        filter: this.props.store.getFilter(),
        handleFilterChange: this.props.store.handleFilterChange.bind(this.props.store)
      }), ProfileSearchResults({
        ref: 'results',
        store: this.props.store,
        onClick: this.handleClick
      }));
    }
  });

}).call(this);



},{"./canvas":4,"./common":5,"./locale":8,"./stores":14,"lodash":undefined,"react":undefined}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var React, ReactCanvas, _, canvasFactories, common, dom,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  ReactCanvas = null;

  dom = React.DOM;

  common = require('./common');

  canvasFactories = {
    renderText: function(text, fontSize, width, height, style) {
      var dims, ff;
      ff = this.FontFace('Avenir Next Condensed, Helvetica, sans-serif', null, {
        weight: (style != null ? style.fontWeight : void 0) || 400
      });
      dims = this.measureText(text, width, ff, fontSize, height);
      style = _.merge({}, {
        top: 0,
        left: style.textAlign === 'center' ? width / 2 - dims.width / 2 : 0,
        fontFace: ff,
        fontSize: fontSize,
        width: dims.width,
        height: dims.height,
        lineHeight: dims.height
      }, style);
      return this.Text({
        style: style
      }, dims.lines[0].text);
    }
  };

  exports.isWithin = function(x, y, dims) {
    return dims.left < x && (dims.left + dims.width) > x && dims.top < y && (dims.height + dims.top) > y;
  };

  exports.CanvasIcon = common.createFactory({
    componentWillMount: function() {
      this.iconsFontFace = ReactCanvas.FontFace('FontAwesome', null, {
        weight: 'normal'
      });
      return this.dims = ReactCanvas.measureText(this.props.children, 10000, this.iconsFontFace, this.props.style.fontSize, this.props.style.height || this.props.style.fontSize);
    },
    render: function() {
      var style;
      style = _.merge({
        fontFace: this.iconsFontFace,
        left: this.props.style.right != null ? this.props.style.right - this.dims.width : void 0,
        top: this.props.style.bottom != null ? this.props.style.bottom - this.dims.height : void 0,
        height: this.dims.height,
        width: this.dims.width,
        lineHeight: this.dims.height,
        textAlign: 'center'
      }, this.props.style);
      return canvasFactories.Text({
        style: style
      }, this.props.children);
    }
  });

  exports.CanvasListView = common.createFactory({
    componentDidMount: function() {
      var component, def, notElements;
      if (ReactCanvas == null) {
        ReactCanvas = require('react-canvas');
        notElements = ['measureText', 'FontFace'];
        for (component in ReactCanvas) {
          if (!hasProp.call(ReactCanvas, component)) continue;
          def = ReactCanvas[component];
          if (indexOf.call(notElements, component) >= 0) {
            canvasFactories[component] = def;
          } else {
            canvasFactories[component] = React.createFactory(def);
          }
        }
      }
      $('html').addClass('no-scroll');
      this.setState({
        size: this.getContainerBoundingRect()
      });
      this.forceUpdate();
      $(window).on('keydown', this.handleKeyPress);
      $(window).on('resize', this.handleWindowResize);
      return $(window).on('wheel', this.handleWheel);
    },
    componentWillUnmount: function() {
      $(window).off('keydown', this.handleKeyPress);
      $(window).off('resize', this.handleWindowResize);
      $(window).off('wheel', this.handleWheel);
      return $('html').removeClass('no-scroll');
    },
    handleKeyPress: function(e) {
      var pageSize, scrollBy, scrollByMap, smallScroll, totalSize;
      if (this.refs.listView == null) {
        return;
      }
      pageSize = this.refs.listView.scroller.__clientHeight;
      totalSize = this.refs.listView.scroller.getScrollMax().top;
      smallScroll = Math.max(150, this.calculateItemHeight() / 2);
      scrollByMap = {
        40: smallScroll,
        38: -smallScroll,
        34: pageSize,
        33: -pageSize,
        35: totalSize,
        36: -totalSize
      };
      scrollBy = scrollByMap[e.keyCode];
      if (scrollBy == null) {
        return;
      }
      return this.scrollBy(scrollBy);
    },
    handleWindowResize: function() {
      this.updateScrollingDimensions();
      this.setState({
        size: this.getContainerBoundingRect()
      });
      if (this.props.onResize != null) {
        this.props.onResize();
      }
      return this.forceUpdate();
    },
    handleWheel: function(e) {
      var deltaY, ref, smallScroll;
      deltaY = ((ref = e.originalEvent) != null ? ref.deltaY : void 0) || e.deltaY;
      smallScroll = Math.max(150, this.calculateItemHeight() / 2);
      if (deltaY < 0) {
        smallScroll *= -1;
      }
      return this.scrollBy(smallScroll);
    },
    scrollBy: function(scrollBy) {
      var ref, scrollMax, scrollTop;
      if (this.refs.listView == null) {
        return;
      }
      scrollMax = this.refs.listView.scroller.getScrollMax().top;
      scrollTop = ((ref = this.refs.listView.state) != null ? ref.scrollTop : void 0) || 0;
      scrollTop += scrollBy;
      if (scrollTop < 0) {
        scrollTop = 0;
      }
      if (scrollTop > scrollMax) {
        scrollTop = scrollMax;
      }
      return this.refs.listView.scrollTo(0, scrollTop, false);
    },
    handleClick: function(e) {
      var actualY, itemHeight, size;
      size = this.getContainerBoundingRect();
      itemHeight = this.calculateItemHeight();
      actualY = e.clientY + this.refs.listView.state.scrollTop - size.top;
      e.itemIndex = Math.ceil(actualY / itemHeight) - 1;
      e.itemX = e.clientX - size.left;
      e.itemY = actualY - (itemHeight * e.itemIndex);
      e.containerSize = size;
      e.itemHeight = itemHeight;
      if (this.props.onClick != null) {
        return this.props.onClick(e);
      }
    },
    updateScrollingDimensions: function() {
      if (this.refs.listView != null) {
        this.refs.listView.updateScrollingDimensions();
        return this.__cachedItemHeight = null;
      }
    },
    resetScroll: function() {
      if (this.refs.listView != null) {
        return this.refs.listView.scrollTo(0, 0, false);
      }
    },
    componentWillReceiveProps: function(nextProps) {
      return this.updateScrollingDimensions();
    },
    render: function() {
      var emptyContainer, ref, size, style;
      style = {
        position: 'absolute',
        bottom: '0px',
        top: '0px',
        width: '100%',
        overflow: 'hidden',
        cursor: 'pointer'
      };
      emptyContainer = dom.div({
        ref: 'container',
        className: this.props.className,
        style: _.merge(style, this.props.style)
      });
      if (ReactCanvas == null) {
        return emptyContainer;
      }
      if (((ref = this.state) != null ? ref.size : void 0) == null) {
        return emptyContainer;
      }
      size = this.state.size;
      return dom.div({
        id: this.props.id,
        ref: 'container',
        className: this.props.className,
        style: _.merge(style, this.props.style),
        onClick: this.handleClick
      }, canvasFactories.Surface({
        top: 0,
        left: 0,
        width: size.width,
        height: size.height
      }, canvasFactories.ListView({
        ref: 'listView',
        style: {
          top: 0,
          left: 0,
          width: size.width,
          height: size.height
        },
        numberOfItemsGetter: this.calculateNumberOfItems,
        itemHeightGetter: this.calculateItemHeight,
        itemGetter: this.renderItem,
        onScroll: this.props.onScroll,
        scrollTop: this.props.scrollTop
      })));
    },
    getContainerBoundingRect: function() {
      return this.refs.container.getDOMNode().getBoundingClientRect();
    },
    renderItem: function(itemIndex, scrollTop) {
      var size;
      size = this.state.size;
      return this.props.itemGetter(itemIndex, scrollTop, size, canvasFactories);
    },
    calculateItemHeight: function() {
      var size;
      if (this.__cachedItemHeight != null) {
        return this.__cachedItemHeight;
      }
      size = this.state.size;
      return this.__cachedItemHeight = this.props.itemHeightGetter(size);
    },
    calculateNumberOfItems: function() {
      var size;
      size = this.state.size;
      return this.props.numberOfItemsGetter(size);
    }
  });

  exports.CanvasGridView = common.createFactory({
    propTypes: {
      numberOfItems: React.PropTypes.number.isRequired,
      itemSize: React.PropTypes.number.isRequired
    },
    renderLine: function(lineIndex, scrollTop, containerSize, canvas) {
      var i, itemSize, itemsPerLine, line, ref, ref1, results;
      itemSize = this.calculateItemSize(containerSize);
      itemsPerLine = containerSize.width / itemSize;
      line = (function() {
        results = [];
        for (var i = ref = lineIndex * itemsPerLine, ref1 = (lineIndex + 1) * itemsPerLine; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this);
      return canvas.Group.apply(canvas, [{
        style: {
          top: 0,
          left: 0,
          width: itemSize * itemsPerLine,
          height: itemSize
        }
      }].concat(slice.call(_.flatten(_.map(line, (function(_this) {
        return function(itemIndex, index) {
          var item;
          item = _this.props.renderItem(itemIndex, scrollTop, itemSize, canvas);
          return canvas.Group({
            style: {
              left: 0,
              top: 0,
              width: itemSize,
              height: itemSize,
              translateX: index * itemSize
            }
          }, item);
        };
      })(this))))));
    },
    handleClick: function(e) {
      var column, item, itemSize, itemsPerLine;
      e.preventDefault();
      itemSize = this.calculateItemSize(e.containerSize);
      column = Math.ceil(e.itemX / itemSize) - 1;
      itemsPerLine = e.containerSize.width / itemSize;
      item = itemsPerLine * e.itemIndex + column;
      e.itemX = e.itemX % itemSize;
      e.itemWidth = e.itemHeight;
      if (this.props.onClick != null) {
        return this.props.onClick(item, e);
      }
    },
    componentWillUpdate: function() {
      this.refs.listView.updateScrollingDimensions();
      return this._itemSizeCache = null;
    },
    handleResize: function() {
      this._itemSizeCache = null;
      return this.forceUpdate();
    },
    calculateItemSize: function(containerSize) {
      var itemMinSize, itemsPerLine;
      if (this._itemSizeCache != null) {
        return this._itemSizeCache;
      }
      itemMinSize = this.props.itemMinSize || this.props.itemSize;
      return this._itemSizeCache = containerSize.width > this.props.itemSize ? (itemsPerLine = Math.round(containerSize.width / this.props.itemSize), containerSize.width / itemsPerLine) : containerSize.width <= itemMinSize ? containerSize.width : (itemsPerLine = Math.round(containerSize.width / itemMinSize), containerSize.width / itemsPerLine);
    },
    calculateNumberOfLines: function(containerSize) {
      var itemsPerLine, lines;
      itemsPerLine = containerSize.width / this.calculateItemSize(containerSize);
      lines = Math.ceil(this.props.numberOfItems / itemsPerLine);
      return lines;
    },
    getScrollTop: function() {
      return this.refs.listView.getScrollTop();
    },
    resetScroll: function() {
      return this.refs.listView.resetScroll();
    },
    render: function() {
      return exports.CanvasListView({
        ref: 'listView',
        numberOfItemsGetter: this.calculateNumberOfLines,
        itemHeightGetter: this.calculateItemSize,
        itemGetter: this.renderLine,
        onClick: this.handleClick,
        onResize: this.handleResize,
        scrollTop: this.props.scrollTop,
        style: this.props.style,
        onScroll: this.props.onScroll
      });
    }
  });

}).call(this);



},{"./common":5,"lodash":undefined,"react":undefined,"react-canvas":undefined}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var C, D, React, _, createFactory, defaults, localCookies,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  React = require('react');

  D = React.DOM;

  _ = require('lodash');

  defaults = {};

  createFactory = function(def) {
    return React.createFactory(React.createClass(_.defaults({}, def, defaults)));
  };

  localCookies = void 0;

  module.exports = C = {
    createFactory: createFactory,
    setCookies: function(cookies) {
      return localCookies = cookies;
    },
    getCookies: function() {
      return _.clone(localCookies);
    },
    formToObj: function(form) {
      return Object.keys(form).reduce((function(output, key) {
        var currentPath, parentKey, pathKey, paths;
        parentKey = key.match(/[^\[]*/i);
        paths = key.match(/\[.*?\]/g) || [];
        paths = [parentKey[0]].concat(paths).map(function(key) {
          return key.replace(/\[|\]/g, '');
        });
        currentPath = output;
        while (paths.length) {
          pathKey = paths.shift();
          if ((indexOf.call(currentPath, pathKey) >= 0)) {
            currentPath = currentPath[pathKey];
          } else {
            currentPath[pathKey] = paths.length ? isNaN(paths[0]) ? {} : [] : form[key];
            currentPath = currentPath[pathKey];
          }
        }
        return output;
      }), {});
    },
    Button: createFactory({
      getInitialState: function() {
        return {
          disabled: this.props.disabled
        };
      },
      disable: function() {
        return this.setState({
          disabled: true
        });
      },
      enable: function() {
        return this.setState({
          disabled: false
        });
      },
      handleClick: function(e) {
        if (this.props.onClick != null) {
          e.preventDefault();
          if (!this.state.disabled) {
            return this.props.onClick(e);
          }
        }
      },
      render: function() {
        return D.div({
          ref: 'container',
          className: "button " + this.props.className + " " + (this.state.disabled ? 'disabled' : '')
        }, D.a({
          href: this.props.href || "#",
          onClick: this.handleClick
        }, this.props.children));
      }
    }),
    DescriptionList: createFactory({
      render: function() {
        return D.dl({
          className: this.props.className
        }, D.dt({}, this.props.label), D.dd({}, this.props.children || this.props.value));
      }
    }),
    Bullet: createFactory({
      render: function() {
        return D.span({
          className: 'bullet'
        }, "•");
      }
    }),
    BulletList: createFactory({
      render: function() {
        return D.ul.apply(D, [{
          className: this.props.className
        }].concat(slice.call(_.map(this.props.children, function(child) {
          return D.li({}, child);
        }))));
      }
    }),
    Glyph: createFactory({
      render: function() {
        return D.i({
          className: "fa fa-" + this.props.glyph + " fa-fw"
        });
      }
    }),
    FileUploader: createFactory({
      propTypes: {
        name: React.PropTypes.string.isRequired,
        accept: React.PropTypes.string,
        capture: React.PropTypes.bool
      },
      pickFile: function() {
        return $(this.refs.chooseFile.getDOMNode()).click();
      },
      handleUploadFile: function(e) {
        var file, ie, ref, ref1, xhr;
        e.preventDefault();
        if (navigator.userAgent.indexOf('MSIE') >= 0 || navigator.appVersion.indexOf('Trident/') > 0) {
          ie = true;
          xhr = new ActiveXObject("Msxml2.XMLHTTP");
        } else {
          ie = false;
          xhr = new XMLHttpRequest();
        }
        file = (ref = e.target) != null ? (ref1 = ref.files) != null ? ref1[0] : void 0 : void 0;
        if (!(xhr.upload && (file != null))) {
          return $(this.refs.uploadForm.getDOMNode()).submit();
        }
        xhr.upload.addEventListener("progress", ((function(_this) {
          return function(e) {
            var pc;
            pc = parseInt(e.loaded / e.total * 100);
            if (_this.props.onProgress != null) {
              return _this.props.onProgress(pc);
            }
          };
        })(this)), false);
        xhr.onreadystatechange = (function(_this) {
          return function(e) {
            var err, ref2, result, success;
            if (xhr.readyState === 4) {
              success = xhr.status === 200;
              try {
                result = JSON.parse(e.target.response);
              } catch (_error) {
                err = _error;
                success = false;
                result = (ref2 = e.target) != null ? ref2.response : void 0;
              }
              if (_this.props.onComplete != null) {
                return _this.props.onComplete(success, result);
              }
            }
          };
        })(this);
        xhr.open("POST", this.props.url || document.location, true);
        if (ie) {
          xhr.setRequestHeader("Content-Type", "multipart/form-data");
          xhr.setRequestHeader("X-File-Name", file.name);
          xhr.setRequestHeader("X-File-Size", file.size);
          xhr.setRequestHeader("X-File-Type", file.type);
        }
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.setRequestHeader('Content-Type', file.type || "image/binary");
        if (this.props.fileNameHeader != null) {
          xhr.setRequestHeader(this.props.fileNameHeader, file.name);
        }
        xhr.setRequestHeader("local-cookies", JSON.stringify(localCookies));
        return xhr.send(file);
      },
      render: function() {
        return D.form.apply(D, [{
          url: this.props.url,
          method: 'post',
          encType: "multipart/form-data",
          ref: 'uploadForm',
          style: {
            display: 'none'
          }
        }].concat(slice.call(_.map(this.props.parameters || {}, (function(_this) {
          return function(v, k) {
            return D.input({
              type: 'hidden',
              name: k,
              value: v
            });
          };
        })(this))), [D.input(_.merge({
          ref: 'chooseFile',
          type: 'file',
          onChange: this.handleUploadFile
        }, this.props))]));
      }
    }),
    AutoGrowTextArea: createFactory({
      value: function() {
        return $(this.refs.textarea.getDOMNode()).val();
      },
      componentDidMount: function() {
        return $(this.refs.textarea.getDOMNode()).autogrow({
          vertical: true,
          horizontal: false,
          flickering: false
        });
      },
      render: function() {
        return D.textarea(_.merge({
          ref: 'textarea'
        }, _.omit(this.props, 'children')), this.props.children);
      }
    }),
    DropDown: createFactory({
      render: function() {
        var items;
        if (_.isArray(this.props.children)) {
          items = this.props.children;
        } else {
          items = _.map(this.props.children, function(label, value) {
            return {
              label: label,
              value: value
            };
          });
        }
        return D.select.apply(D, [this.props].concat(slice.call(_.map(items, (function(_this) {
          return function(option) {
            return D.option({
              value: option.value
            }, option.label);
          };
        })(this)))));
      }
    }),
    LabeledField: createFactory({
      render: function() {
        return D.div.apply(D, [{
          className: "field" + (this.props.type != null ? ' field-' + this.props.type : '') + " field-" + this.props.name
        }].concat(slice.call([
          D.label({
            htmlFor: "field-" + this.props.name
          }, this.props.label || this.props.placeholder), this.props.errorMessage != null ? D.div({
            className: "field-error-message"
          }, this.props.errorMessage) : void 0, this.props.children
        ])));
      }
    }),
    InputField: createFactory({
      render: function() {
        return C.LabeledField(this.props, D.input({
          id: "field-" + this.props.name,
          name: this.props.name,
          type: this.props.type,
          placeholder: this.props.placeholder || this.props.label,
          value: this.props.value,
          defaultValue: this.props.defaultValue,
          checked: this.props.checked,
          onChange: this.props.onChange,
          maxLength: this.props.maxLength,
          max: this.props.max,
          min: this.props.min
        }));
      }
    }),
    SelectField: createFactory({
      render: function() {
        return C.LabeledField(this.props, D.select.apply(D, [{
          name: this.props.name,
          placeholder: this.props.placeholder || this.props.label,
          value: this.props.defaultValue,
          onChange: this.props.onChange
        }].concat(slice.call(_.map(this.props.options, (function(_this) {
          return function(option) {
            return D.option({
              value: option.value
            }, option.label);
          };
        })(this))))));
      }
    }),
    FormFieldLabel: createFactory({
      render: function() {
        var ref;
        return D.label.apply(D, [{
          htmlFor: this.props.htmlFor
        }].concat(slice.call([
          D.span({
            className: 'label-text'
          }, this.props.label), ((ref = this.props.validationErrors) != null ? ref[0] : void 0) != null ? D.span({
            className: 'label label-danger'
          }, "" + this.props.validationErrors[0]) : void 0
        ])));
      }
    }),
    FormFieldContainer: createFactory({
      render: function() {
        var ref, validationClass;
        validationClass = ((ref = this.props.validationErrors) != null ? ref[0] : void 0) != null ? 'has-error' : (this.props.value != null) && this.props.value !== "" ? 'has-success' : "";
        return D.div({
          className: "form-group " + validationClass
        }, this.props.children);
      }
    }),
    FormField: createFactory({
      handleChange: function(e) {
        var value;
        value = $(e.target).val();
        return this.props.valueLink.requestChange(value);
      },
      validateValue: function(value) {
        var errors, filter, parseRegexp;
        if (value == null) {
          value = "";
        }
        parseRegexp = function(regex) {
          if (regex.test != null) {
            return regex;
          }
          regex = regex.split(/^\/|\/(?=[a-z]*$)/);
          if (regex[0] === "") {
            regex.shift();
          }
          return (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(RegExp, regex, function(){});
        };
        if (this.props.def.filter != null) {
          filter = parseRegexp(this.props.def.filter);
          value = value.replace(filter, '');
        }
        errors = [];
        _.each(this.props.def.validators || {}, function(regex, message) {
          if (_.isFunction(regex)) {
            return;
          }
          regex = parseRegexp(regex);
          if (regex.test(value) !== true) {
            return errors.push(message);
          }
        });
        if (!(errors.length > 0)) {
          errors = null;
        }
        return errors;
      },
      render: function() {
        var def, validationErrors;
        def = this.props.def;
        defaults = {
          className: "form-control",
          id: "input_" + this.props.name,
          name: this.props.name,
          placeholder: def.placeholder || def.label,
          defaultValue: this.props.value,
          onChange: this.handleChange
        };
        if (def.type === 'image') {
          return D.img({
            className: 'image-field',
            id: defaults.id,
            src: this.props.value
          });
        }
        validationErrors = this.props.validationErrors || this.validateValue(this.props.value);
        return C.FormFieldContainer.apply(C, [{
          value: this.props.value,
          validationErrors: validationErrors
        }].concat(slice.call([
          def.label != null ? C.FormFieldLabel({
            htmlFor: this.props.name,
            label: def.label,
            validationErrors: validationErrors
          }) : void 0, def.type === 'textarea' ? D.textarea(defaults) : D.input(_.merge(defaults, {
            type: def.type
          }))
        ])));
      }
    }),
    SlidingMenu: createFactory({
      show: function() {
        $(this.refs.menu.getDOMNode()).addClass('visible');
        return $(this.refs.menuContainer.getDOMNode()).css({
          left: 0
        });
      },
      hide: function() {
        return $(this.refs.menu.getDOMNode()).removeClass('visible');
      },
      ignore: function(e) {
        e.preventDefault();
        return e.stopPropagation();
      },
      handleTouchMove: function(e) {
        var $menuBody, $menuContainer, deltaX, deltaY, maxScrollTop;
        deltaX = this.startX - e.changedTouches[0].screenX;
        if (deltaX < 0) {
          deltaX = 0;
        }
        deltaY = this.startY - e.changedTouches[0].screenY;
        if ((this.dirLock == null) && (deltaX !== 0 || deltaY !== 0)) {
          if (Math.abs(deltaX) > Math.abs(deltaY)) {
            this.dirLock = 'X';
          } else {
            this.dirLock = 'Y';
          }
        }
        if (this.dirLock === 'X') {
          return $(this.refs.menuContainer.getDOMNode()).css({
            left: -deltaX
          });
        } else if (this.dirLock === 'Y') {
          $menuBody = $(this.refs.menuBody.getDOMNode());
          $menuContainer = $(this.refs.menuContainer.getDOMNode());
          this.scrollTop = this.lastScrollTop + deltaY;
          maxScrollTop = $menuBody.outerHeight() - $menuContainer.innerHeight();
          this.scrollTop = Math.max(this.scrollTop, 0);
          this.scrollTop = Math.min(this.scrollTop, maxScrollTop);
          return $menuBody.css({
            top: -this.scrollTop
          });
        }
      },
      handleTouchStart: function(e) {
        this.dirLock = null;
        this.startX = e.changedTouches[0].screenX;
        this.startY = e.changedTouches[0].screenY;
        return this.lastScrollTop != null ? this.lastScrollTop : this.lastScrollTop = 0;
      },
      handleTouchEnd: function(e) {
        var endX;
        endX = e.changedTouches[0].screenX;
        $(this.refs.menuContainer.getDOMNode()).css({
          left: 0
        });
        if (this.dirLock === 'X' && this.startX - endX > 100) {
          return this.hide();
        } else if (this.dirLock === 'Y') {
          return this.lastScrollTop = this.scrollTop;
        }
      },
      render: function() {
        this.startY = null;
        return D.div({
          ref: 'menu',
          className: 'sliding-menu',
          onClick: this.hide
        }, D.div({
          ref: 'menuContainer',
          className: 'sliding-menu-container',
          onClick: this.ignore,
          onTouchMove: this.handleTouchMove,
          onTouchStart: this.handleTouchStart,
          onTouchEnd: this.handleTouchEnd
        }, D.div({
          ref: 'menuBody',
          className: 'sliding-menu-body'
        }, D.ul.apply(D, [{}].concat(slice.call(_.map(this.props.children || [], function(item) {
          return D.li({}, item);
        })))))));
      }
    }),
    ModalDialog: createFactory({
      show: function(animate, trackHistory) {
        if (trackHistory == null) {
          trackHistory = true;
        }
        if (this.visible) {
          return;
        }
        this.trackHistory = trackHistory;
        if (animate) {
          $(this.refs.dialog.getDOMNode()).addClass('animate');
        }
        $(this.refs.dialog.getDOMNode()).addClass('visible');
        this.visible = true;
        if (((typeof history !== "undefined" && history !== null ? history.pushState : void 0) != null) && this.trackHistory) {
          window.addEventListener('popstate', this.back);
          return history.pushState({}, null);
        }
      },
      back: function() {
        return this.hide(false);
      },
      hide: function(popHistory) {
        if (popHistory == null) {
          popHistory = true;
        }
        this.visible = false;
        $(this.refs.dialog.getDOMNode()).removeClass('visible');
        if (((typeof history !== "undefined" && history !== null ? history.back : void 0) != null) && popHistory && this.trackHistory) {
          history.back();
        }
        if ((typeof history !== "undefined" && history !== null ? history.pushState : void 0) != null) {
          window.removeEventListener('popstate', this.back);
        }
        return setTimeout(((function(_this) {
          return function() {
            if (_this.refs.dialog != null) {
              return $(_this.refs.dialog.getDOMNode()).removeClass('animate');
            }
          };
        })(this)), 500);
      },
      ignore: function(e) {
        e.preventDefault();
        return e.stopPropagation();
      },
      componentWillUnmount: function() {
        return this.hide();
      },
      render: function() {
        return D.div({
          ref: 'dialog',
          className: "modal-dialog " + (this.props.className || "")
        }, D.div({
          className: 'modal-dialog-container'
        }, D.div({
          className: 'modal-dialog-body'
        }, this.props.children)));
      }
    }),
    ProgressBar: createFactory({
      getInitialState: function() {
        return {
          value: 0
        };
      },
      show: function(message, startingValue) {
        this.setState({
          message: message,
          value: startingValue || 0
        });
        return this.refs.dialog.show(false, false);
      },
      setMessage: function(message) {
        return this.setState({
          message: message
        });
      },
      setProgress: function(value) {
        return this.setState({
          value: value
        });
      },
      hide: function() {
        return this.refs.dialog.hide();
      },
      render: function() {
        var value;
        value = Math.min(100, this.state.value);
        return D.ModalDialog({
          ref: 'dialog',
          className: 'progress-bar'
        }, D.div({
          className: 'progress-container'
        }, this.state.message != null ? D.div({
          className: 'message'
        }, this.state.message) : void 0, D.div({
          className: 'value',
          style: {
            right: (100 - value) + "%"
          }
        })));
      }
    }),
    FocusSection: createFactory({
      focus: function(element) {
        this.element = $(element);
        this.container.addClass("visible");
        setTimeout(((function(_this) {
          return function() {
            return _this.container.addClass("do-animate");
          };
        })(this)), 0);
        return this.handleWindowResize();
      },
      unfocus: function() {
        this.container.removeClass("visible");
        this.container.removeClass("do-animate");
        return this.element = null;
      },
      handleWindowResize: function() {
        var width;
        if (this.element == null) {
          return;
        }
        width = $(window).width();
        this.container.css({
          left: -this.container.parent().offset().left,
          width: width
        });
        this.container.find('.left').css({
          width: this.element.offset().left - this.container.offset().left - 2
        });
        this.container.find('.right').css({
          width: width - (this.element.offset().left - this.container.offset().left + this.element.outerWidth()) - 2
        });
        this.container.find('.top').css({
          left: this.element.offset().left - this.container.offset().left - 2,
          width: this.element.outerWidth() + 4,
          height: this.element.offset().top - this.container.offset().top - 2
        });
        return this.container.find('.bottom').css({
          left: this.element.offset().left - this.container.offset().left - 2,
          width: this.element.outerWidth() + 4,
          height: this.container.height() - (this.element.offset().top - this.container.offset().top + this.element.outerHeight()) - 2
        });
      },
      componentDidMount: function() {
        this.container = $(this.refs.container.getDOMNode());
        return $(window).on('resize', this.handleWindowResize);
      },
      componentWillUnmount: function() {
        return $(window).off('resize', this.handleWindowResize);
      },
      render: function() {
        return D.div({
          ref: 'container',
          className: "focus-section" + (this.props.animate ? ' animate' : '') + " " + this.props.className
        }, D.div({
          className: 'inner-focus-section'
        }, D.div({
          className: 'top'
        }), D.div({
          className: 'right'
        }), D.div({
          className: 'left'
        }), D.div({
          className: 'bottom'
        })));
      }
    })
  };

}).call(this);



},{"lodash":undefined,"react":undefined}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var $l, React, _, createFactory, d, moment, stores;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'), require('./profile_list'));

  createFactory = d.createFactory;

  stores = require('./stores');

  $l = require('./locale');

  moment = require('moment');

  exports.Discover = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.DiscoverStore()
      };
    },
    handleChange: function() {
      this.props.notificationStore.updateDiscoverCounter(this.props.store.getTotalFound());
      return this.forceUpdate();
    },
    handleViewProfile: function() {
      return this.props.onChangePath("/profile/" + (this.props.store.getCurrentProfile().guid));
    },
    handleSendMessage: function() {
      return this.props.onChangePath("/conversation/" + (this.props.store.getCurrentProfile().guid));
    },
    componentWillMount: function() {
      return this.props.store.preload(this.props.items, this.props.totalFound);
    },
    componentDidMount: function() {
      this.props.store.on('change', this.handleChange);
      return this.props.store.setRestClient(this.props.restClient);
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    render: function() {
      var profile, ref, ref1, ref2, status;
      profile = this.props.store.getCurrentProfile();
      status = this.props.store.getStatus();
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'discover'
      }, status === 'loading' ? d.div({
        className: 'loading'
      }, d.span({}, $l('loading'))) : status === 'empty' ? d.div({
        className: 'empty'
      }, d.span({}, $l('emptyDiscover'))) : void 0, d.div({
        className: 'photos'
      }, d.div({
        className: 'current'
      }, d.div({
        className: 'photo',
        style: {
          backgroundImage: "url(" + (profile != null ? (ref = profile.primaryPhoto) != null ? ref.cdnBaseUrl : void 0 : void 0) + (profile != null ? (ref1 = profile.primaryPhoto) != null ? (ref2 = ref1.urls) != null ? ref2['300x300'] : void 0 : void 0 : void 0) + ")"
        }
      }, d.div({
        className: 'overlay-container'
      }, d.Button({
        className: "view-profile square",
        onClick: this.handleViewProfile
      }, d.Glyph({
        glyph: 'info'
      })), d.Button({
        className: "send-message square",
        onClick: this.handleSendMessage
      }, d.Glyph({
        glyph: 'comment'
      })))))), d.div({
        className: 'buttons-container'
      }, d.div({
        className: 'buttons'
      }, d.Button({
        className: "hide-profile square",
        onClick: (function(_this) {
          return function() {
            _this.props.store.hide();
          };
        })(this)
      }, d.Glyph({
        glyph: 'remove'
      })), d.Button({
        className: "like-profile square",
        onClick: (function(_this) {
          return function() {
            _this.props.store.like();
          };
        })(this)
      }, d.Glyph({
        glyph: 'star'
      })))))));
    }
  });

}).call(this);



},{"./canvas":4,"./common":5,"./locale":8,"./profile_list":12,"./stores":14,"lodash":undefined,"moment":undefined,"react":undefined}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var EventEmitter, History, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  _ = require('lodash');

  History = (function(superClass) {
    var _history, backOffset, backSupported, currentId, states;

    extend(History, superClass);

    function History() {
      return History.__super__.constructor.apply(this, arguments);
    }

    currentId = 0;

    states = [];

    _history = void 0;

    backSupported = false;

    backOffset = 0;

    History.prototype.mount = function(window) {
      if (window.history == null) {
        return;
      }
      backSupported = !((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)));
      _history = window.history;
      return window.addEventListener('popstate', (function(_this) {
        return function(e) {
          var entry;
          if (e.state != null) {
            currentId = e.state - backOffset;
            entry = states[currentId];
            if (entry == null) {
              return;
            }
            _this.emit('popState', _.cloneDeep(entry.state), entry.title, entry.url);
          }
        };
      })(this));
    };

    History.prototype.replaceState = function(state, title, url) {
      states[currentId] = {
        state: _.cloneDeep(state),
        title: title,
        url: url
      };
      if (_history != null) {
        _history.replaceState(currentId, title, url);
      }
    };

    History.prototype.pushState = function(state, title, url) {
      currentId++;
      backOffset = 0;
      states[currentId] = {
        state: _.cloneDeep(state),
        title: title,
        url: url
      };
      if (_history != null) {
        _history.pushState(currentId, title, url);
      }
    };

    History.prototype.back = function() {
      var entry;
      if ((_history != null) && backSupported) {
        return _history.back();
      } else {
        currentId--;
        if (backOffset === 0) {
          backOffset += 2;
        } else {
          backOffset++;
        }
        entry = states[currentId];
        this.emit('popState', _.cloneDeep(entry.state), entry.title, entry.url);
      }
    };

    return History;

  })(EventEmitter);

  module.exports = new History();

}).call(this);



},{"events":undefined,"lodash":undefined}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var _, _messages;

  _ = require('lodash');

  _messages = null;

  module.exports = function(key, parameters) {
    var message;
    if (_messages == null) {
      throw new Error("Locale has not been initialized yet");
    }
    message = _messages;
    _.map(key.split('.'), function(part) {
      return message = message != null ? message[part] : void 0;
    });
    if (((typeof console !== "undefined" && console !== null ? console.error : void 0) != null) && (message == null)) {
      console.error("Locale: Key [" + key + "] not found");
    }
    return message;
  };

  module.exports.setMessages = function(messages) {
    return _messages = messages;
  };

}).call(this);



},{"lodash":undefined}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var $l, React, _, createFactory, d, moment, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  moment = require('moment');

  $l = require('./locale');

  exports.Inbox = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.InboxStore()
      };
    },
    handleChange: function() {
      return this.forceUpdate();
    },
    componentDidMount: function() {
      this.props.store.on('change', this.handleChange);
      this.props.store.setRestClient(this.props.restClient);
      return this.props.store.init();
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    handleResize: function() {
      return this.forceUpdate();
    },
    handleClick: function(e) {
      var conv;
      conv = this.props.store.getItem(e.itemIndex);
      if (d.isWithin(e.itemX, e.itemY, this.trashIconStyle)) {
        if (confirm($l("deleteMessageConfirmation").replace(/username/, conv.fromProfile.username))) {
          this.props.store["delete"](conv.fromProfileGuid);
        }
        return;
      }
      return this.props.onChangePath("/conversation/" + conv.fromProfileGuid);
      if ((conv != null ? conv.removed : void 0) !== false) {

      }
    },
    renderConversation: function(index, scrollTop, containerSize, canvas) {
      var conv, height, renderConversation, renderRemovedConversation, renderText, width;
      this.props.store.setScrollTop(scrollTop);
      height = 100;
      width = containerSize.width;
      this.trashIconStyle = {
        fontSize: 24,
        left: width - 35,
        top: 38,
        height: 40,
        width: 35
      };
      renderText = function(text, fontSize, width, height, style) {
        var dims, ff;
        ff = canvas.FontFace('Avenir Next Condensed, Helvetica, sans-serif', null, {
          weight: (style != null ? style.fontWeight : void 0) || 400
        });
        dims = canvas.measureText(text, width, ff, 16, height);
        style = _.merge({}, style, {
          top: 0,
          left: 0,
          fontFace: ff,
          fontSize: fontSize,
          width: dims.width,
          height: dims.height,
          lineHeight: dims.height
        });
        return canvas.Text({
          style: style
        }, dims.lines[0].text);
      };
      renderConversation = (function(_this) {
        return function(conv) {
          var profile, ref, ref1, ref2, ref3, ref4, text, upgradeToRead, url;
          if ((conv != null ? conv.fromProfile : void 0) == null) {
            return renderText("Loading...");
          }
          upgradeToRead = ((ref = _this.props.features.billing) != null ? ref.available : void 0) && !((ref1 = _this.props.features.messaging) != null ? ref1.available : void 0);
          profile = conv.fromProfile;
          if (profile.primaryPhoto != null) {
            url = "" + ((ref2 = profile.primaryPhoto) != null ? ref2.cdnBaseUrl : void 0) + ((ref3 = profile.primaryPhoto) != null ? (ref4 = ref3.urls) != null ? ref4['100x100'] : void 0 : void 0);
          } else {
            url = $l("genericPhotos." + profile.gender);
          }
          text = conv.text;
          if (upgradeToRead) {
            text = $l("messaging.upgradeToRead");
          }
          return canvas.Group({
            style: {
              left: 0,
              top: 0,
              width: width,
              height: height - 1,
              backgroundColor: 'white'
            }
          }, canvas.Image({
            style: {
              top: 0,
              left: 0,
              width: 100,
              height: 99
            },
            src: url
          }), renderText(profile.username, 16, 600, 100, {
            translateY: 10,
            translateX: 110,
            color: 'grey',
            fontWeight: 700
          }), renderText(text.replace(/\n/, ''), 16, 600, 100, {
            translateY: 50,
            translateX: 110,
            color: 'grey'
          }), conv.deleted ? canvas.Group({
            style: {
              left: 0,
              top: 0,
              width: width,
              height: height - 1,
              backgroundColor: 'rgba(150,150,150,.7)'
            }
          }) : !upgradeToRead ? d.CanvasIcon({
            style: _this.trashIconStyle
          }, "\uf014") : void 0);
        };
      })(this);
      renderRemovedConversation = (function(_this) {
        return function(conv) {
          var url;
          if ((conv != null ? conv.fromProfile : void 0) == null) {
            return renderText("Loading...");
          }
          url = $l("genericPhotos." + conv.fromProfile.gender);
          return canvas.Group({
            style: {
              left: 0,
              top: 0,
              width: width,
              height: height - 1,
              backgroundColor: 'rgb(200,200,200)'
            }
          }, canvas.Image({
            style: {
              top: 0,
              left: 0,
              width: 100,
              height: 99
            },
            src: url
          }), renderText(conv.fromProfile.username, 16, 600, 100, {
            translateY: 10,
            translateX: 110,
            color: 'grey',
            fontWeight: 700
          }), renderText($l("removedProfile"), 16, 600, 100, {
            translateY: 50,
            translateX: 110,
            color: 'grey'
          }), conv.deleted ? canvas.Group({
            style: {
              left: 0,
              top: 0,
              width: width,
              height: height - 1,
              backgroundColor: 'rgba(150,150,150,.7)'
            }
          }) : d.CanvasIcon({
            style: _this.trashIconStyle
          }, "\uf014"));
        };
      })(this);
      conv = this.props.store.getItem(index);
      return canvas.Group({
        style: {
          left: 0,
          top: 0,
          width: width,
          height: height,
          backgroundColor: 'black'
        }
      }, (conv != null ? conv.removed : void 0) ? renderRemovedConversation(conv) : renderConversation(conv));
    },
    render: function() {
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'messages-container'
      }, this.props.store.getLoadedCount() === 0 ? this.props.store.isLoading() ? d.div({
        className: 'info-message'
      }, "Loading...") : d.div({
        className: 'info-message'
      }, $l('emptyInbox')) : d.CanvasListView({
        ref: 'listView',
        numberOfItemsGetter: (function(_this) {
          return function() {
            return _this.props.store.getLoadedCount();
          };
        })(this),
        itemHeightGetter: (function(_this) {
          return function() {
            return 100;
          };
        })(this),
        itemGetter: this.renderConversation,
        onClick: this.handleClick,
        onResize: this.handleResize,
        scrollTop: this.props.store.getScrollTop(),
        style: {
          top: '0px'
        }
      }))));
    }
  });

  exports.Conversation = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.ConversationStore()
      };
    },
    handleChange: function() {
      return this.forceUpdate();
    },
    handleViewProfile: function(e) {
      e.preventDefault();
      return this.props.onChangePath("/profile/" + this.props.conversation.conversationWithGuid);
    },
    componentWillMount: function() {
      var conv, ref;
      this.props.store.init(this.props.conversation);
      conv = this.props.store.getConversation(this.props.conversation.conversationWithGuid);
      return this.setState({
        loadedMessages: conv != null ? (ref = conv.messages) != null ? ref.length : void 0 : void 0
      });
    },
    componentDidMount: function() {
      this.props.store.on('change', this.handleChange);
      return this.props.store.setRestClient(this.props.restClient);
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    componentDidUpdate: function() {
      var node;
      if (this.shouldScrollBottom) {
        node = $('body')[0];
        return node.scrollTop = node.scrollHeight;
      }
    },
    render: function() {
      var conv, messages, previousMessage, profile, ref, ref1, ref2, ref3, ref4, ref5, removedMessages, url;
      conv = this.props.store.getConversation(this.props.conversation.conversationWithGuid);
      profile = conv.profileSummary;
      if (profile == null) {
        return d.div({
          className: 'outer-container'
        }, d.div({
          className: 'inner-container',
          style: {
            paddingTop: 20
          }
        }, d.h2({}, $l('removedProfile'))));
      }
      if (profile.primaryPhoto != null) {
        url = "" + ((ref = profile.primaryPhoto) != null ? ref.cdnBaseUrl : void 0) + ((ref1 = profile.primaryPhoto) != null ? (ref2 = ref1.urls) != null ? ref2['100x100'] : void 0 : void 0);
      } else {
        url = $l("genericPhotos." + profile.gender);
      }
      previousMessage = null;
      messages = conv.messages;
      if (!((ref3 = this.state) != null ? ref3.showAllMessages : void 0)) {
        removedMessages = (((ref4 = this.state) != null ? ref4.loadedMessages : void 0) || messages.length) - 3;
        messages = _.takeRight(messages, messages.length - removedMessages);
      }
      return d.div({
        className: 'outer-container conversation'
      }, d.div({
        className: 'inner-container'
      }, d.a({
        onClick: this.handleViewProfile
      }, d.div({
        className: 'profile-summary'
      }, d.div({
        className: "photo " + this.props.className
      }, d.img({
        width: '100%',
        height: '100%',
        src: url
      })), d.div({
        className: "username"
      }, profile.username), d.div({
        className: "info"
      }, d.span({}, profile.age), d.Bullet({}), d.span({}, profile.city || "United States")))), d.div.apply(d, [{
        className: 'messages'
      }, (removedMessages != null) && removedMessages > 0 ? d.Button({
        className: "see-all-messages",
        onClick: (function(_this) {
          return function() {
            return _this.setState({
              showAllMessages: true
            });
          };
        })(this)
      }, "See " + removedMessages + " older messages") : void 0].concat(slice.call(_.map(messages, (function(_this) {
        return function(message) {
          var previousType;
          previousType = previousMessage != null ? previousMessage.type : void 0;
          previousMessage = message;
          return d.div({
            className: "message " + message.type + " " + previousType + "-" + message.type
          }, message.type === 'received' ? d.div({
            className: "photo"
          }, d.a({
            onClick: _this.handleViewProfile
          }, d.img({
            width: '100%',
            height: '100%',
            src: url
          }))) : void 0, d.div({
            className: "text"
          }, message.text), d.div({
            className: "timestamp"
          }, moment.utc(message.timestamp).from(moment())));
        };
      })(this))))), d.div({
        className: "send-message"
      }, d.textarea({
        placeholder: $l('messaging.sendMessagePlaceholder'),
        ref: 'messageText',
        value: (ref5 = this.state) != null ? ref5.message : void 0,
        onChange: (function(_this) {
          return function(e) {
            return _this.setState({
              message: $(e.target).val()
            });
          };
        })(this)
      }), d.Button({
        className: "pill send tiny",
        onClick: (function(_this) {
          return function() {
            return _this.props.store.sendMessage(conv.conversationWithGuid, _this.state.message, function() {
              _this.shouldScrollBottom = true;
              return _this.setState({
                message: ""
              });
            });
          };
        })(this)
      }, "Send"))));
    }
  });

}).call(this);



},{"./canvas":4,"./common":5,"./locale":8,"./stores":14,"lodash":undefined,"moment":undefined,"react":undefined}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var $l, Photo, PhotoList, PhotoPlaceholder, PhotoSummary, React, UploadPrimaryPhoto, _, createFactory, d, ref, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  ref = require('./profile'), Photo = ref.Photo, PhotoPlaceholder = ref.PhotoPlaceholder;

  $l = require('./locale');

  UploadPrimaryPhoto = createFactory({
    handlePickPhoto: function() {
      return this.refs.fileUploader.pickFile();
    },
    render: function() {
      return d.div.apply(d, [{
        className: 'upload-photo'
      }].concat(slice.call([
        d.FileUploader({
          ref: 'fileUploader',
          name: 'photo',
          accept: 'image/*',
          onProgress: this.props.onProgress,
          onComplete: this.props.onComplete,
          parameters: {
            continueTo: this.props.continueTo
          }
        }), PhotoPlaceholder({
          className: 'primary',
          gender: this.props.gender,
          message: 'Pick your photo',
          onClick: this.handlePickPhoto
        }, d.a({
          className: 'link-overlay',
          href: '#'
        }))
      ])));
    }
  });

  PhotoSummary = createFactory({
    render: function() {
      return d.div.apply(d, [{
        className: "photo-summary " + (this.props.children.album === 'primary' ? 'primary' : void 0)
      }].concat(slice.call([
        this.props.children.storage === 'pending' ? PhotoPlaceholder({
          gender: this.props.gender,
          message: 'Pending'
        }) : Photo({
          dims: '100x100'
        }, this.props.children), d.div.apply(d, [{
          className: 'buttons'
        }].concat(slice.call([
          d.Button({
            className: 'square delete',
            href: '#',
            onClick: this.props.onDelete.bind(null, this.props.children.guid)
          }, "Delete"), this.props.children.album !== 'primary' ? d.Button({
            className: 'square primary',
            href: '#',
            onClick: this.props.onMakePrimary.bind(null, this.props.children.guid)
          }, "Make Primary") : void 0
        ])))
      ])));
    }
  });

  PhotoList = createFactory({
    render: function() {
      return d.div.apply(d, [{
        className: 'list'
      }].concat(slice.call(_.map(this.props.store.getPhotos(), (function(_this) {
        return function(photo) {
          return PhotoSummary({
            onDelete: _this.props.onDelete,
            onMakePrimary: _this.props.onMakePrimary,
            gender: _this.props.gender
          }, photo);
        };
      })(this)))));
    }
  });

  module.exports = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.PhotosStore()
      };
    },
    handleContinue: function() {
      return this.props.onChangePath(this.props.continueTo);
    },
    handleUploadPhoto: function(e) {
      return this.refs.fileUploader.pickFile();
    },
    handleDelete: function(guid, e) {
      return this.props.store["delete"](guid);
    },
    handleMakePrimary: function(guid, e) {
      return this.props.store.makePrimary(guid);
    },
    handleChange: function() {
      return this.forceUpdate();
    },
    componentWillMount: function() {
      return this.props.store.init(this.props.photos);
    },
    componentDidMount: function() {
      this.props.store.on('change', this.handleChange);
      return this.props.store.setRestClient(this.props.restClient);
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    handleProgress: function(progress) {
      return this.refs.progressBar.show((Math.round(progress)) + "%", progress);
    },
    handleComplete: function(success, result) {
      if (success) {
        this.setState({
          message: $l('photos.uploadOk'),
          error: false
        });
      } else {
        this.setState({
          message: $l('photos.uploadFailed'),
          error: true
        });
      }
      this.refs.dialog.show(false, false);
      return this.refs.progressBar.hide();
    },
    handleDialogClose: function() {
      this.refs.dialog.hide();
      if (this.state.error) {
        return;
      }
      this.props.store.refresh();
      if (this.props.continueTo != null) {
        return this.props.onChangePath(this.props.continueTo, true);
      }
    },
    render: function() {
      var ref1, ref2;
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.ModalDialog({
        ref: 'dialog',
        className: 'dialog'
      }, d.div({
        className: 'message'
      }, (ref1 = this.state) != null ? ref1.message : void 0), d.div({
        className: 'buttons'
      }, d.Button({
        className: 'close',
        onClick: this.handleDialogClose
      }, "Close"))), d.ProgressBar({
        ref: 'progressBar'
      }), d.div.apply(d, [{
        className: 'manage-photos'
      }].concat(slice.call(_.flatten([
        !(this.props.store.getPhotos().length > 0) ? UploadPrimaryPhoto({
          gender: (ref2 = this.props.myProfileSummary) != null ? ref2.gender : void 0,
          continueTo: this.props.continueTo,
          onProgress: this.handleProgress,
          onComplete: this.handleComplete
        }) : [
          d.div.apply(d, [{
            className: 'buttons'
          }].concat(slice.call([
            d.Button({
              className: 'square upload-photo',
              onClick: this.handleUploadPhoto
            }, "Upload More Photos"), d.FileUploader({
              ref: 'fileUploader',
              name: 'photo',
              accept: 'image/*',
              onProgress: this.handleProgress,
              onComplete: this.handleComplete,
              parameters: {
                continueTo: this.props.continueTo
              }
            })
          ]))), PhotoList({
            store: this.props.store,
            onDelete: this.handleDelete,
            onMakePrimary: this.handleMakePrimary,
            gender: this.props.myProfileSummary.gender
          })
        ], this.props.continueTo != null ? d.div({
          className: 'buttons'
        }, d.Button({
          className: 'square',
          onClick: this.handleContinue
        }, "Continue")) : void 0
      ]))))));
    }
  });

}).call(this);



},{"./canvas":4,"./common":5,"./locale":8,"./profile":11,"./stores":14,"lodash":undefined,"react":undefined}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var $l, AdvancedCriteriaTable, EditLabel, EditableSection, LookingForTable, Photo, PhotoPlaceholder, PhotoWithPlaceholder, PopupMenu, ProfileContent, ProfileInfo, React, Section, SlidingPhotoGallery, Username, _, ages, createFactory, d, i, results, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  $l = require('./locale');

  ages = _.object(_.map((function() {
    results = [];
    for (i = 18; i <= 99; i++){ results.push(i); }
    return results;
  }).apply(this), function(age) {
    return [age, age];
  }));

  exports.PhotoPlaceholder = PhotoPlaceholder = createFactory({
    propTypes: {
      gender: React.PropTypes.string.isRequired,
      message: React.PropTypes.string
    },
    render: function() {
      var genderMap;
      genderMap = {
        M: 'male',
        'F': 'female'
      };
      return Photo({
        className: "photo-generic " + genderMap[this.props.gender] + " " + this.props.className,
        message: this.props.message,
        onClick: this.props.onClick
      }, this.props.children);
    }
  });

  exports.Photo = Photo = createFactory({
    handleClick: function(e) {
      e.preventDefault();
      if (this.props.onClick != null) {
        return this.props.onClick(e);
      }
    },
    render: function() {
      var photo, ref, url;
      photo = _.flatten([this.props.children])[0];
      url = photo != null ? (ref = photo.urls) != null ? ref[this.props.dims] : void 0 : void 0;
      if (url != null) {
        url = "" + (photo != null ? photo.cdnBaseUrl : void 0) + url;
      }
      return d.div({
        className: "photo " + this.props.className
      }, this.props.message == null ? d.div({
        className: 'loading'
      }, d.span({}, "Loading...")) : void 0, d.img({
        width: '100%',
        height: '100%',
        src: url
      }), this.props.message != null ? d.div({
        className: "message"
      }, this.props.message) : void 0, this.props.onClick ? d.a({
        className: 'link-overlay',
        href: '#',
        onClick: this.handleClick
      }) : void 0);
    }
  });

  EditLabel = createFactory({
    render: function() {
      return d.div({
        className: 'edit-label'
      }, this.props.children != null ? d.h3({}, this.props.children) : void 0, !this.props.editMode === true ? d.Button({
        className: 'tiny edit square uppercase',
        onClick: this.props.onEdit
      }, 'Edit') : void 0, this.props.editMode === true ? d.Button({
        className: 'tiny save square uppercase',
        onClick: this.props.onSave
      }, 'Save') : void 0, this.props.editMode === true ? d.Button({
        className: 'tiny cancel square uppercase',
        onClick: this.props.onCancel
      }, 'Cancel') : void 0);
    }
  });

  EditableSection = function(focusProps) {
    return function(Component) {
      return createFactory({
        handleEdit: function() {
          this.setState({
            editMode: true
          });
          if (focusProps.focusOn != null) {
            return focusProps.focusOn(this.refs.section.getDOMNode());
          }
        },
        handleCancel: function() {
          this.setState({
            editMode: false
          });
          if (focusProps.unfocus != null) {
            return focusProps.unfocus();
          }
        },
        handleSave: function() {
          this.setState({
            editMode: false
          });
          if (this.props.onChange != null) {
            this.props.onChange(this.refs.component.value());
          }
          if (focusProps.unfocus != null) {
            return focusProps.unfocus();
          }
        },
        componentDidMount: function() {
          return $(this.refs.section.getDOMNode()).resize((function(_this) {
            return function() {
              if (focusProps.onResize != null) {
                return focusProps.onResize();
              }
            };
          })(this));
        },
        render: function() {
          var ref, ref1, ref2;
          return d.div({
            ref: 'section',
            className: this.props.className + " " + (((ref = this.state) != null ? ref.editMode : void 0) ? 'edit-mode' : '')
          }, EditLabel({
            onEdit: this.props.onEdit || this.handleEdit,
            editMode: (ref1 = this.state) != null ? ref1.editMode : void 0,
            onCancel: this.handleCancel,
            onSave: this.handleSave
          }, this.props.label), Component(_.defaults({
            ref: 'component',
            editMode: (ref2 = this.state) != null ? ref2.editMode : void 0,
            editable: true
          }, this.props), this.props.children));
        }
      });
    };
  };

  Section = function(Component) {
    return createFactory({
      render: function() {
        return d.div({
          className: this.props.className
        }, this.props.label ? d.h3({}, this.props.label) : void 0, Component(_.defaults({
          ref: 'component'
        }, this.props), this.props.children));
      }
    });
  };

  AdvancedCriteriaTable = createFactory({
    value: function() {
      return _.merge({}, this.props.children, this.state);
    },
    handleChange: function(field, e) {
      var value;
      value = $(this.refs[field].getDOMNode()).val();
      return this.setState(_.object([[field, value]]));
    },
    render: function() {
      return d.div.apply(d, [{}].concat(slice.call(_.map(this.props.children, (function(_this) {
        return function(v, k) {
          var options, ref, rendered;
          if (((ref = _this.state) != null ? ref[k] : void 0) != null) {
            v = _this.state[k];
          }
          rendered = {
            label: $l("advancedCriteria." + k),
            value: (v != null) && v !== '' ? $l("options." + k + "." + v) || v : void 0
          };
          options = $l("options." + k);
          if (_this.props.editMode) {
            if (_.isObject(options)) {
              rendered.value = d.select.apply(d, [{
                ref: k,
                value: v,
                onChange: _this.handleChange.bind(null, k)
              }, d.option({}, "")].concat(slice.call(_.map(options, function(label, option) {
                return d.option({
                  value: option
                }, label);
              }))));
            } else {
              rendered.value = d.input({
                ref: k,
                value: rendered.value,
                onChange: _this.handleChange.bind(null, k)
              });
            }
          }
          if (((rendered.value != null) && rendered.value !== '') || _this.props.editable) {
            return d.DescriptionList({
              label: rendered.label
            }, rendered.value);
          }
        };
      })(this)))));
    }
  });

  LookingForTable = createFactory({
    value: function() {
      return _.merge({}, this.props.children, this.state);
    },
    handleChange: function(e) {
      var field, value;
      value = $(e.target).val();
      field = $(e.target).attr('name');
      return this.setState(_.object([[field, value]]));
    },
    render: function() {
      var ref, ref1, ref2, ref3, ref4;
      if (this.props.editMode) {
        return d.BulletList.apply(d, [{}].concat(slice.call([
          d.DropDown({
            name: 'gender',
            value: ((ref = this.state) != null ? ref.gender : void 0) || this.props.children.gender,
            onChange: this.handleChange
          }, $l("gender_plural")), d.span({}, "Between ", d.DropDown({
            name: 'minAge',
            value: ((ref1 = this.state) != null ? ref1.minAge : void 0) || this.props.children.minAge,
            onChange: this.handleChange
          }, ages), " and ", d.DropDown({
            name: 'maxAge',
            value: ((ref2 = this.state) != null ? ref2.maxAge : void 0) || this.props.children.maxAge,
            onChange: this.handleChange
          }, ages)), d.DropDown({
            name: 'distance',
            value: ((ref3 = this.state) != null ? ref3.distance : void 0) || this.props.children.distance,
            onChange: this.handleChange
          }, $l("options.distance")), d.DropDown({
            name: 'relationshipType',
            value: ((ref4 = this.state) != null ? ref4.relationshipType : void 0) || this.props.children.relationshipType,
            onChange: this.handleChange
          }, $l("options.relationshipType"))
        ])));
      } else {
        return d.BulletList.apply(d, [{}].concat(slice.call([$l("gender_plural." + this.props.children.gender), d.span.apply(d, [{}].concat(slice.call(["Between ", d.span({}, this.props.children.minAge), " and ", d.span({}, this.props.children.maxAge)]))), $l("options.distance." + this.props.children.distance), $l("options.relationshipType." + this.props.children.relationshipType)])));
      }
    }
  });

  ProfileContent = createFactory({
    value: function() {
      if (this.refs.textarea == null) {
        return this.props.children;
      }
      return this.refs.textarea.value();
    },
    render: function() {
      if (this.props.editMode) {
        return d.AutoGrowTextArea({
          ref: 'textarea',
          defaultValue: this.props.children
        });
      } else {
        return d.span({}, this.props.children);
      }
    }
  });

  Username = createFactory({
    handleChange: function(e) {
      var field, value;
      value = $(e.target).val();
      field = $(e.target).attr('name');
      return this.setState(_.object([[field, value]]));
    },
    value: function() {
      var ref;
      return ((ref = this.state) != null ? ref.username : void 0) || this.props.children;
    },
    render: function() {
      var ref;
      return d.h3({
        className: 'username'
      }, this.props.editMode ? d.input({
        name: 'username',
        value: ((ref = this.state) != null ? ref.username : void 0) || this.props.children,
        onChange: this.handleChange
      }) : this.props.children);
    }
  });

  ProfileInfo = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.LocationStore()
      };
    },
    getInitialState: function() {
      var ref, ref1;
      return {
        postalCode: (ref = this.props.children.profileLocation) != null ? ref.postalCode : void 0,
        profileLocationGuid: (ref1 = this.props.children.profileLocation) != null ? ref1.guid : void 0,
        profileLocation: this.props.children.profileLocation,
        age: this.props.children.age,
        gender: this.props.children.gender
      };
    },
    handleChange: function(e) {
      var field, value;
      value = $(e.target).val();
      field = $(e.target).attr('name');
      return this.setState(_.object([[field, value]]));
    },
    value: function() {
      return _.omit(this.state, 'postalCode', 'locations');
    },
    handlePostalChange: function(value) {
      this.props.store.updateLocations(value);
      return this.setState({
        postalCode: value
      });
    },
    handleStoreChange: function() {
      var locations, ref;
      locations = this.props.store.getLocations();
      this.setState({
        profileLocation: locations[0]
      });
      if (!this.props.store.getLocation(this.state.profileLocationGuid)) {
        this.setState({
          profileLocationGuid: (ref = locations[0]) != null ? ref.guid : void 0
        });
      }
      return this.forceUpdate();
    },
    componentDidMount: function() {
      this.props.store.setRestClient(this.props.restClient);
      this.props.store.on('change', this.handleStoreChange);
      if (this.props.editable) {
        this.props.store.preload([this.props.children.profileLocation]);
        return this.handlePostalChange(this.state.postalCode);
      }
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleStoreChange);
    },
    handleCityChange: function(e) {
      return this.setState({
        profileLocationGuid: $(e.target).val(),
        profileLocation: this.props.store.getLocation($(e.target).val())
      });
    },
    render: function() {
      var ref, ref1, ref2, ref3, ref4, ref5;
      return d.div.apply(d, [{
        className: 'info',
        ref: 'info'
      }].concat(slice.call((this.props.editMode ? [
        d.DropDown({
          name: 'age',
          value: ((ref = this.state) != null ? ref.age : void 0) || this.props.children.age,
          onChange: this.handleChange
        }, ages), d.DropDown({
          name: 'gender',
          value: ((ref1 = this.state) != null ? ref1.gender : void 0) || this.props.children.gender,
          onChange: this.handleChange
        }, $l("gender")), d.div({
          className: 'location'
        }, d.div({
          className: 'location-field'
        }, d.label({}, $l('location.postalCode')), d.input({
          defaultValue: this.state.postalCode,
          onChange: (function(_this) {
            return function(e) {
              return _this.handlePostalChange($(e.target).val());
            };
          })(this)
        })), d.div({
          className: 'location-field'
        }, d.label({}, $l('location.city')), d.select.apply(d, [{
          defaultValue: this.state.profileLocationGuid,
          onChange: this.handleCityChange
        }].concat(slice.call(_.map(this.props.store.getLocations(), function(loc) {
          return d.option({
            value: loc.guid
          }, loc.city + ", " + loc.stateCode);
        }))))))
      ] : [
        d.Glyph({
          glyph: 'map-marker'
        }), d.span({}, ((ref2 = this.props.children.profileLocation) != null ? ref2.city : void 0) + ", " + ((ref3 = this.props.children.profileLocation) != null ? ref3.stateCode : void 0) + " "), d.span({}, $l("gender." + (((ref4 = this.state) != null ? ref4.gender : void 0) || this.props.children.gender))), d.span({}, " "), d.span({}, ((ref5 = this.state) != null ? ref5.age : void 0) || this.props.children.age), d.Glyph({
          glyph: 'camera'
        }), d.span({
          className: 'camera-count'
        }, "3")
      ]))));
    }
  });

  PhotoWithPlaceholder = createFactory({
    render: function() {
      var ref;
      if ((this.props.photo != null) && this.props.photo.storage !== 'pending') {
        return Photo({
          className: 'primary',
          dims: '300x300'
        }, this.props.photo);
      } else {
        return PhotoPlaceholder({
          className: 'primary',
          gender: this.props.gender,
          message: (((ref = this.props.photo) != null ? ref.storage : void 0) === 'pending' ? 'Pending' : void 0)
        });
      }
    }
  });

  SlidingPhotoGallery = createFactory({
    getInitialState: function() {
      return {
        index: 0
      };
    },
    getDeltaX: function(e) {
      var deltaX;
      deltaX = this.startX - e.changedTouches[0].screenX;
      if (deltaX < 0 && this.state.index === 0) {
        deltaX = 0;
      }
      if (deltaX > 0 && this.state.index === this.props.photos.length - 1) {
        deltaX = 0;
      }
      return deltaX;
    },
    handleTouchMove: function(e) {
      var deltaX;
      deltaX = this.getDeltaX(e);
      $(this.refs.current.getDOMNode()).css({
        left: -deltaX
      });
      if (this.refs.next != null) {
        $(this.refs.next.getDOMNode()).css({
          left: this.containerWidth - deltaX
        });
      }
      if (this.refs.previous != null) {
        return $(this.refs.previous.getDOMNode()).css({
          left: -this.containerWidth - deltaX
        });
      }
    },
    handleTouchStart: function(e) {
      this.containerWidth = $(this.refs.current.getDOMNode()).innerWidth();
      return this.startX = e.changedTouches[0].screenX;
    },
    handleTouchEnd: function(e) {
      var deltaX;
      deltaX = this.getDeltaX(e);
      if (deltaX > (this.containerWidth / 3)) {
        this.setState({
          index: this.state.index + 1
        });
      } else if (deltaX < -(this.containerWidth / 3)) {
        this.setState({
          index: this.state.index - 1
        });
      }
      $(this.refs.current.getDOMNode()).css({
        left: 0
      });
      if (this.refs.next != null) {
        $(this.refs.next.getDOMNode()).css({
          left: 0
        });
      }
      if (this.refs.previous != null) {
        return $(this.refs.previous.getDOMNode()).css({
          left: 0
        });
      }
    },
    handleClick: function(e) {
      e.preventDefault();
      if ($(this.refs.current.getDOMNode()).innerWidth() !== 300) {
        return;
      }
      if (this.props.onClick != null) {
        return this.props.onClick(e);
      }
    },
    render: function() {
      return d.div({
        ref: 'container',
        className: 'sliding-gallery',
        onClick: this.handleClick,
        onTouchStart: this.handleTouchStart,
        onTouchEnd: this.handleTouchEnd,
        onTouchMove: this.handleTouchMove
      }, this.props.photos[this.state.index - 1] != null ? d.div({
        ref: 'previous',
        className: 'previous'
      }, PhotoWithPlaceholder({
        photo: this.props.photos[this.state.index - 1],
        gender: this.props.gender
      })) : void 0, d.div({
        ref: 'current',
        className: 'current'
      }, PhotoWithPlaceholder({
        photo: this.props.photos[this.state.index],
        gender: this.props.gender
      })), this.props.photos[this.state.index + 1] != null ? d.div({
        ref: 'next',
        className: 'next'
      }, PhotoWithPlaceholder({
        photo: this.props.photos[this.state.index + 1],
        gender: this.props.gender
      })) : void 0);
    }
  });

  PopupMenu = createFactory({
    getInitialState: function() {
      return {
        visible: this.props.visible || false
      };
    },
    show: function() {
      return this.setState({
        visible: true
      });
    },
    hide: function() {
      return this.setState({
        visible: false
      });
    },
    handleItemClick: function(item, e) {
      e.preventDefault();
      this.hide();
      if (this.props.onClick != null) {
        return this.props.onClick(item, e);
      }
    },
    render: function() {
      console.log(this.props);
      return d.div({
        className: "popup-menu-container " + (this.state.visible ? 'visible' : 'hidden'),
        onClick: this.hide
      }, d.span({
        className: 'align-helper'
      }), d.div.apply(d, [{
        className: 'popup-menu'
      }].concat(slice.call(_.map(this.props.items, (function(_this) {
        return function(item) {
          return d.a({
            href: '#',
            onClick: _this.handleItemClick.bind(null, item)
          }, $l("popupMenu." + item));
        };
      })(this))))));
    }
  });

  exports.Profile = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.ProfileStore()
      };
    },
    getInitialState: function() {
      return {};
    },
    componentWillReceiveProps: function(nextProps) {
      return this.props.store.preload(nextProps.profile);
    },
    componentWillMount: function() {
      return this.props.store.preload(this.props.profile);
    },
    componentDidMount: function() {
      this.props.store.setRestClient(this.props.restClient);
      return this.props.store.on('change', (function(_this) {
        return function() {
          return _this.forceUpdate();
        };
      })(this));
    },
    handleChange: function(section, values) {
      var updates;
      updates = _.object([[section, values]]);
      this.props.restClient.post('', updates);
      return this.setState(updates);
    },
    handleChangeContent: function(section, values) {
      var updates;
      updates = _.object([[section, values]]);
      this.props.restClient.post('', {
        content: updates
      });
      return this.setState(_.object([["content_" + section, values]]));
    },
    handleProfileInfoChange: function(profileInfo) {
      this.props.restClient.post('', profileInfo);
      return this.setState(profileInfo);
    },
    handleLikeProfile: function() {
      return this.props.store.flipLikeFlag();
    },
    handleHideProfile: function() {
      return this.props.store.hide();
    },
    handleReportProfile: function() {
      return this.refs.reportOptions.show();
    },
    handleSendMessage: function() {
      var profile;
      profile = this.props.store.getState();
      return this.props.onChangePath("/conversation/" + profile.guid);
    },
    handleShowMoreOptions: function(e) {
      return this.refs.moreOptions.show();
    },
    handleOptionClick: function(choice, e) {
      if (choice === 'message') {
        return this.handleSendMessage();
      } else if (choice === 'like') {
        return this.handleLikeProfile();
      } else if (choice === 'hide') {
        return this.handleHideProfile();
      } else if (choice === 'report') {
        return this.handleReportProfile();
      }
    },
    handleReportOption: function(choice) {
      return this.props.store.report(choice);
    },
    render: function() {
      var photo, profile, ref, ref1, ref2, ref3, ref4, ref5, section, url;
      profile = this.props.store.getState();
      if (profile == null) {
        return d.div({
          className: 'outer-container'
        }, d.div({
          className: 'inner-container',
          style: {
            paddingTop: 20
          }
        }, d.h2({}, $l('removedProfile'))));
      }
      section = this.props.editable ? EditableSection({
        focusOn: (function(_this) {
          return function(element) {
            return _this.refs.focusSection.focus(element);
          };
        })(this),
        unfocus: (function(_this) {
          return function() {
            return _this.refs.focusSection.unfocus();
          };
        })(this),
        onResize: (function(_this) {
          return function() {
            return _this.refs.focusSection.handleWindowResize();
          };
        })(this)
      }) : Section;
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.FocusSection({
        ref: 'focusSection',
        animate: true
      }), PopupMenu({
        ref: 'moreOptions',
        items: ['message', 'like', 'hide', 'report'],
        onClick: this.handleOptionClick
      }), PopupMenu({
        ref: 'reportOptions',
        items: ['fake', 'scammer', 'badPhoto', 'offensive', 'other', 'cancel'],
        onClick: this.handleReportOption
      }), d.div.apply(d, [{
        className: 'profile'
      }].concat(slice.call([
        d.div.apply(d, [{
          className: 'photos-and-info'
        }].concat(slice.call([d.div.apply(d, [{
            className: 'photos'
          }].concat(slice.call([SlidingPhotoGallery({
              gender: profile.gender,
              onClick: ((function(_this) {
                return function() {
                  return _this.setState({
                    zoomPhotoIndex: 0
                  });
                };
              })(this)),
              photos: _.filter(_.flatten([profile.primaryPhoto, profile.photos]), function(p) {
                return p != null;
              })
            })].concat(slice.call(_.map(profile.photos, (function(_this) {
              return function(photo, index) {
                if (photo.storage !== 'pending') {
                  return Photo({
                    className: 'other',
                    dims: '300x300',
                    onClick: function() {
                      return _this.setState({
                        zoomPhotoIndex: index + 1
                      });
                    }
                  }, photo);
                } else {
                  return PhotoPlaceholder({
                    className: 'other',
                    gender: profile.gender,
                    message: (photo.storage === 'pending' ? 'Pending' : void 0)
                  });
                }
              };
            })(this))))))), Section(Username)({
            className: 'username-container'
          }, profile.username), section(ProfileInfo)({
            className: 'profile-info-container',
            onChange: this.handleProfileInfoChange,
            restClient: this.props.rootRestClient
          }, _.pick(_.defaults({}, this.state || {}, profile), 'age', 'gender', 'city', 'profileLocation'))].concat(slice.call((this.props.editable !== true ? [
            d.Button({
              className: 'send-message square',
              onClick: this.handleSendMessage
            }, d.Glyph({
              glyph: 'envelope'
            }), d.span({
              className: 'button-label'
            }, "Message")), d.Button({
              className: "like-profile square" + (((ref = profile.flags) != null ? ref.liked : void 0) ? ' is-liked' : ''),
              onClick: this.handleLikeProfile
            }, d.Glyph({
              glyph: 'heart'
            }), d.span({
              className: 'button-label'
            }, "Like")), d.Button({
              className: "more-options square",
              onClick: this.handleShowMoreOptions
            }, d.Glyph({
              glyph: 'ellipsis-h'
            }), d.span({
              className: 'button-label'
            }, "More"))
          ] : [
            d.Button({
              className: 'photos-button square',
              onClick: (function(_this) {
                return function() {
                  return _this.props.onChangePath('/photos');
                };
              })(this)
            }, d.Glyph({
              glyph: 'camera'
            }), d.span({
              className: 'button-label'
            }, "Photos"))
          ])))))), d.div.apply(d, [{
          className: "content-and-details " + ((((profile != null ? (ref3 = profile.content) != null ? ref3.length : void 0 : void 0) != null) || 0) === 0 ? 'no-content' : 'has-content')
        }].concat(slice.call([
          d.div.apply(d, [{
            className: 'content'
          }].concat(slice.call(_.map(profile.content || [], (function(_this) {
            return function(item) {
              var ref1;
              return section(ProfileContent)({
                className: 'item',
                label: $l("content." + item.type),
                onChange: _this.handleChangeContent.bind(null, item.type)
              }, ((ref1 = _this.state) != null ? ref1["content_" + item.type] : void 0) || item.content);
            };
          })(this))))), d.div({
            className: 'details'
          }, section(LookingForTable)({
            className: 'looking-for',
            label: 'Looking For',
            onChange: this.handleChange.bind(null, 'lookingFor')
          }, _.merge({}, profile.lookingFor, (ref1 = this.state) != null ? ref1.lookingFor : void 0)), section(AdvancedCriteriaTable)({
            className: 'my-details',
            label: 'My Details',
            onChange: this.handleChange.bind(null, 'advancedCriteria')
          }, _.merge({}, profile.advancedCriteria, ((ref2 = this.state) != null ? ref2.advancedCriteria : void 0) || {}))), d.div.apply(d, [{
            className: "profile-bottom-buttons"
          }].concat(slice.call([
            d.div({
              className: 'hide-user-button'
            }, d.Glyph({
              glyph: 'user'
            }), d.span({}, "Hide this user")), d.div({
              className: 'flag-user-button'
            }, d.Glyph({
              glyph: 'flag'
            }), d.span({}, "Flag this user"))
          ]))), d.div.apply(d, [{
            className: "profile-footer"
          }].concat(slice.call([
            [
              d.div.apply(d, [{
                className: 'profile-footer-link-groups'
              }].concat(slice.call([
                d.span({
                  className: 'about-us-link'
                }, "About Us"), d.span({
                  className: 'term-of-services-link'
                }, "Term Of Services"), d.span({
                  className: 'privacy-link'
                }, "Privacy"), d.span({
                  className: 'faqs-link'
                }, "FAQs")
              ]))), d.span({}, "CurvesConnect.com  &#169; 2016 All Rights Reserved.\nCurvesConnect&reg; does not conduct background checks on\nthe members or subscribes of this website.")
            ]
          ])))
        ])))
      ]))), this.state.zoomPhotoIndex != null ? (photo = this.state.zoomPhotoIndex === 0 ? profile.primaryPhoto : profile.photos[this.state.zoomPhotoIndex - 1], url = photo != null ? (ref4 = photo.urls) != null ? ref4['800x800'] : void 0 : void 0, url != null ? url = "" + (photo != null ? photo.cdnBaseUrl : void 0) + url : void 0, d.div({
        className: 'photo-gallery'
      }, d.span({
        className: 'align-helper'
      }), d.div({
        className: 'photo-wrapper'
      }, d.img({
        src: url
      }), d.div({
        className: 'close'
      }, d.Button({
        onClick: (function(_this) {
          return function() {
            return _this.setState({
              zoomPhotoIndex: null
            });
          };
        })(this)
      }, $l('close'))), this.state.zoomPhotoIndex > 0 ? d.div({
        className: 'back',
        onClick: (function(_this) {
          return function() {
            return _this.setState({
              zoomPhotoIndex: _this.state.zoomPhotoIndex - 1
            });
          };
        })(this)
      }, d.span({
        className: 'align-helper'
      }), d.Glyph({
        glyph: 'chevron-left'
      })) : void 0, this.state.zoomPhotoIndex < ((ref5 = profile.photos) != null ? ref5.length : void 0) ? d.div({
        className: 'forward',
        onClick: (function(_this) {
          return function() {
            return _this.setState({
              zoomPhotoIndex: _this.state.zoomPhotoIndex + 1
            });
          };
        })(this)
      }, d.span({
        className: 'align-helper'
      }), d.Glyph({
        glyph: 'chevron-right'
      })) : void 0))) : void 0));
    }
  });

}).call(this);



},{"./canvas":4,"./common":5,"./locale":8,"./stores":14,"lodash":undefined,"react":undefined}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var $l, React, _, createFactory, d, moment, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  $l = require('./locale');

  moment = require('moment');

  exports.ListContainer = createFactory({
    handleChange: function() {
      return this.forceUpdate();
    },
    componentDidMount: function() {
      return this.props.store.on('change', this.handleChange);
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    handleResize: function() {
      return this.forceUpdate();
    },
    handleClick: function(e) {
      e.item = this.props.store.getItem(e.itemIndex);
      if ((e.item != null) && (this.props.onClick != null)) {
        return this.props.onClick(e);
      }
    },
    getListView: function() {
      return this.refs.listView;
    },
    renderItem: function(index, scrollTop, containerSize, canvas) {
      var item;
      item = this.props.store.getItem(index);
      if (item == null) {
        return;
      }
      return this.props.renderItem(item, scrollTop, containerSize.width, canvas);
    },
    render: function() {
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'list-container'
      }, this.props.store.getLoadedCount() === 0 ? this.props.store.isLoading() ? d.div({
        className: 'info-message'
      }, this.props.loadingMessage) : d.div({
        className: 'info-message'
      }, this.props.emptyMessage) : d.CanvasListView({
        ref: 'listView',
        numberOfItemsGetter: (function(_this) {
          return function() {
            return _this.props.store.getLoadedCount();
          };
        })(this),
        itemHeightGetter: (function(_this) {
          return function() {
            return _this.props.itemHeight;
          };
        })(this),
        itemGetter: this.renderItem,
        onClick: this.handleClick,
        onResize: this.handleResize,
        scrollTop: this.props.store.getScrollTop(),
        style: {
          top: '0px'
        }
      }))));
    }
  });

  exports.ProfileListContainer = createFactory({
    componentDidMount: function() {
      if (!this.props.backNavigation) {
        this.props.store.reset();
      }
      this.props.store.setRestClient(this.props.restClient);
      return this.props.store.init();
    },
    handleLike: function(profile) {
      return this.props.store.like(profile.guid);
    },
    handleHide: function(profile) {
      return this.props.store.hide(profile.guid);
    },
    handleBlock: function(profile) {
      if (confirm($l("blockConfirmation").replace(/username/, profile.username).replace(/pronoun/, $l("genderCapPronouns." + profile.gender)))) {
        return this.props.store.block(profile.guid);
      }
    },
    handleHide: function(profile) {
      return this.props.store.hide(profile.guid);
    },
    handleClick: function(e) {
      var isWithin, ref, ref1, selectedAction;
      if (e.item.blocked) {
        return;
      }
      isWithin = function(dims) {
        return dims.left < e.itemX && (dims.left + dims.width) > e.itemX && dims.top < e.itemY && (dims.height + dims.top) > e.itemY;
      };
      if (((ref = this.state) != null ? ref.showOptionsFor : void 0) === e.item.guid) {
        selectedAction = null;
        _.each(this.actions, function(dim, action) {
          if (isWithin(dim)) {
            return selectedAction = action;
          }
        });
        if (selectedAction === 'message') {
          this.props.onChangePath("/conversation/" + e.item.guid);
        } else if (selectedAction === 'hide') {
          this.handleHide(e.item);
        } else if (selectedAction === 'block') {
          this.handleBlock(e.item);
        }
        return this.setState({
          showOptionsFor: null
        });
      } else if (((ref1 = this.state) != null ? ref1.showOptionsFor : void 0) != null) {
        return this.setState({
          showOptionsFor: null
        });
      } else {
        if (isWithin(this.likeButtonStyle)) {
          return this.handleLike(e.item);
        } else if (isWithin(this.hideButtonStyle)) {
          return this.handleHide(e.item);
        } else if (isWithin(this.moreOptionsButtonStyle)) {
          return this.setState({
            showOptionsFor: e.item.guid
          });
        } else {
          return this.props.onChangePath("/profile/" + e.item.guid);
        }
      }
    },
    renderProfile: function(profile, scrollTop, width, canvas) {
      var alertColor, buttonColor, buttonStyle, height, location, primaryColor, ref, ref1, ref2, ref3, ref4, renderButtonWithLabel, selectedButtonStyle, timestamp, url;
      if (this.props.store.getScrollTop() !== scrollTop && (((ref = this.state) != null ? ref.showOptionsFor : void 0) != null)) {
        setTimeout(((function(_this) {
          return function() {
            return _this.setState({
              showOptionsFor: null
            });
          };
        })(this)), 0);
      }
      this.props.store.setScrollTop(scrollTop);
      height = 100;
      if (profile.primaryPhoto != null) {
        url = "" + ((ref1 = profile.primaryPhoto) != null ? ref1.cdnBaseUrl : void 0) + ((ref2 = profile.primaryPhoto) != null ? (ref3 = ref2.urls) != null ? ref3['100x100'] : void 0 : void 0);
      } else {
        url = $l("genericPhotos." + profile.gender);
      }
      primaryColor = "rgb(18, 103, 112)";
      alertColor = "rgb(248, 215, 13)";
      buttonColor = "rgb(108, 79, 114)";
      buttonStyle = {
        backgroundColor: buttonColor,
        color: "white",
        borderWidth: 2,
        borderRadius: 20,
        height: 40,
        width: 40
      };
      selectedButtonStyle = _.defaults({
        backgroundColor: alertColor,
        color: primaryColor,
        borderColor: primaryColor
      }, buttonStyle);
      location = "";
      if (profile.profileLocation != null) {
        location = profile.profileLocation.city + ", " + profile.profileLocation.stateCode;
      }
      this.likeButtonStyle = _.defaults({
        fontSize: 32,
        left: 110,
        top: 50
      }, (profile.liked ? selectedButtonStyle : buttonStyle));
      this.hideButtonStyle = _.defaults({
        fontSize: 32,
        left: 160,
        top: 50
      }, (profile.hidden ? selectedButtonStyle : buttonStyle));
      this.moreOptionsButtonStyle = _.merge(_.defaults({
        fontSize: 20,
        left: width - 31,
        top: 1,
        backgroundColor: 'white'
      }, selectedButtonStyle), {
        height: 25,
        width: 30,
        borderRadius: 0,
        backgroundColor: 'white',
        borderColor: 'white'
      });
      renderButtonWithLabel = (function(_this) {
        return function(action, position, buttonCount, label, icon) {
          var buttonLeft, buttonSpacing, left, menuButtonStyle, style;
          if (_this.actions == null) {
            _this.actions = {};
          }
          menuButtonStyle = {
            color: "white",
            height: 80,
            width: 80,
            top: 10,
            borderColor: 'white',
            borderRadius: 10
          };
          buttonSpacing = Math.min(width / buttonCount - 80, 40);
          buttonLeft = width / 2 - ((buttonSpacing + 80) * buttonCount) / 2;
          left = buttonLeft + buttonSpacing / 2 + (buttonSpacing + 80) * position;
          style = _.defaults({
            fontSize: 40,
            left: left
          }, menuButtonStyle);
          _this.actions[action] = style;
          return canvas.Group({}, d.CanvasIcon({
            style: style
          }, icon), canvas.renderText(label, 16, 80, 100, {
            translateY: 60,
            translateX: left,
            color: 'white',
            fontWeight: 700,
            textAlign: 'center'
          }));
        };
      })(this);
      timestamp = profile.reverseLikedOn || profile.lastVisitedOn;
      timestamp = timestamp != null ? moment(timestamp).fromNow() : void 0;
      return canvas.Group.apply(canvas, [{
        style: {
          left: 0,
          top: 0,
          width: width,
          height: height - 1,
          backgroundColor: 'white'
        }
      }].concat(slice.call(_.filter([
        !profile.viewed ? canvas.Group({
          style: {
            top: 9,
            left: 9,
            width: 82,
            height: 82,
            borderRadius: 41,
            borderWidth: 4,
            borderColor: 'rgb(128, 255, 0)'
          }
        }) : void 0, canvas.Image({
          style: {
            top: 10,
            left: 10,
            width: 80,
            height: 80,
            borderRadius: 40,
            borderWidth: 2,
            borderColor: 'grey'
          },
          src: url
        }), canvas.renderText(profile.username, 16, 600, 100, {
          translateY: 2,
          translateX: 110,
          color: 'grey',
          fontWeight: 700
        }), canvas.renderText(location, 16, 600, 150, {
          translateY: 20,
          translateX: 110,
          color: 'grey',
          fontWeight: 700
        }), timestamp != null ? canvas.renderText(timestamp, 16, 600, 150, {
          translateY: 72,
          translateX: width - 155,
          width: 150,
          textAlign: 'right',
          color: 'grey',
          fontWeight: 700
        }) : void 0, d.CanvasIcon({
          style: this.likeButtonStyle
        }, "\uf005"), d.CanvasIcon({
          style: this.moreOptionsButtonStyle
        }, "\uf142"), profile.blocked || profile.hidden ? canvas.Group({
          style: {
            left: 0,
            top: 0,
            width: width,
            height: height - 1,
            backgroundColor: 'rgba(220,220,220,.9)'
          }
        }) : void 0, ((ref4 = this.state) != null ? ref4.showOptionsFor : void 0) === profile.guid ? canvas.Group({
          style: {
            left: 0,
            top: 0,
            width: width,
            height: height - 1,
            backgroundColor: 'rgba(120,120,120,.9)'
          }
        }, renderButtonWithLabel("message", 0, 3, "Message", "\uf075"), renderButtonWithLabel("hide", 1, 3, "Hide", "\uf00d"), renderButtonWithLabel("block", 2, 3, "Block", "\uf071")) : void 0
      ], function(i) {
        return i != null;
      }))));
    },
    render: function() {
      return exports.ListContainer({
        store: this.props.store,
        renderItem: this.renderProfile,
        itemHeight: 100,
        onClick: this.handleClick
      });
    }
  });

  exports.LikedBy = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.ProfileListStore()
      };
    },
    render: function() {
      return d.ProfileListContainer(this.props);
    }
  });

  exports.Visitors = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.ProfileListStore()
      };
    },
    render: function() {
      return d.ProfileListContainer(this.props);
    }
  });

}).call(this);



},{"./canvas":4,"./common":5,"./locale":8,"./stores":14,"lodash":undefined,"moment":undefined,"react":undefined}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var $l, React, _, createFactory, d, moment, stores,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  moment = require('moment');

  $l = require('./locale');

  exports.ChangePassword = createFactory({
    getInitialState: function() {
      return {};
    },
    handleChange: function(e) {
      var name;
      name = $(e.target).attr('name');
      return this.setState(_.object([[name, $(e.target).val()]]));
    },
    handleSave: function(e) {
      var ref;
      if (!(((ref = this.state.password) != null ? ref.length : void 0) > 0)) {
        return this.setState({
          errorMessage: "Password cannot be blank"
        });
      }
      if (this.state.password !== this.state.confirmPassword) {
        return this.setState({
          errorMessage: "Password must match"
        });
      }
      return this.props.restClient.post('', _.pick(this.state, 'password', 'changePassword'), {
        success: (function(_this) {
          return function() {
            return _this.props.onChangePath('/settings');
          };
        })(this),
        error: (function(_this) {
          return function(res, type, message) {
            return _this.setState({
              errorMessage: message
            });
          };
        })(this)
      });
    },
    render: function() {
      return d.div({
        className: 'outer-container change-password'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'form'
      }, d.div({
        className: "error-message " + (!this.state.errorMessage ? 'no-error' : void 0)
      }, this.state.errorMessage), d.InputField({
        name: 'password',
        type: 'password',
        placeholder: "Password",
        onChange: this.handleChange,
        value: this.state.password
      }), d.InputField({
        name: 'confirmPassword',
        type: 'password',
        placeholder: "Confirm Password",
        onChange: this.handleChange,
        value: this.state.confirmPassword
      }), d.Button({
        className: "large square",
        onClick: this.handleSave
      }, "Save"))));
    }
  });

  exports.EmailPreferences = createFactory({
    getInitialState: function() {
      return _.merge({
        emailAddress: this.props.emailAddress,
        subscribed: this.props.subscribed
      }, _.object(_.map(this.props.preferences, function(def, pref) {
        return ["subscribe_" + pref, indexOf.call(def.mediums, 'email') >= 0];
      })));
    },
    handleChange: function(e) {
      var name, value;
      name = $(e.target).attr('name');
      if ($(e.target).is('input[type=checkbox]')) {
        value = $(e.target).is(':checked');
      } else {
        value = $(e.target).val();
      }
      return this.setState(_.object([[name, value]]));
    },
    handleSave: function(e) {
      var data, ref;
      if (!(((ref = this.state.emailAddress) != null ? ref.length : void 0) > 0)) {
        return this.setState({
          errorMessage: "E-Mail address cannot be blank"
        });
      }
      data = _.pick(this.state, 'emailAddress', 'subscribed');
      data.preferences = _.object(_.map(this.props.preferences, (function(_this) {
        return function(def, pref) {
          return [pref, _this.state["subscribe_" + pref]];
        };
      })(this)));
      return this.props.restClient.post('', data, {
        success: (function(_this) {
          return function() {
            return _this.props.onChangePath('/settings');
          };
        })(this),
        error: (function(_this) {
          return function(res, type, message, errors) {
            var err;
            err = errors[0] || errors;
            if (err != null) {
              message = $l("settings." + err.field + "." + err.type);
            }
            return _this.setState({
              errorMessage: message
            });
          };
        })(this)
      });
    },
    render: function() {
      return d.div({
        className: 'outer-container email-preferences'
      }, d.div({
        className: 'inner-container'
      }, d.div.apply(d, [{
        className: 'form'
      }, d.div({
        className: "error-message " + (!this.state.errorMessage ? 'no-error' : void 0)
      }, this.state.errorMessage), d.InputField({
        name: 'emailAddress',
        placeholder: "Email Address",
        onChange: this.handleChange,
        value: this.state.emailAddress
      }), d.InputField({
        name: 'subscribed',
        type: 'checkbox',
        label: "Yes! I would like to receive emails about the service.",
        onChange: this.handleChange,
        checked: this.state.subscribed
      })].concat(slice.call((this.state.subscribed ? _.map(this.props.preferences, (function(_this) {
        return function(def, pref) {
          return d.InputField({
            name: "subscribe_" + pref,
            type: 'checkbox',
            label: $l("settings.emailPreferences." + pref),
            onChange: _this.handleChange,
            checked: _this.state["subscribe_" + pref]
          });
        };
      })(this)) : [d.h4({}, "You've disabled all emails from CurvesConnect.com!")])), [d.Button({
        className: "large square",
        onClick: this.handleSave
      }, "Save")]))));
    }
  });

  exports.RemoveProfile = createFactory({
    getInitialState: function() {
      return {
        reason: null
      };
    },
    handleChange: function(e) {
      var name;
      name = $(e.target).attr('name');
      return this.setState(_.object([[name, $(e.target).val()]]));
    },
    handleRemove: function(e) {
      return this.props.restClient.post('', _.pick(this.state, 'reason'), {
        success: (function(_this) {
          return function() {};
        })(this),
        error: (function(_this) {
          return function(res, type, message) {
            return _this.setState({
              errorMessage: message
            });
          };
        })(this)
      });
    },
    render: function() {
      return d.div({
        className: 'outer-container remove-profile'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'form'
      }, d.div({}, d.div({
        className: "error-message " + (!this.state.errorMessage ? 'no-error' : void 0)
      }, this.state.errorMessage)), d.Button({
        className: "large square",
        onClick: this.handleRemove
      }, "Remove"))));
    }
  });

  exports.ManageSubscription = createFactory({
    handleCancel: function() {
      return this.props.restClient.post('/cancel', {}, (function(_this) {
        return function(result) {
          return _this.setState({
            subscription: result
          });
        };
      })(this));
    },
    handleStart: function() {
      return this.props.restClient.post('/start', {}, (function(_this) {
        return function(result) {
          return _this.setState({
            subscription: result
          });
        };
      })(this));
    },
    handleSubscribe: function() {
      return this.props.onChangePath("/upgrade");
    },
    handleContinue: function() {
      return this.props.onChangePath("/settings");
    },
    render: function() {
      var ref, subscription, total;
      total = 0;
      subscription = ((ref = this.state) != null ? ref.subscription : void 0) || this.props.subscription;
      return d.div({
        className: 'outer-container manage-subscription'
      }, d.div({
        className: 'inner-container'
      }, d.div.apply(d, [{
        className: 'info'
      }].concat(slice.call(((subscription != null) && (subscription != null ? subscription.autoRenew : void 0) === true ? [
        $l("settings.manageSubscription.scheduledToRenewOn"), d.span({
          className: 'renewal-date'
        }, moment(subscription != null ? subscription.expiresOn : void 0).format("MM/DD/YYYY")), d.Button({
          className: "tiny square cancel",
          onClick: this.handleCancel
        }, $l("settings.manageSubscription.cancelSubscription"))
      ] : subscription != null ? [
        $l("settings.manageSubscription.notScheduledToRenewOn"), d.Button({
          className: "tiny square start",
          onClick: this.handleStart
        }, $l("settings.manageSubscription.startSubscription"))
      ] : [
        $l("settings.manageSubscription.noSubscription"), d.div({}, d.Button({
          className: "square subscribe",
          onClick: this.handleSubscribe
        }, $l('settings.manageSubscription.subscribe')))
      ])))), d.div.apply(d, [{
        className: 'line-items'
      }].concat(slice.call(_.map((subscription != null ? subscription.lineItems : void 0) || [], function(lineItem) {
        total += lineItem.price;
        return d.div({
          className: 'line-item'
        }, d.span({
          className: 'label'
        }, $l("upgrade.pricing." + lineItem.name)), d.span({
          className: 'value'
        }, "$", (lineItem.price / 100).toFixed(2)));
      })), [total > 0 ? d.div({
        className: 'total'
      }, d.span({
        className: 'label'
      }, $l("settings.manageSubscription.total")), d.span({
        className: 'value'
      }, "$", (total / 100).toFixed(2))) : void 0])), d.div({}, d.Button({
        className: "large square continue",
        onClick: this.handleContinue
      }, $l("continue")))));
    }
  });

  exports.Settings = createFactory({
    render: function() {
      var ref;
      return d.div({
        className: 'outer-container settings'
      }, d.div({
        className: 'inner-container'
      }, d.Button({
        className: "square huge",
        onClick: (function(_this) {
          return function() {
            return _this.props.onChangePath("/settings/change_password");
          };
        })(this)
      }, "Change Password"), d.Button({
        className: "square huge",
        onClick: (function(_this) {
          return function() {
            return _this.props.onChangePath("/settings/email_preferences");
          };
        })(this)
      }, "Email Preferences"), ((ref = this.props.features) != null ? ref.billing : void 0) ? d.Button({
        className: "square huge",
        onClick: (function(_this) {
          return function() {
            return _this.props.onChangePath("/settings/manage_subscription");
          };
        })(this)
      }, "Manage Subscription") : void 0, d.Button({
        className: "square huge",
        onClick: (function(_this) {
          return function() {
            return _this.props.onChangePath("/settings/remove_profile");
          };
        })(this)
      }, "Remove Profile")));
    }
  });

}).call(this);



},{"./canvas":4,"./common":5,"./locale":8,"./stores":14,"lodash":undefined,"moment":undefined,"react":undefined}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var BrowseStore, ConversationStore, DiscoverStore, EventEmitter, InboxStore, LocationStore, NotificationStore, PagingStore, PhotoStore, ProfileListStore, ProfileStore, Store, _, d, moment,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  _ = require('lodash');

  d = require('./common');

  moment = require('moment');

  Store = Store = (function(superClass) {
    extend(Store, superClass);

    function Store() {
      this.state = {};
    }

    Store.prototype.setRestClient = function(restClient) {
      return this.restClient = restClient;
    };

    Store.prototype.preload = function(state) {
      return this.state = state;
    };

    Store.prototype.getState = function() {
      return _.cloneDeep(this.state);
    };

    return Store;

  })(EventEmitter);

  PagingStore = PagingStore = (function(superClass) {
    extend(PagingStore, superClass);

    function PagingStore() {
      return PagingStore.__super__.constructor.apply(this, arguments);
    }

    PagingStore.prototype.reset = function() {
      this.state.items = [];
      this.state.totalCount = 0;
      this.state.loading = false;
      this.state.page = 0;
      return this.state.scrollTop = 0;
    };

    PagingStore.prototype.init = function() {
      var ref, ref1;
      if (((ref = this.state) != null ? (ref1 = ref.items) != null ? ref1.length : void 0 : void 0) > 0) {
        return;
      }
      this.reset();
      return this.loadNextPage();
    };

    PagingStore.prototype.preload = function(items, totalCount) {
      var ref;
      if (((ref = this.state.items) != null ? ref.length : void 0) > 0) {
        return;
      }
      if (items != null) {
        this.state.items = items;
      }
      if (totalCount != null) {
        this.state.totalCount = totalCount;
      }
      return this.state.page = 1;
    };

    PagingStore.prototype.loadNextPage = function() {
      if (this.state.loading) {
        return;
      }
      this.state.loading = true;
      return this.doLoadNextPage(this.state.page + 1, {
        success: (function(_this) {
          return function(results) {
            if (results.items.length === 0) {
              _this.state.totalCount = _this.state.items.length;
            } else {
              _this.state.page += 1;
              _this.state.items = (_this.state.items || []).concat(results.items);
              _this.state.totalCount = results.totalFound;
            }
            _this.state.loading = false;
            return _this.emit('change');
          };
        })(this),
        error: (function(_this) {
          return function() {
            var err;
            err = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            _this.state.loading = false;
            return _this.emit('change');
          };
        })(this)
      });
    };

    PagingStore.prototype.isLoading = function() {
      return this.state.loading;
    };

    PagingStore.prototype.getItem = function(index) {
      if (!(index >= this.state.items.length)) {
        return this.state.items[index];
      }
      if (index <= this.state.totalCount && this.state.items.length < this.state.totalCount) {
        this.loadNextPage();
      }
      return null;
    };

    PagingStore.prototype.getScrollTop = function() {
      return this.state.scrollTop;
    };

    PagingStore.prototype.setScrollTop = function(scrollTop) {
      return this.state.scrollTop = scrollTop;
    };

    PagingStore.prototype.getLoadedCount = function() {
      var loaded, ref, ref1;
      if (((ref = this.state.items) != null ? ref.length : void 0) == null) {
        return 0;
      }
      loaded = (ref1 = this.state.items) != null ? ref1.length : void 0;
      if (this.state.totalCount > loaded) {
        loaded++;
      }
      return loaded;
    };

    return PagingStore;

  })(Store);

  exports.BrowseStore = BrowseStore = (function(superClass) {
    extend(BrowseStore, superClass);

    function BrowseStore() {
      return BrowseStore.__super__.constructor.apply(this, arguments);
    }

    BrowseStore.prototype.init = function(defaultFilter) {
      var base;
      if (this.state.defaultFilter != null) {
        return;
      }
      this.state.defaultFilter = defaultFilter;
      if ((base = this.state).filter == null) {
        base.filter = defaultFilter;
      }
      return BrowseStore.__super__.init.call(this);
    };

    BrowseStore.prototype.doLoadNextPage = function(page, cb) {
      return this.restClient.post("", {
        filter: this.state.filter,
        pageSize: 10,
        page: page
      }, cb);
    };

    BrowseStore.prototype.search = function() {
      this.reset();
      this.loadNextPage();
      this.emit('change');
      return void 0;
    };

    BrowseStore.prototype.handleFilterChange = function(filterName, newValue) {
      var updates;
      updates = {};
      updates[filterName] = newValue;
      _.merge(this.state.filter, d.formToObj(updates));
      return this.search();
    };

    BrowseStore.prototype.getProfile = function(index) {
      return this.getItem(index);
    };

    BrowseStore.prototype.getFilter = function() {
      return _.cloneDeep(this.state.filter);
    };

    return BrowseStore;

  })(PagingStore);

  exports.PhotosStore = PhotoStore = (function(superClass) {
    extend(PhotoStore, superClass);

    function PhotoStore() {
      return PhotoStore.__super__.constructor.apply(this, arguments);
    }

    PhotoStore.prototype.init = function(photos) {
      if (!this.state.photos) {
        return this.state.photos = photos;
      }
    };

    PhotoStore.prototype.makePrimary = function(guid) {
      return this.restClient.post('/make_primary', {
        guid: guid
      }, (function(_this) {
        return function(results) {
          _this.state.photos = results.photos.photos;
          return _this.emit('change');
        };
      })(this));
    };

    PhotoStore.prototype["delete"] = function(guid) {
      return this.restClient["delete"]('', {
        guid: guid
      }, (function(_this) {
        return function(results) {
          _this.state.photos = results.photos.photos;
          return _this.emit('change');
        };
      })(this));
    };

    PhotoStore.prototype.getPhotos = function() {
      return this.state.photos;
    };

    PhotoStore.prototype.refresh = function() {
      return this.restClient.get("", {}, (function(_this) {
        return function(results) {
          _this.state.photos = results.photos.photos;
          return _this.emit('change');
        };
      })(this));
    };

    return PhotoStore;

  })(Store);

  exports.InboxStore = InboxStore = (function(superClass) {
    extend(InboxStore, superClass);

    function InboxStore() {
      return InboxStore.__super__.constructor.apply(this, arguments);
    }

    InboxStore.prototype.doLoadNextPage = function(page, cb) {
      return this.restClient.post("", {
        pageSize: 10,
        page: this.state.page + 1
      }, cb);
    };

    InboxStore.prototype["delete"] = function(conversationWithGuid) {
      return this.restClient.post("/" + conversationWithGuid + "/delete", null, (function(_this) {
        return function() {
          var conv;
          conv = _.find(_this.state.items, function(conv) {
            return conv.fromProfileGuid === conversationWithGuid;
          });
          if (conv != null) {
            conv.deleted = true;
          }
          return _this.emit('change');
        };
      })(this));
    };

    return InboxStore;

  })(PagingStore);

  exports.ConversationStore = ConversationStore = (function(superClass) {
    extend(ConversationStore, superClass);

    function ConversationStore() {
      return ConversationStore.__super__.constructor.apply(this, arguments);
    }

    ConversationStore.prototype.init = function(conversation) {
      var base;
      if ((base = this.state).conversations == null) {
        base.conversations = {};
      }
      if (conversation == null) {
        return;
      }
      return this.state.conversations[conversation.conversationWithGuid] = conversation;
    };

    ConversationStore.prototype.getConversation = function(conversationWithGuid) {
      return this.state.conversations[conversationWithGuid];
    };

    ConversationStore.prototype.sendMessage = function(conversationWithGuid, text, cb) {
      return this.restClient.put('', {
        text: text
      }, (function(_this) {
        return function() {
          _this.state.conversations[conversationWithGuid].messages.push({
            text: text,
            type: 'sent',
            timestamp: moment().utc()
          });
          cb();
          return _this.emit('change');
        };
      })(this));
    };

    return ConversationStore;

  })(Store);

  exports.NotificationStore = NotificationStore = (function(superClass) {
    extend(NotificationStore, superClass);

    function NotificationStore() {
      return NotificationStore.__super__.constructor.apply(this, arguments);
    }

    NotificationStore.prototype.init = function(counters) {
      return this.state.counters = counters;
    };

    NotificationStore.prototype.updateCounters = function(counters) {
      this.state.counters = counters;
      return this.emit('change');
    };

    NotificationStore.prototype.updateDiscoverCounter = function(value) {
      this.state.counters.newDiscover = value;
      return this.emit('change');
    };

    NotificationStore.prototype.getNewMessages = function() {
      var ref, ref1;
      return (ref = this.state) != null ? (ref1 = ref.counters) != null ? ref1.newMessages : void 0 : void 0;
    };

    NotificationStore.prototype.getNewDiscover = function() {
      var ref, ref1;
      return (ref = this.state) != null ? (ref1 = ref.counters) != null ? ref1.newDiscover : void 0 : void 0;
    };

    NotificationStore.prototype.getNewVisitors = function() {
      var ref, ref1;
      return (ref = this.state) != null ? (ref1 = ref.counters) != null ? ref1.newVisitors : void 0 : void 0;
    };

    NotificationStore.prototype.getNewLikedBy = function() {
      var ref, ref1;
      return (ref = this.state) != null ? (ref1 = ref.counters) != null ? ref1.newLikedBy : void 0 : void 0;
    };

    return NotificationStore;

  })(Store);

  exports.ProfileStore = ProfileStore = (function(superClass) {
    extend(ProfileStore, superClass);

    function ProfileStore() {
      return ProfileStore.__super__.constructor.apply(this, arguments);
    }

    ProfileStore.prototype.flipLikeFlag = function() {
      var action, ref;
      action = ((ref = this.state.flags) != null ? ref.liked : void 0) ? '/unlike' : '/like';
      return this.restClient.post(action, {}, (function(_this) {
        return function(profile) {
          _this.state = profile;
          return _this.emit('change');
        };
      })(this));
    };

    ProfileStore.prototype.hide = function() {
      return this.restClient.post('/hide', {}, (function(_this) {
        return function(profile) {
          _this.state = profile;
          return _this.emit('change');
        };
      })(this));
    };

    ProfileStore.prototype.report = function(reason) {
      return this.restClient.post('/report', {
        reason: reason
      }, (function(_this) {
        return function() {};
      })(this));
    };

    return ProfileStore;

  })(Store);

  exports.DiscoverStore = DiscoverStore = (function(superClass) {
    extend(DiscoverStore, superClass);

    function DiscoverStore() {
      return DiscoverStore.__super__.constructor.apply(this, arguments);
    }

    DiscoverStore.prototype.loadNextProfile = function() {
      var ref;
      if (((ref = this.state.items) != null ? ref.length : void 0) > 0) {
        this.state.lastProfile = this.state.items.shift();
        if (this.state.items.length < 5) {
          this.loadMoreProfiles();
        }
      } else {
        this.loadMoreProfiles();
      }
      return this.emit('change');
    };

    DiscoverStore.prototype.loadMoreProfiles = function() {
      var skipProfiles;
      if (this.state.loading || (this.restClient == null)) {
        return;
      }
      if (this.state.totalFound === 0) {
        return;
      }
      skipProfiles = _.map(this.state.items, function(i) {
        return i.guid;
      });
      skipProfiles = skipProfiles.concat(this.state.pending);
      this.state.loading = true;
      return this.restClient.post('', {
        skipProfiles: skipProfiles
      }, {
        error: (function(_this) {
          return function(err) {
            _this.state.loading = false;
            _this.state.error = true;
            return _this.emit('change');
          };
        })(this),
        success: (function(_this) {
          return function(results) {
            var noProfiles;
            noProfiles = _this.state.items.length === 0;
            _this.state.items = _this.state.items.concat(results.profiles);
            _this.state.totalFound = results.totalFound;
            if (results.profiles.length === 0) {
              _this.state.totalFound = _this.state.items.length;
            }
            _this.state.loading = false;
            return _this.emit('change');
          };
        })(this)
      });
    };

    DiscoverStore.prototype.preload = function(items, totalFound) {
      DiscoverStore.__super__.preload.call(this, {
        items: items,
        totalFound: totalFound
      });
      this.state.pending = [];
      this.state.loading = false;
      return this.emit('change');
    };

    DiscoverStore.prototype.action = function(action) {
      var done, guid, ref;
      guid = (ref = this.getCurrentProfile()) != null ? ref.guid : void 0;
      if (guid == null) {
        return;
      }
      this.state.totalFound--;
      this.state.pending.push(guid);
      done = (function(_this) {
        return function() {
          _this.state.pending = _.without(_this.state.pending, guid);
          return _this.emit('change');
        };
      })(this);
      this.restClient.post(action + "/" + guid, {}, {
        error: done,
        success: done
      });
      return this.loadNextProfile();
    };

    DiscoverStore.prototype.getStatus = function() {
      if (this.state.items.length === 0 && this.state.loading === false) {
        return 'empty';
      } else if ((this.state.items.length === 0 && this.state.loading) || this.state.pending.length > 3) {
        return 'loading';
      } else {
        return 'ok';
      }
    };

    DiscoverStore.prototype.getTotalFound = function() {
      return this.state.totalFound;
    };

    DiscoverStore.prototype.getCurrentProfile = function() {
      var ref;
      return (ref = this.state.items) != null ? ref[0] : void 0;
    };

    DiscoverStore.prototype.like = function() {
      return this.action('/like');
    };

    DiscoverStore.prototype.hide = function() {
      return this.action('/hide');
    };

    return DiscoverStore;

  })(Store);

  exports.ProfileListStore = ProfileListStore = (function(superClass) {
    extend(ProfileListStore, superClass);

    function ProfileListStore() {
      return ProfileListStore.__super__.constructor.apply(this, arguments);
    }

    ProfileListStore.prototype.action = function(action, guid) {
      var done;
      if (guid == null) {
        return;
      }
      done = (function(_this) {
        return function() {
          return _this.emit('change');
        };
      })(this);
      return this.restClient.post("/" + action + "/" + guid, {}, {
        error: done,
        success: done
      });
    };

    ProfileListStore.prototype.doLoadNextPage = function(page, cb) {
      return this.restClient.post("", {
        pageSize: 10,
        page: this.state.page + 1
      }, cb);
    };

    ProfileListStore.prototype.like = function(guid) {
      var profile;
      profile = _.find(this.state.items, function(item) {
        return item.guid === guid;
      });
      if (profile == null) {
        return;
      }
      if (profile.liked !== true) {
        this.action('like', guid);
        profile.liked = true;
        if (profile != null) {
          profile.hidden = false;
        }
      } else {
        this.action('unlike', guid);
        profile.liked = false;
      }
      return void 0;
    };

    ProfileListStore.prototype.hide = function(guid) {
      var profile;
      this.action('hide', guid);
      profile = _.find(this.state.items, function(item) {
        return item.guid === guid;
      });
      if (profile != null) {
        profile.hidden = true;
      }
      if (profile != null) {
        profile.liked = false;
      }
      return void 0;
    };

    ProfileListStore.prototype.block = function(guid) {
      var profile;
      this.action('block', guid);
      profile = _.find(this.state.items, function(item) {
        return item.guid === guid;
      });
      if (profile != null) {
        profile.blocked = true;
      }
      return void 0;
    };

    return ProfileListStore;

  })(PagingStore);

  exports.LocationStore = LocationStore = (function(superClass) {
    extend(LocationStore, superClass);

    function LocationStore() {
      return LocationStore.__super__.constructor.apply(this, arguments);
    }

    LocationStore.prototype.preload = function(locations) {
      return this.state.locations = locations;
    };

    LocationStore.prototype.updateLocations = function(postalCode) {
      if ((postalCode || "").length === 0) {
        return;
      }
      return this.restClient.get("/locations/" + postalCode, {}, (function(_this) {
        return function(locations) {
          _this.state.locations = locations;
          return _this.emit('change');
        };
      })(this));
    };

    LocationStore.prototype.getLocations = function() {
      return this.state.locations || [];
    };

    LocationStore.prototype.getLocation = function(guid) {
      return _.filter(this.state.locations, function(l) {
        return l.guid === guid;
      })[0];
    };

    return LocationStore;

  })(Store);

}).call(this);



},{"./common":5,"events":undefined,"lodash":undefined,"moment":undefined}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var $l, React, _, createFactory, d;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  $l = require('./locale');

  module.exports = createFactory({
    getInitialState: function() {
      return {
        message: ""
      };
    },
    show: function(animate) {
      return this.refs.dialog.show(animate);
    },
    handleCancel: function() {
      this.replaceState(this.getInitialState());
      return this.refs.dialog.hide();
    },
    handleSubmit: function() {
      return this.props.restClient.post('/support', this.state, (function(_this) {
        return function(result) {
          _this.handleCancel();
          if (result.confirmation != null) {
            return alert(result.confirmation);
          }
        };
      })(this));
    },
    handleChange: function(e) {
      var field, value;
      value = $(e.target).val();
      field = $(e.target).attr('name');
      return this.setState(_.object([[field, value]]));
    },
    render: function() {
      return d.ModalDialog({
        ref: 'dialog',
        className: 'support'
      }, d.h4({}, "How can we help you?"), d.textarea({
        name: 'message',
        value: this.state.message,
        placeholder: 'Type your message here',
        onChange: this.handleChange
      }), d.div({
        className: 'buttons'
      }, d.Button({
        onClick: this.handleCancel
      }, "Cancel"), d.Button({
        onClick: this.handleSubmit
      }, "Submit")));
    }
  });

}).call(this);



},{"./canvas":4,"./common":5,"./locale":8,"lodash":undefined,"react":undefined}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var $l, PaymentMethodForm, PricingOption, PurchaseCompleted, React, _, createFactory, d, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  $l = require('./locale');

  PaymentMethodForm = createFactory({
    getInitialState: function() {
      return {};
    },
    handleChange: function(e) {
      var field, value;
      field = $(e.target).attr('name');
      value = $(e.target).val();
      return this.setState(_.object([[field, value]]));
    },
    tokenize: function() {
      var options;
      options = {
        full_name: this.state.name,
        year: "20" + this.state.year,
        month: this.state.month
      };
      Spreedly.tokenizeCreditCard(options);
      return this.setState({
        errorMessages: {}
      });
    },
    componentDidMount: function() {
      return $.getScript("https://core.spreedly.com/iframe/iframe-1.3.min.js", (function(_this) {
        return function() {
          Spreedly.init();
          Spreedly.on('ready', function() {
            var attributes, style, styleMap;
            attributes = ['margin-top', 'margin-bottom', 'padding', 'display', 'width', 'background-color', 'border', 'color', 'font-family', 'font-size', 'font-weight'];
            styleMap = $(_this.refs.name.getDOMNode()).css(attributes);
            style = ("padding: 15px 5px  2px 5px;\ndisplay: inline-block;\nwidth: 100%;\nbackground-color: transparent;\nborder: 0px;\ncolor: black;\nfont-family: " + styleMap['font-family'] + ";\nfont-size: " + styleMap['font-size'] + ";\nfont-weight: " + styleMap['font-weight']).replace(/(\r\n|\n|\r)/gm, '');
            Spreedly.setStyle('number', style);
            Spreedly.setStyle('cvv', style);
            if (_this.props.onReady != null) {
              return _this.props.onReady();
            }
          });
          Spreedly.on('paymentMethod', function(token, pmData) {
            if (_this.props.onTokenized != null) {
              return _this.props.onTokenized(token);
            }
          });
          return Spreedly.on('errors', function(errors) {
            var errorMessages, fieldMap;
            errorMessages = {};
            fieldMap = {
              last_name: 'name',
              first_name: 'name',
              number: 'card',
              year: 'expDate',
              month: 'expDate'
            };
            _.each(errors, function(error) {
              if (error.attribute == null) {
                return;
              }
              return errorMessages[fieldMap[error.attribute] || error.attribute] = $l("upgrade." + error.key);
            });
            _this.setState({
              errorMessages: errorMessages
            });
            if (_this.props.onError != null) {
              return _this.props.onError(errors);
            }
          });
        };
      })(this));
    },
    componentWillUnmount: function() {
      if (window.Spreedly != null) {
        Spreedly.removeHandlers();
        return Spreedly.unload();
      }
    },
    render: function() {
      var ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
      return d.div({
        className: 'payment-method'
      }, d.InputField({
        ref: "name",
        name: "name",
        type: "text",
        placeholder: "Name",
        onChange: this.handleChange,
        defaultValue: (ref = this.state) != null ? ref.name : void 0,
        errorMessage: (ref1 = this.state) != null ? (ref2 = ref1.errorMessages) != null ? ref2.name : void 0 : void 0
      }), d.LabeledField({
        name: 'card',
        label: "Credit Card Number",
        errorMessage: (ref3 = this.state) != null ? (ref4 = ref3.errorMessages) != null ? ref4.card : void 0 : void 0
      }, d.div({
        id: "spreedly-number",
        className: 'spreedly-field'
      })), d.div({
        className: 'card-details'
      }, d.LabeledField({
        name: 'exp-date',
        label: 'Expiration Date',
        errorMessage: (ref5 = this.state) != null ? (ref6 = ref5.errorMessages) != null ? ref6.expDate : void 0 : void 0
      }, d.input({
        ref: "month",
        className: 'field-month',
        name: 'month',
        type: "number",
        min: "1",
        max: "12",
        placeholder: "MM",
        onChange: this.handleChange,
        defaultValue: (ref7 = this.state) != null ? ref7.month : void 0
      }), d.span({
        className: 'separator'
      }, "/"), d.input({
        ref: "year",
        className: 'field-year',
        name: 'year',
        type: "number",
        min: "15",
        max: "30",
        placeholder: "YY",
        onChange: this.handleChange,
        defaultValue: (ref8 = this.state) != null ? ref8.year : void 0
      })), d.LabeledField({
        name: 'cvv',
        label: "CVV",
        errorMessage: (ref9 = this.state) != null ? (ref10 = ref9.errorMessages) != null ? ref10.cvv : void 0 : void 0
      }, d.div({
        id: "spreedly-cvv",
        className: 'spreedly-field'
      }))), d.script({
        'id': "spreedly-iframe",
        'data-environment-key': this.props.environmentKey,
        'data-number-id': "spreedly-number",
        'data-cvv-id': "spreedly-cvv"
      }));
    }
  });

  PurchaseCompleted = createFactory({
    render: function() {
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'upgrade-completed'
      }, d.div({
        className: 'message'
      }, "Your purchase has been completed"), d.Button({
        className: 'continue',
        onClick: this.props.onContinue
      }, "Continue"))));
    }
  });

  exports.PaymentMethod = createFactory({
    getInitialState: function() {
      return {};
    },
    handleError: function() {
      this.refs.submitButton.enable();
      return this.refs.progressBar.hide();
    },
    handleTokenized: function(token) {
      return this.props.restClient.post("/" + token, {}, {
        error: (function(_this) {
          return function() {
            var args, err, i, res;
            res = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), err = arguments[i++];
            _this.setState({
              errorMessage: (err != null ? err.message : void 0) || $l("upgrade.genericError")
            });
            _this.refs.submitButton.enable();
            return _this.refs.progressBar.hide();
          };
        })(this),
        success: (function(_this) {
          return function(features) {
            if (_this.props.onUpdateFeatures != null) {
              _this.props.onUpdateFeatures(features);
            }
            return _this.setState({
              errorMessage: null,
              completed: true
            });
          };
        })(this)
      });
    },
    handleTokenize: function(e) {
      e.preventDefault();
      e.stopPropagation();
      this.refs.submitButton.disable();
      this.refs.paymentMethodForm.tokenize();
      return this.refs.progressBar.show("Processing Payment", 0);
    },
    handleReady: function() {
      return this.refs.submitButton.enable();
    },
    handleLearnMore: function(e) {
      e.preventDefault();
      $(this.refs.learnMore.getDOMNode()).hide();
      return $(this.refs.disclaimer3.getDOMNode()).show();
    },
    handleHideDisclaimer: function(e) {
      e.preventDefault();
      $(this.refs.learnMore.getDOMNode()).show();
      return $(this.refs.disclaimer3.getDOMNode()).hide();
    },
    handleCustomerSupport: function(e) {
      e.preventDefault();
      return this.props.onCustomerSupport(e);
    },
    handleContinue: function(e) {
      var navigateTo, ref;
      navigateTo = ((ref = this.props.route.params) != null ? ref.navigateTo : void 0) || "/browse";
      return this.props.onChangePath(navigateTo);
    },
    render: function() {
      var ref, ref1, ref2;
      if ((ref = this.state) != null ? ref.completed : void 0) {
        return PurchaseCompleted({
          onContinue: this.handleContinue
        });
      }
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.ProgressBar({
        ref: 'progressBar'
      }), d.div({
        className: 'upgrade'
      }, d.div({
        className: "selected-option"
      }, PricingOption({
        showTotal: true,
        type: this.props.upgrade.currentOption,
        option: this.props.upgrade.pricing[this.props.upgrade.currentOption]
      })), ((ref1 = this.state) != null ? ref1.errorMessage : void 0) != null ? d.div({}, d.div({
        className: "error-message alert alert-error"
      }, this.state.errorMessage)) : void 0, d.div({
        ref: 'paymentMethod',
        className: 'payment-method-container'
      }, PaymentMethodForm({
        ref: 'paymentMethodForm',
        onTokenized: this.handleTokenized,
        onReady: this.handleReady,
        onError: this.handleError,
        environmentKey: (ref2 = this.props.upgrade) != null ? ref2.environmentKey : void 0
      }), d.div({
        className: 'disclaimer1'
      }, $l('upgrade.disclaimer1')), d.Button({
        ref: 'submitButton',
        disabled: true,
        onClick: this.handleTokenize
      }, "Subscribe Now"), d.br({}), d.div({
        className: 'disclaimers'
      }, d.div({
        className: 'disclaimer2'
      }, $l('upgrade.disclaimer2'), d.a({
        ref: 'learnMore',
        className: 'learn-more',
        href: '#',
        onClick: this.handleLearnMore
      }, $l('upgrade.learnMore'))), d.br({}), d.div({
        ref: 'disclaimer3',
        className: 'disclaimer3'
      }, $l('upgrade.disclaimer3'), d.a({
        ref: 'here',
        className: 'here',
        href: '#',
        onClick: this.handleCustomerSupport
      }, $l('upgrade.here')), $l('upgrade.disclaimer4'), d.a({
        ref: 'hide',
        className: 'hide',
        href: '#',
        onClick: this.handleHideDisclaimer
      }, $l('upgrade.hide'))))))));
    }
  });

  PricingOption = createFactory({
    render: function() {
      var ref, ref1, ref2, ref3;
      return d.div({
        className: "pricing-option"
      }, ((ref = this.props.option) != null ? (ref1 = ref.flags) != null ? ref1.popular : void 0 : void 0) && this.props.decorate ? d.div({
        className: 'alert'
      }, $l('upgrade.pricing.popular'), d.span({
        className: 'discount'
      }, this.props.option.discount, "%")) : void 0, ((ref2 = this.props.option) != null ? (ref3 = ref2.flags) != null ? ref3.bestValue : void 0 : void 0) && this.props.decorate ? d.div({
        className: 'alert'
      }, $l('upgrade.pricing.bestValue'), d.span({
        className: 'discount'
      }, this.props.option.discount, "%")) : void 0, d.span({
        className: 'description'
      }, this.props.glyphs ? d.Glyph({
        glyph: "hand-o-right"
      }) : void 0, $l("upgrade.pricing." + this.props.type)), d.span.apply(d, [{
        className: 'price'
      }].concat(slice.call(((this.props.option.duration != null) && !this.props.showTotal ? [
        d.span({
          className: "at"
        }, $l("upgrade.pricing.at")), "$", (Math.round(this.props.option.price / this.props.option.duration[0]) / 100).toFixed(2), d.span({
          className: 'per-month'
        }, $l("upgrade.pricing.perMonth"))
      ] : ["$", (this.props.option.price / 100).toFixed(2)])))), this.props.glyphs ? d.Glyph({
        glyph: 'chevron-right'
      }) : void 0);
    }
  });

  exports.Upgrade = createFactory({
    handleClick: function(type, e) {
      return this.props.onChangePath("/upgrade/" + type + (this.props.route.qs || ""));
    },
    render: function() {
      var pricing;
      pricing = _.map(this.props.upgrade.pricing, function(def, name) {
        def.name = name;
        return def;
      });
      pricing = _.sortBy(pricing, function(def) {
        return -def.price;
      });
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'upgrade'
      }, d.h1({}, $l('upgrade.choosePlan')), d.ul.apply(d, [{
        className: 'pricing-options'
      }].concat(slice.call(_.map(pricing, (function(_this) {
        return function(def) {
          if (!def.standalone) {
            return;
          }
          return d.li({
            className: "button"
          }, d.a({
            onClick: _this.handleClick.bind(null, def.name)
          }, PricingOption({
            type: def.name,
            option: def,
            glyphs: true,
            decorate: true
          })));
        };
      })(this))))))));
    }
  });

}).call(this);



},{"./canvas":4,"./common":5,"./locale":8,"./stores":14,"lodash":undefined,"react":undefined}]},{},[1]);
