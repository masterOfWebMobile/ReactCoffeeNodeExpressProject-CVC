// Generated by CoffeeScript 1.9.3
(function() {
  var $l, React, _, createFactory, d, moment, stores,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  moment = require('moment');

  $l = require('./locale');

  exports.ChangePassword = createFactory({
    getInitialState: function() {
      return {};
    },
    handleChange: function(e) {
      var name;
      name = $(e.target).attr('name');
      return this.setState(_.object([[name, $(e.target).val()]]));
    },
    handleSave: function(e) {
      var ref;
      if (!(((ref = this.state.password) != null ? ref.length : void 0) > 0)) {
        return this.setState({
          errorMessage: "Password cannot be blank"
        });
      }
      if (this.state.password !== this.state.confirmPassword) {
        return this.setState({
          errorMessage: "Password must match"
        });
      }
      return this.props.restClient.post('', _.pick(this.state, 'password', 'changePassword'), {
        success: (function(_this) {
          return function() {
            return _this.props.onChangePath('/settings');
          };
        })(this),
        error: (function(_this) {
          return function(res, type, message) {
            return _this.setState({
              errorMessage: message
            });
          };
        })(this)
      });
    },
    render: function() {
      return d.div({
        className: 'outer-container change-password'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'form'
      }, d.div({
        className: "error-message " + (!this.state.errorMessage ? 'no-error' : void 0)
      }, this.state.errorMessage), d.InputField({
        name: 'password',
        type: 'password',
        placeholder: "Password",
        onChange: this.handleChange,
        value: this.state.password
      }), d.InputField({
        name: 'confirmPassword',
        type: 'password',
        placeholder: "Confirm Password",
        onChange: this.handleChange,
        value: this.state.confirmPassword
      }), d.Button({
        className: "large square",
        onClick: this.handleSave
      }, "Save"))));
    }
  });

  exports.EmailPreferences = createFactory({
    getInitialState: function() {
      return _.merge({
        emailAddress: this.props.emailAddress,
        subscribed: this.props.subscribed
      }, _.object(_.map(this.props.preferences, function(def, pref) {
        return ["subscribe_" + pref, indexOf.call(def.mediums, 'email') >= 0];
      })));
    },
    handleChange: function(e) {
      var name, value;
      name = $(e.target).attr('name');
      if ($(e.target).is('input[type=checkbox]')) {
        value = $(e.target).is(':checked');
      } else {
        value = $(e.target).val();
      }
      return this.setState(_.object([[name, value]]));
    },
    handleSave: function(e) {
      var data, ref;
      if (!(((ref = this.state.emailAddress) != null ? ref.length : void 0) > 0)) {
        return this.setState({
          errorMessage: "E-Mail address cannot be blank"
        });
      }
      data = _.pick(this.state, 'emailAddress', 'subscribed');
      data.preferences = _.object(_.map(this.props.preferences, (function(_this) {
        return function(def, pref) {
          return [pref, _this.state["subscribe_" + pref]];
        };
      })(this)));
      return this.props.restClient.post('', data, {
        success: (function(_this) {
          return function() {
            return _this.props.onChangePath('/settings');
          };
        })(this),
        error: (function(_this) {
          return function(res, type, message, errors) {
            var err;
            err = errors[0] || errors;
            if (err != null) {
              message = $l("settings." + err.field + "." + err.type);
            }
            return _this.setState({
              errorMessage: message
            });
          };
        })(this)
      });
    },
    render: function() {
      return d.div({
        className: 'outer-container email-preferences'
      }, d.div({
        className: 'inner-container'
      }, d.div.apply(d, [{
        className: 'form'
      }, d.div({
        className: "error-message " + (!this.state.errorMessage ? 'no-error' : void 0)
      }, this.state.errorMessage), d.InputField({
        name: 'emailAddress',
        placeholder: "Email Address",
        onChange: this.handleChange,
        value: this.state.emailAddress
      }), d.InputField({
        name: 'subscribed',
        type: 'checkbox',
        label: "Yes! I would like to receive emails about the service.",
        onChange: this.handleChange,
        checked: this.state.subscribed
      })].concat(slice.call((this.state.subscribed ? _.map(this.props.preferences, (function(_this) {
        return function(def, pref) {
          return d.InputField({
            name: "subscribe_" + pref,
            type: 'checkbox',
            label: $l("settings.emailPreferences." + pref),
            onChange: _this.handleChange,
            checked: _this.state["subscribe_" + pref]
          });
        };
      })(this)) : [d.h4({}, "You've disabled all emails from CurvesConnect.com!")])), [d.Button({
        className: "large square",
        onClick: this.handleSave
      }, "Save")]))));
    }
  });

  exports.RemoveProfile = createFactory({
    getInitialState: function() {
      return {
        reason: null
      };
    },
    handleChange: function(e) {
      var name;
      name = $(e.target).attr('name');
      return this.setState(_.object([[name, $(e.target).val()]]));
    },
    handleRemove: function(e) {
      return this.props.restClient.post('', _.pick(this.state, 'reason'), {
        success: (function(_this) {
          return function() {};
        })(this),
        error: (function(_this) {
          return function(res, type, message) {
            return _this.setState({
              errorMessage: message
            });
          };
        })(this)
      });
    },
    render: function() {
      return d.div({
        className: 'outer-container remove-profile'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'form'
      }, d.div({}, d.div({
        className: "error-message " + (!this.state.errorMessage ? 'no-error' : void 0)
      }, this.state.errorMessage)), d.Button({
        className: "large square",
        onClick: this.handleRemove
      }, "Remove"))));
    }
  });

  exports.ManageSubscription = createFactory({
    handleCancel: function() {
      return this.props.restClient.post('/cancel', {}, (function(_this) {
        return function(result) {
          return _this.setState({
            subscription: result
          });
        };
      })(this));
    },
    handleStart: function() {
      return this.props.restClient.post('/start', {}, (function(_this) {
        return function(result) {
          return _this.setState({
            subscription: result
          });
        };
      })(this));
    },
    handleSubscribe: function() {
      return this.props.onChangePath("/upgrade");
    },
    handleContinue: function() {
      return this.props.onChangePath("/settings");
    },
    render: function() {
      var ref, subscription, total;
      total = 0;
      subscription = ((ref = this.state) != null ? ref.subscription : void 0) || this.props.subscription;
      return d.div({
        className: 'outer-container manage-subscription'
      }, d.div({
        className: 'inner-container'
      }, d.div.apply(d, [{
        className: 'info'
      }].concat(slice.call(((subscription != null) && (subscription != null ? subscription.autoRenew : void 0) === true ? [
        $l("settings.manageSubscription.scheduledToRenewOn"), d.span({
          className: 'renewal-date'
        }, moment(subscription != null ? subscription.expiresOn : void 0).format("MM/DD/YYYY")), d.Button({
          className: "tiny square cancel",
          onClick: this.handleCancel
        }, $l("settings.manageSubscription.cancelSubscription"))
      ] : subscription != null ? [
        $l("settings.manageSubscription.notScheduledToRenewOn"), d.Button({
          className: "tiny square start",
          onClick: this.handleStart
        }, $l("settings.manageSubscription.startSubscription"))
      ] : [
        $l("settings.manageSubscription.noSubscription"), d.div({}, d.Button({
          className: "square subscribe",
          onClick: this.handleSubscribe
        }, $l('settings.manageSubscription.subscribe')))
      ])))), d.div.apply(d, [{
        className: 'line-items'
      }].concat(slice.call(_.map((subscription != null ? subscription.lineItems : void 0) || [], function(lineItem) {
        total += lineItem.price;
        return d.div({
          className: 'line-item'
        }, d.span({
          className: 'label'
        }, $l("upgrade.pricing." + lineItem.name)), d.span({
          className: 'value'
        }, "$", (lineItem.price / 100).toFixed(2)));
      })), [total > 0 ? d.div({
        className: 'total'
      }, d.span({
        className: 'label'
      }, $l("settings.manageSubscription.total")), d.span({
        className: 'value'
      }, "$", (total / 100).toFixed(2))) : void 0])), d.div({}, d.Button({
        className: "large square continue",
        onClick: this.handleContinue
      }, $l("continue")))));
    }
  });

  exports.Settings = createFactory({
    render: function() {
      var ref;
      return d.div({
        className: 'outer-container settings'
      }, d.div({
        className: 'inner-container'
      }, d.Button({
        className: "square huge",
        onClick: (function(_this) {
          return function() {
            return _this.props.onChangePath("/settings/change_password");
          };
        })(this)
      }, "Change Password"), d.Button({
        className: "square huge",
        onClick: (function(_this) {
          return function() {
            return _this.props.onChangePath("/settings/email_preferences");
          };
        })(this)
      }, "Email Preferences"), ((ref = this.props.features) != null ? ref.billing : void 0) ? d.Button({
        className: "square huge",
        onClick: (function(_this) {
          return function() {
            return _this.props.onChangePath("/settings/manage_subscription");
          };
        })(this)
      }, "Manage Subscription") : void 0, d.Button({
        className: "square huge",
        onClick: (function(_this) {
          return function() {
            return _this.props.onChangePath("/settings/remove_profile");
          };
        })(this)
      }, "Remove Profile")));
    }
  });

}).call(this);

//# sourceMappingURL=settings.js.map
