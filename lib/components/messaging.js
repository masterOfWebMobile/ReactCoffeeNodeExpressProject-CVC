// Generated by CoffeeScript 1.9.3
(function() {
  var $l, React, _, createFactory, d, moment, stores,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  stores = require('./stores');

  moment = require('moment');

  $l = require('./locale');

  exports.Inbox = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.InboxStore()
      };
    },
    handleChange: function() {
      return this.forceUpdate();
    },
    componentDidMount: function() {
      this.props.store.on('change', this.handleChange);
      this.props.store.setRestClient(this.props.restClient);
      return this.props.store.init();
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    handleResize: function() {
      return this.forceUpdate();
    },
    handleClick: function(e) {
      var conv;
      conv = this.props.store.getItem(e.itemIndex);
      if (d.isWithin(e.itemX, e.itemY, this.trashIconStyle)) {
        if (confirm($l("deleteMessageConfirmation").replace(/username/, conv.fromProfile.username))) {
          this.props.store["delete"](conv.fromProfileGuid);
        }
        return;
      }
      return this.props.onChangePath("/conversation/" + conv.fromProfileGuid);
      if ((conv != null ? conv.removed : void 0) !== false) {

      }
    },
    renderConversation: function(index, scrollTop, containerSize, canvas) {
      var conv, height, renderConversation, renderRemovedConversation, renderText, width;
      this.props.store.setScrollTop(scrollTop);
      height = 100;
      width = containerSize.width;
      this.trashIconStyle = {
        fontSize: 24,
        left: width - 35,
        top: 38,
        height: 40,
        width: 35
      };
      renderText = function(text, fontSize, width, height, style) {
        var dims, ff;
        ff = canvas.FontFace('Avenir Next Condensed, Helvetica, sans-serif', null, {
          weight: (style != null ? style.fontWeight : void 0) || 400
        });
        dims = canvas.measureText(text, width, ff, 16, height);
        style = _.merge({}, style, {
          top: 0,
          left: 0,
          fontFace: ff,
          fontSize: fontSize,
          width: dims.width,
          height: dims.height,
          lineHeight: dims.height
        });
        return canvas.Text({
          style: style
        }, dims.lines[0].text);
      };
      renderConversation = (function(_this) {
        return function(conv) {
          var profile, ref, ref1, ref2, ref3, ref4, text, upgradeToRead, url;
          if ((conv != null ? conv.fromProfile : void 0) == null) {
            return renderText("Loading...");
          }
          upgradeToRead = ((ref = _this.props.features.billing) != null ? ref.available : void 0) && !((ref1 = _this.props.features.messaging) != null ? ref1.available : void 0);
          profile = conv.fromProfile;
          if (profile.primaryPhoto != null) {
            url = "" + ((ref2 = profile.primaryPhoto) != null ? ref2.cdnBaseUrl : void 0) + ((ref3 = profile.primaryPhoto) != null ? (ref4 = ref3.urls) != null ? ref4['100x100'] : void 0 : void 0);
          } else {
            url = $l("genericPhotos." + profile.gender);
          }
          text = conv.text;
          if (upgradeToRead) {
            text = $l("messaging.upgradeToRead");
          }
          return canvas.Group({
            style: {
              left: 0,
              top: 0,
              width: width,
              height: height - 1,
              backgroundColor: 'white'
            }
          }, canvas.Image({
            style: {
              top: 0,
              left: 0,
              width: 100,
              height: 99
            },
            src: url
          }), renderText(profile.username, 16, 600, 100, {
            translateY: 10,
            translateX: 110,
            color: 'grey',
            fontWeight: 700
          }), renderText(text.replace(/\n/, ''), 16, 600, 100, {
            translateY: 50,
            translateX: 110,
            color: 'grey'
          }), conv.deleted ? canvas.Group({
            style: {
              left: 0,
              top: 0,
              width: width,
              height: height - 1,
              backgroundColor: 'rgba(150,150,150,.7)'
            }
          }) : !upgradeToRead ? d.CanvasIcon({
            style: _this.trashIconStyle
          }, "\uf014") : void 0);
        };
      })(this);
      renderRemovedConversation = (function(_this) {
        return function(conv) {
          var url;
          if ((conv != null ? conv.fromProfile : void 0) == null) {
            return renderText("Loading...");
          }
          url = $l("genericPhotos." + conv.fromProfile.gender);
          return canvas.Group({
            style: {
              left: 0,
              top: 0,
              width: width,
              height: height - 1,
              backgroundColor: 'rgb(200,200,200)'
            }
          }, canvas.Image({
            style: {
              top: 0,
              left: 0,
              width: 100,
              height: 99
            },
            src: url
          }), renderText(conv.fromProfile.username, 16, 600, 100, {
            translateY: 10,
            translateX: 110,
            color: 'grey',
            fontWeight: 700
          }), renderText($l("removedProfile"), 16, 600, 100, {
            translateY: 50,
            translateX: 110,
            color: 'grey'
          }), conv.deleted ? canvas.Group({
            style: {
              left: 0,
              top: 0,
              width: width,
              height: height - 1,
              backgroundColor: 'rgba(150,150,150,.7)'
            }
          }) : d.CanvasIcon({
            style: _this.trashIconStyle
          }, "\uf014"));
        };
      })(this);
      conv = this.props.store.getItem(index);
      return canvas.Group({
        style: {
          left: 0,
          top: 0,
          width: width,
          height: height,
          backgroundColor: 'black'
        }
      }, (conv != null ? conv.removed : void 0) ? renderRemovedConversation(conv) : renderConversation(conv));
    },
    render: function() {
      return d.div({
        className: 'outer-container'
      }, d.div({
        className: 'inner-container'
      }, d.div({
        className: 'messages-container'
      }, this.props.store.getLoadedCount() === 0 ? this.props.store.isLoading() ? d.div({
        className: 'info-message'
      }, "Loading...") : d.div({
        className: 'info-message'
      }, $l('emptyInbox')) : d.CanvasListView({
        ref: 'listView',
        numberOfItemsGetter: (function(_this) {
          return function() {
            return _this.props.store.getLoadedCount();
          };
        })(this),
        itemHeightGetter: (function(_this) {
          return function() {
            return 100;
          };
        })(this),
        itemGetter: this.renderConversation,
        onClick: this.handleClick,
        onResize: this.handleResize,
        scrollTop: this.props.store.getScrollTop(),
        style: {
          top: '0px'
        }
      }))));
    }
  });

  exports.Conversation = createFactory({
    getDefaultProps: function() {
      return {
        store: new stores.ConversationStore()
      };
    },
    handleChange: function() {
      return this.forceUpdate();
    },
    handleViewProfile: function(e) {
      e.preventDefault();
      return this.props.onChangePath("/profile/" + this.props.conversation.conversationWithGuid);
    },
    componentWillMount: function() {
      var conv, ref;
      this.props.store.init(this.props.conversation);
      conv = this.props.store.getConversation(this.props.conversation.conversationWithGuid);
      return this.setState({
        loadedMessages: conv != null ? (ref = conv.messages) != null ? ref.length : void 0 : void 0
      });
    },
    componentDidMount: function() {
      this.props.store.on('change', this.handleChange);
      return this.props.store.setRestClient(this.props.restClient);
    },
    componentWillUnmount: function() {
      return this.props.store.removeListener('change', this.handleChange);
    },
    componentDidUpdate: function() {
      var node;
      if (this.shouldScrollBottom) {
        node = $('body')[0];
        return node.scrollTop = node.scrollHeight;
      }
    },
    render: function() {
      var conv, messages, previousMessage, profile, ref, ref1, ref2, ref3, ref4, ref5, removedMessages, url;
      conv = this.props.store.getConversation(this.props.conversation.conversationWithGuid);
      profile = conv.profileSummary;
      if (profile == null) {
        return d.div({
          className: 'outer-container'
        }, d.div({
          className: 'inner-container',
          style: {
            paddingTop: 20
          }
        }, d.h2({}, $l('removedProfile'))));
      }
      if (profile.primaryPhoto != null) {
        url = "" + ((ref = profile.primaryPhoto) != null ? ref.cdnBaseUrl : void 0) + ((ref1 = profile.primaryPhoto) != null ? (ref2 = ref1.urls) != null ? ref2['100x100'] : void 0 : void 0);
      } else {
        url = $l("genericPhotos." + profile.gender);
      }
      previousMessage = null;
      messages = conv.messages;
      if (!((ref3 = this.state) != null ? ref3.showAllMessages : void 0)) {
        removedMessages = (((ref4 = this.state) != null ? ref4.loadedMessages : void 0) || messages.length) - 3;
        messages = _.takeRight(messages, messages.length - removedMessages);
      }
      return d.div({
        className: 'outer-container conversation'
      }, d.div({
        className: 'inner-container'
      }, d.a({
        onClick: this.handleViewProfile
      }, d.div({
        className: 'profile-summary'
      }, d.div({
        className: "photo " + this.props.className
      }, d.img({
        width: '100%',
        height: '100%',
        src: url
      })), d.div({
        className: "username"
      }, profile.username), d.div({
        className: "info"
      }, d.span({}, profile.age), d.Bullet({}), d.span({}, profile.city || "United States")))), d.div.apply(d, [{
        className: 'messages'
      }, (removedMessages != null) && removedMessages > 0 ? d.Button({
        className: "see-all-messages",
        onClick: (function(_this) {
          return function() {
            return _this.setState({
              showAllMessages: true
            });
          };
        })(this)
      }, "See " + removedMessages + " older messages") : void 0].concat(slice.call(_.map(messages, (function(_this) {
        return function(message) {
          var previousType;
          previousType = previousMessage != null ? previousMessage.type : void 0;
          previousMessage = message;
          return d.div({
            className: "message " + message.type + " " + previousType + "-" + message.type
          }, message.type === 'received' ? d.div({
            className: "photo"
          }, d.a({
            onClick: _this.handleViewProfile
          }, d.img({
            width: '100%',
            height: '100%',
            src: url
          }))) : void 0, d.div({
            className: "text"
          }, message.text), d.div({
            className: "timestamp"
          }, moment.utc(message.timestamp).from(moment())));
        };
      })(this))))), d.div({
        className: "send-message"
      }, d.textarea({
        placeholder: $l('messaging.sendMessagePlaceholder'),
        ref: 'messageText',
        value: (ref5 = this.state) != null ? ref5.message : void 0,
        onChange: (function(_this) {
          return function(e) {
            return _this.setState({
              message: $(e.target).val()
            });
          };
        })(this)
      }), d.Button({
        className: "pill send tiny",
        onClick: (function(_this) {
          return function() {
            return _this.props.store.sendMessage(conv.conversationWithGuid, _this.state.message, function() {
              _this.shouldScrollBottom = true;
              return _this.setState({
                message: ""
              });
            });
          };
        })(this)
      }, "Send"))));
    }
  });

}).call(this);

//# sourceMappingURL=messaging.js.map
