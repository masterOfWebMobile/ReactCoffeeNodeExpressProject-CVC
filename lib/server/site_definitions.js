// Generated by CoffeeScript 1.9.3
(function() {
  var _,
    slice = [].slice;

  _ = require('lodash');

  exports.SiteDefinitions = function($options) {
    var self;
    return self = _.merge({
      curvesconnect: {
        siteName: 'curvesconnect.com',
        siteUrl: 'curvesconnect.com',
        socialApiDatabase: '',
        supportedLanguages: ['en'],
        googleAnalyticsId: 'UA-65762201-1',
        googleSiteVerification: 'rwOc4pafjMJ3IDvevow3kGzLl-iWIiSYUzC48hGzJzA',
        messageOverrides: {
          common: {
            siteTitle: 'CurvesConnect.com'
          }
        }
      },
      conectandocurvas: {
        siteName: 'conectandocurvas.com',
        siteUrl: 'conectandocurvas.com',
        supportedLanguages: ['sp'],
        googleAnalyticsId: 'UA-65762201-2',
        googleSiteVerification: 'cwBu14JsTbkxM_vUEPZoPNLKVfWcPiqmZ2AfFyyqVqY',
        messageOverrides: {
          common: {
            siteTitle: 'ConectandoCurvas.com'
          }
        }
      }
    }, $options);
  };

  exports.LocalizedMessages = function($p, $u, siteDefinitions) {
    var defaultLanguage, languages, localizedCache, self;
    languages = {
      en: require('../locale/en'),
      sp: require('../locale/sp')
    };
    defaultLanguage = languages.en;
    localizedCache = {};
    return self = {
      getMessageBundle: function(siteKey, language, bundleName) {
        var messages;
        messages = self.getMessages(siteKey, language);
        return messages = languages != null ? languages[language][bundleName] : void 0;
      },
      getMessageBundles: function() {
        var bundleNames, bundles, language, siteKey;
        siteKey = arguments[0], language = arguments[1], bundleNames = 3 <= arguments.length ? slice.call(arguments, 2) : [];
        if (languages[language] == null) {
          bundleNames.shift(language);
          language = null;
        }
        bundles = {};
        _.each(bundleNames, function(bundleName) {
          return bundles[bundleName] = self.getMessageBundle(siteKey, language, bundleName);
        });
        return bundles;
      },
      getMessages: function(siteKey, language) {
        var cacheKey, messages, ref, siteBundle;
        if (language == null) {
          language = siteDefinitions[siteKey].supportedLanguages[0];
        }
        cacheKey = siteKey + "-" + language;
        if (localizedCache[cacheKey] != null) {
          return localizedCache[cacheKey];
        }
        siteBundle = ((ref = siteDefinitions[siteKey]) != null ? ref.messageOverrides : void 0) || {};
        messages = (languages != null ? languages[language] : void 0) || {};
        return localizedCache[cacheKey] = _.merge({}, defaultLanguage, messages, siteBundle);
      }
    };
  };

}).call(this);

//# sourceMappingURL=site_definitions.js.map
