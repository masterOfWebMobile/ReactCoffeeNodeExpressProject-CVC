// Generated by CoffeeScript 1.9.3
(function() {
  var $l, EventEmitter, Header, History, Home, PhotoPlaceholder, Profile, React, Support, _, createFactory, d, findRoute, parseRoute, ref, routes, stores,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  React = require('react');

  d = _.merge(React.DOM, require('./common'), require('./canvas'));

  createFactory = d.createFactory;

  EventEmitter = require('events').EventEmitter;

  stores = require('./stores');

  ref = require('./profile'), Profile = ref.Profile, PhotoPlaceholder = ref.PhotoPlaceholder;

  Support = require('./support');

  $l = require('./locale');

  History = require('./history');

  Header = createFactory({
    propTypes: {
      onChangePath: React.PropTypes.func.isRequired
    },
    componentDidMount: function() {
      return this.props.notificationStore.on('change', this.handleChange);
    },
    componentWillUnmount: function() {
      return this.props.notificationStore.removeListener('change', this.handleChange);
    },
    handleChange: function() {
      return this.forceUpdate();
    },
    handleClick: function(path, e) {
      e.preventDefault();
      this.refs.menu.hide();
      return this.props.onChangePath(path);
    },
    handleSignout: function(e) {
      e.preventDefault();
      this.refs.menu.hide();
      if (confirm($l('signOutConfirmation'))) {
        return this.props.signOut();
      }
    },
    handleHelp: function(e) {
      if (e != null) {
        e.preventDefault();
      }
      this.refs.menu.hide();
      return this.refs.support.show();
    },
    handleShowMenu: function(e) {
      e.preventDefault();
      return this.refs.menu.show();
    },
    render: function() {
      var newDiscover, newLikedBy, newMessages, newVisitors, profile, ref1, ref2, ref3, ref4, showUpgrade;
      profile = this.props.myProfileSummary;
      newMessages = this.props.notificationStore.getNewMessages();
      newDiscover = this.props.notificationStore.getNewDiscover();
      newVisitors = this.props.notificationStore.getNewVisitors();
      newLikedBy = this.props.notificationStore.getNewLikedBy();
      showUpgrade = ((ref1 = this.props.features.billing) != null ? ref1.available : void 0) && !((ref2 = this.props.features.messaging) != null ? ref2.available : void 0);
      return d.div({
        className: "navigation-container" + (showUpgrade ? ' show-upgrade' : '')
      }, Support({
        ref: 'support',
        restClient: this.props.rootRestClient
      }), d.SlidingMenu({
        ref: 'menu'
      }, d.div({
        className: 'logo-white'
      }), showUpgrade ? d.Button({
        className: 'subscribe',
        onClick: this.handleClick.bind(null, '/upgrade')
      }, d.Glyph({
        glyph: 'certificate'
      }), d.span({}, $l('tooltips.subscribe'))) : void 0, d.Button({
        onClick: this.handleClick.bind(null, '/browse')
      }, d.Glyph({
        glyph: 'search'
      }), d.span({}, $l('tooltips.browse'))), d.Button({
        onClick: this.handleClick.bind(null, '/discover')
      }, d.Glyph({
        glyph: 'users'
      }), d.span({}, $l('tooltips.discover')), newDiscover > 0 ? d.span({
        className: 'counter'
      }, newDiscover) : void 0), ((ref3 = this.props.features.liked_by) != null ? ref3.enabled : void 0) ? d.Button({
        onClick: this.handleClick.bind(null, '/liked_by')
      }, d.Glyph({
        glyph: 'star'
      }), d.span({}, $l('tooltips.likedBy')), newLikedBy > 0 ? d.span({
        className: 'counter'
      }, newLikedBy) : void 0) : void 0, d.Button({
        onClick: this.handleClick.bind(null, '/inbox')
      }, d.Glyph({
        glyph: 'envelope'
      }), d.span({}, $l('tooltips.inbox')), newMessages > 0 ? d.span({
        className: 'counter'
      }, newMessages) : void 0), ((ref4 = this.props.features.visitors) != null ? ref4.enabled : void 0) ? d.Button({
        onClick: this.handleClick.bind(null, '/visitors')
      }, d.Glyph({
        glyph: 'eye'
      }), d.span({}, $l('tooltips.visitors')), newVisitors > 0 ? d.span({
        className: 'counter'
      }, newVisitors) : void 0) : void 0, d.Button({
        onClick: this.handleClick.bind(null, '/myprofile')
      }, d.Glyph({
        glyph: {
          M: 'male',
          'F': 'female'
        }[profile.gender]
      }), d.span({}, $l('tooltips.myprofile'))), d.Button({
        onClick: this.handleClick.bind(null, '/photos')
      }, d.Glyph({
        glyph: 'camera'
      }), d.span({}, $l('tooltips.photos'))), d.Button({
        onClick: this.handleClick.bind(null, '/settings')
      }, d.Glyph({
        glyph: 'wrench'
      }), d.span({}, $l('tooltips.settings'))), d.Button({
        onClick: this.handleHelp
      }, d.Glyph({
        glyph: 'question'
      }), d.span({}, $l('tooltips.help'))), d.Button({
        onClick: this.handleSignout
      }, d.Glyph({
        glyph: 'sign-out'
      }), d.span({}, $l('tooltips.signout')))), d.div({
        className: 'header'
      }, d.div({
        className: 'outer'
      }, d.div({
        className: 'inner'
      }, this.props.showBackButton ? d.a({
        className: 'sliding-menu-link',
        href: "#",
        onClick: this.props.onBack
      }, d.Glyph({
        glyph: 'arrow-left'
      })) : d.a({
        className: 'sliding-menu-link',
        href: "#",
        onClick: this.handleShowMenu
      }, d.Glyph({
        glyph: 'bars'
      })), d.div({
        className: 'logo-container'
      }, d.div({
        className: 'clickable long-logo-white',
        onClick: (function(_this) {
          return function() {
            return _this.handleClick.bind(null, '/browse');
          };
        })(this)
      }), d.div({
        className: 'clickable site-name',
        onClick: (function(_this) {
          return function() {
            return _this.handleClick.bind(null, '/browse');
          };
        })(this)
      })), showUpgrade ? d.a({
        className: 'primary button-link',
        title: $l('tooltips.subscribe'),
        href: "#",
        onClick: this.handleClick.bind(null, '/upgrade')
      }, $l("tooltips.subscribe")) : void 0, d.a({
        className: 'secondary circle-link',
        title: $l('tooltips.browse'),
        href: "#",
        onClick: this.handleClick.bind(null, '/browse')
      }, d.Glyph({
        glyph: 'search'
      })), d.div({
        className: 'secondary discover'
      }, d.a({
        className: 'circle-link',
        title: $l('tooltips.discover'),
        href: "#",
        onClick: this.handleClick.bind(null, '/discover')
      }, d.Glyph({
        glyph: 'users'
      })), newDiscover > 0 ? d.span({
        className: 'counter'
      }, newDiscover < 100 ? newDiscover : "99+") : void 0), d.div({
        className: 'secondary inbox'
      }, d.a({
        className: 'circle-link',
        title: $l('tooltips.inbox'),
        href: "#",
        onClick: this.handleClick.bind(null, '/inbox')
      }, d.Glyph({
        glyph: 'envelope'
      })), newMessages > 0 ? d.span({
        className: 'counter'
      }, newMessages) : void 0), d.a({
        className: 'other circle-link',
        title: $l('tooltips.myprofile'),
        href: "#",
        onClick: this.handleClick.bind(null, '/myprofile')
      }, d.Glyph({
        glyph: {
          M: 'male',
          'F': 'female'
        }[profile.gender]
      })), d.a({
        className: 'other circle-link',
        title: $l('tooltips.settings'),
        href: "#",
        onClick: this.handleClick.bind(null, '/settings')
      }, d.Glyph({
        glyph: 'wrench'
      })), d.a({
        className: 'other circle-link',
        title: $l('tooltips.signout'),
        href: "#",
        onClick: this.handleSignout
      }, d.Glyph({
        glyph: 'sign-out'
      }))))));
    }
  });

  Home = createFactory({
    getIntlMessage: function(key) {
      return key;
    },
    render: function() {
      return d.div.apply(d, [{
        className: 'home'
      }].concat(slice.call([d.h1({}, "Welcome [" + this.props.accountGuid + "] to " + (this.getIntlMessage('common.siteTitle')) + "! Looking at " + this.props.path)])));
    }
  });

  routes = {
    '^\/$': {
      component: Home
    },
    '^\/upload_photo$': {
      component: require('./photos'),
      props: {
        continueTo: '/'
      },
      showBackButton: true
    },
    '^\/photos$': {
      component: require('./photos'),
      dataPath: 'photos',
      showBackButton: true
    },
    '^\/browse$': {
      component: require('./browse'),
      dataPath: 'browse',
      store: stores.BrowseStore
    },
    '^\/profile\/.*$': {
      component: Profile,
      dataPath: 'profile',
      showBackButton: true
    },
    '^\/myprofile$': {
      component: Profile,
      dataPath: 'profile',
      props: {
        editable: true
      }
    },
    '^\/inbox$': {
      component: require('./messaging').Inbox,
      dataPath: 'inbox'
    },
    '^\/conversation\/.*$': {
      component: require('./messaging').Conversation,
      dataPath: 'conversation',
      showBackButton: true
    },
    '^\/discover$': {
      component: require('./discover').Discover,
      dataPath: 'discover'
    },
    '^\/liked_by$': {
      component: require('./profile_list').LikedBy,
      dataPath: 'likedBy'
    },
    '^\/visitors$': {
      component: require('./profile_list').Visitors,
      dataPath: 'likedBy'
    },
    '^\/upgrade$': {
      component: require('./upgrade').Upgrade,
      dataPath: 'upgrade',
      showBackButton: true
    },
    '^\/upgrade\/.*$': {
      component: require('./upgrade').PaymentMethod,
      dataPath: 'upgrade',
      showBackButton: true
    },
    '^\/settings$': {
      component: require('./settings').Settings
    },
    '^\/settings/change_password$': {
      component: require('./settings').ChangePassword,
      showBackButton: true
    },
    '^\/settings/email_preferences$': {
      component: require('./settings').EmailPreferences,
      dataPath: 'emailPreferences',
      showBackButton: true
    },
    '^\/settings/remove_profile$': {
      component: require('./settings').RemoveProfile,
      dataPath: 'removeProfile',
      showBackButton: true
    },
    '^\/settings/manage_subscription$': {
      component: require('./settings').ManageSubscription,
      dataPath: 'subscription',
      showBackButton: true
    }
  };

  parseRoute = function(path) {
    var params, parsed;
    parsed = path.match(/([^?]*)($|\?(.*)$)/);
    params = parsed != null ? parsed[3] : void 0;
    if (params != null) {
      params = _.object(_.map(params.split("&"), function(kv) {
        var pairs;
        pairs = kv.split("=");
        if (pairs[1] != null) {
          pairs[1] = decodeURIComponent(pairs[1]);
        }
        return pairs;
      }));
    }
    return {
      route: parsed != null ? parsed[1] : void 0,
      qs: parsed != null ? parsed[2] : void 0,
      params: params
    };
  };

  findRoute = function(path) {
    var def, r, route;
    route = parseRoute(path).route;
    for (r in routes) {
      if (!hasProp.call(routes, r)) continue;
      def = routes[r];
      if (route.match(RegExp(r)) != null) {
        return def;
      }
    }
  };

  module.exports = createFactory({
    getDefaultProps: function() {
      return {
        notificationStore: new stores.NotificationStore()
      };
    },
    getInitialState: function() {
      return _.omit(this.props, 'messages', 'notificationStore');
    },
    componentWillMount: function() {
      $l.setMessages(this.props.messages);
      this.props.notificationStore.init(this.props.counters);
      return d.setCookies(this.props.cookies);
    },
    componentDidMount: function() {
      this.pushStateEnabled = (typeof history !== "undefined" && history !== null ? history.pushState : void 0) != null;
      React.initializeTouchEvents(true);
      this.historyCounter = 0;
      this.errorCounter = 0;
      window.onerror = (function(_this) {
        return function(errorMessage, url, lineNumber, columnNumber, errObject) {
          var info;
          if (_this.errorCounter++ > 5) {
            return;
          }
          info = {
            message: errorMessage,
            stackTrace: errObject != null ? errObject.stack : void 0
          };
          return _this.ajax("/javascript_error", "POST", info);
        };
      })(this);
      window.gaReady = (function(_this) {
        return function() {
          return _this.trackPageview(window.location.pathname || window.location.toString());
        };
      })(this);
      if (this.pushStateEnabled) {
        History.mount(window);
        return History.on('popState', (function(_this) {
          return function(state, title, url) {
            _this.historyCounter--;
            state = _.merge(state, {
              backNavigation: true
            });
            return _this.setState(state);
          };
        })(this));
      }
    },
    ajax: function(url, type, data, callbacks) {
      var headers;
      if (_.isFunction(callbacks)) {
        callbacks = {
          success: callbacks,
          error: (function(_this) {
            return function(xhr, status, err) {
              return _this.setState({
                successMessage: void 0,
                errorMessage: xhr.responseText || "Unable to process request, please try again later!"
              });
            };
          })(this)
        };
      }
      headers = {
        'local-cookies': JSON.stringify(this.props.cookies)
      };
      if (type === 'GET') {
        if (url.indexOf("?") >= 0) {
          url += "&" + (Math.random());
        } else {
          url += "?" + (Math.random());
        }
      }
      return $.ajax({
        url: url,
        type: type,
        accepts: 'application/json',
        dataType: 'json',
        data: data,
        headers: headers,
        success: (function(_this) {
          return function() {
            var args, newUrl, ref1, ref2, ref3, ref4;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            if (((ref1 = args[2]) != null ? ref1.getAllResponseHeaders : void 0) != null) {
              newUrl = (ref2 = args[2]) != null ? ref2.getResponseHeader('change-location') : void 0;
              if ((newUrl != null ? newUrl.length : void 0) > 0) {
                window.location = newUrl;
                return;
              }
            }
            if (((ref3 = args[0]) != null ? ref3._redirectTo : void 0) != null) {
              return _this.handleChangePath((ref4 = args[0]) != null ? ref4._redirectTo : void 0);
            } else {
              if ((callbacks != null ? callbacks.success : void 0) != null) {
                return callbacks.success.apply(callbacks, args);
              }
            }
          };
        })(this),
        error: function() {
          var args, err, res;
          res = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          err = res.responseJSON;
          err = (err != null ? err.errors : void 0) || err;
          if ((err != null) && _.isArray(err) && err.length === 0) {
            err = null;
          }
          if ((callbacks != null ? callbacks.error : void 0) != null) {
            return callbacks.error.apply(callbacks, [res].concat(slice.call(args), [err]));
          }
        }
      });
    },
    trackPageview: function(pageUrl) {
      if (pageUrl == null) {
        pageUrl = "";
      }
      pageUrl = pageUrl.replace(/\?.*/, '');
      pageUrl = pageUrl.replace(/\/profile\/.*/, '/profile');
      pageUrl = pageUrl.replace(/\/conversation\/.*/, '/conversation');
      if (window.ga != null) {
        window.ga('set', 'page', pageUrl);
        return window.ga('send', 'pageview');
      }
    },
    handleChangePath: function(newPath, force) {
      var newUrl, route;
      route = findRoute(newPath);
      newUrl = "/app" + newPath;
      if (!this.pushStateEnabled) {
        return window.location = newUrl;
      }
      History.replaceState(this.state, "", window.location);
      return this.ajax(newUrl, "GET", null, (function(_this) {
        return function(newState) {
          if (_this.props.version !== newState.version) {
            return window.location = newUrl;
          }
          newState.backNavigation = false;
          newState.path = newPath;
          _this.props.notificationStore.updateCounters(newState.counters);
          newState.errorMessage = null;
          History.pushState(newState, "", newUrl);
          _this.historyCounter++;
          _this.trackPageview(newUrl);
          _this.forceUpdate = true;
          return _this.setState(newState);
        };
      })(this));
    },
    handleBack: function() {
      return History.back();
    },
    shouldComponentUpdate: function(nextProps, nextState) {
      return this.state.path !== nextState.path || this.forceUpdate;
    },
    render: function() {
      var componentProps, dataPath, dataProps, defaultCallbacks, primaryComponent, restClient, restClientFactory, rootRestClient, route, sharedProps;
      this.forceUpdate = false;
      route = parseRoute(this.state.path);
      primaryComponent = findRoute(route.route);
      defaultCallbacks = (function(_this) {
        return function(newState) {
          newState = _.omit(newState, 'path');
          return _this.setState(newState);
        };
      })(this);
      dataPath = primaryComponent.dataPath;
      restClientFactory = (function(_this) {
        return function(path, _defaultCallbacks) {
          return {
            get: function(url, data, callbacks) {
              return _this.ajax("/app" + path + url, "GET", data, callbacks || _defaultCallbacks);
            },
            post: function(url, data, callbacks) {
              return _this.ajax("/app" + path + url, "POST", data, callbacks || _defaultCallbacks);
            },
            put: function(url, data, callbacks) {
              return _this.ajax("/app" + path + url, "PUT", data, callbacks || _defaultCallbacks);
            },
            "delete": function(url, data, callbacks) {
              return _this.ajax("/app" + path + url, "DELETE", data, callbacks || _defaultCallbacks);
            }
          };
        };
      })(this);
      restClient = restClientFactory(route.route, defaultCallbacks);
      rootRestClient = restClientFactory("");
      console.log(this.historyCounter);
      sharedProps = {
        backNavigation: this.state.backNavigation || false,
        accountGuid: this.props.accountGuid,
        onChangePath: this.handleChangePath,
        path: this.state.path,
        route: route,
        restClient: restClient,
        rootRestClient: rootRestClient,
        myProfileSummary: this.props.myProfileSummary,
        notificationStore: this.props.notificationStore,
        features: this.state.features || this.props.features,
        showBackButton: this.historyCounter > 0 && primaryComponent.showBackButton,
        onBack: this.handleBack,
        onUpdateFeatures: (function(_this) {
          return function(features) {
            return _this.setState({
              features: features
            });
          };
        })(this),
        onCustomerSupport: (function(_this) {
          return function() {
            return _this.refs.header.handleHelp();
          };
        })(this),
        signOut: (function(_this) {
          return function() {
            $("<form id='sign-out' method='post' action='/signout' style='display:none'></form>").appendTo('body');
            return $('#sign-out').submit();
          };
        })(this)
      };
      dataProps = _.cloneDeep(this.state[primaryComponent.dataPath] || {});
      componentProps = _.merge({
        ref: 'primaryComponent'
      }, sharedProps, restClient, primaryComponent.props || {}, dataProps || {});
      return d.div({
        className: 'app-body curvesconnect'
      }, d.div({
        className: 'background'
      }, d.div({
        className: 'outer'
      }, d.div({
        className: 'inner'
      }))), d.div({
        className: 'outer'
      }, d.div({
        className: 'inner'
      }, this.state.errorMessage != null ? d.div({
        style: {
          color: 'red'
        }
      }, this.state.errorMessage) : void 0, this.state.successMessage != null ? d.div({
        style: {
          color: 'green'
        }
      }, this.state.errorMessage) : void 0, Header(_.merge({
        ref: 'header',
        myProfileSummary: this.props.myProfileSummary
      }, sharedProps)), primaryComponent.component(componentProps))));
    }
  });

}).call(this);

//# sourceMappingURL=app.js.map
