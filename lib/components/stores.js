// Generated by CoffeeScript 1.9.3
(function() {
  var BrowseStore, ConversationStore, DiscoverStore, EventEmitter, InboxStore, LocationStore, NotificationStore, PagingStore, PhotoStore, ProfileListStore, ProfileStore, Store, _, d, moment,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  _ = require('lodash');

  d = require('./common');

  moment = require('moment');

  Store = Store = (function(superClass) {
    extend(Store, superClass);

    function Store() {
      this.state = {};
    }

    Store.prototype.setRestClient = function(restClient) {
      return this.restClient = restClient;
    };

    Store.prototype.preload = function(state) {
      return this.state = state;
    };

    Store.prototype.getState = function() {
      return _.cloneDeep(this.state);
    };

    return Store;

  })(EventEmitter);

  PagingStore = PagingStore = (function(superClass) {
    extend(PagingStore, superClass);

    function PagingStore() {
      return PagingStore.__super__.constructor.apply(this, arguments);
    }

    PagingStore.prototype.reset = function() {
      this.state.items = [];
      this.state.totalCount = 0;
      this.state.loading = false;
      this.state.page = 0;
      return this.state.scrollTop = 0;
    };

    PagingStore.prototype.init = function() {
      var ref, ref1;
      if (((ref = this.state) != null ? (ref1 = ref.items) != null ? ref1.length : void 0 : void 0) > 0) {
        return;
      }
      this.reset();
      return this.loadNextPage();
    };

    PagingStore.prototype.preload = function(items, totalCount) {
      var ref;
      if (((ref = this.state.items) != null ? ref.length : void 0) > 0) {
        return;
      }
      if (items != null) {
        this.state.items = items;
      }
      if (totalCount != null) {
        this.state.totalCount = totalCount;
      }
      return this.state.page = 1;
    };

    PagingStore.prototype.loadNextPage = function() {
      if (this.state.loading) {
        return;
      }
      this.state.loading = true;
      return this.doLoadNextPage(this.state.page + 1, {
        success: (function(_this) {
          return function(results) {
            if (results.items.length === 0) {
              _this.state.totalCount = _this.state.items.length;
            } else {
              _this.state.page += 1;
              _this.state.items = (_this.state.items || []).concat(results.items);
              _this.state.totalCount = results.totalFound;
            }
            _this.state.loading = false;
            return _this.emit('change');
          };
        })(this),
        error: (function(_this) {
          return function() {
            var err;
            err = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            _this.state.loading = false;
            return _this.emit('change');
          };
        })(this)
      });
    };

    PagingStore.prototype.isLoading = function() {
      return this.state.loading;
    };

    PagingStore.prototype.getItem = function(index) {
      if (!(index >= this.state.items.length)) {
        return this.state.items[index];
      }
      if (index <= this.state.totalCount && this.state.items.length < this.state.totalCount) {
        this.loadNextPage();
      }
      return null;
    };

    PagingStore.prototype.getScrollTop = function() {
      return this.state.scrollTop;
    };

    PagingStore.prototype.setScrollTop = function(scrollTop) {
      return this.state.scrollTop = scrollTop;
    };

    PagingStore.prototype.getLoadedCount = function() {
      var loaded, ref, ref1;
      if (((ref = this.state.items) != null ? ref.length : void 0) == null) {
        return 0;
      }
      loaded = (ref1 = this.state.items) != null ? ref1.length : void 0;
      if (this.state.totalCount > loaded) {
        loaded++;
      }
      return loaded;
    };

    return PagingStore;

  })(Store);

  exports.BrowseStore = BrowseStore = (function(superClass) {
    extend(BrowseStore, superClass);

    function BrowseStore() {
      return BrowseStore.__super__.constructor.apply(this, arguments);
    }

    BrowseStore.prototype.init = function(defaultFilter) {
      var base;
      if (this.state.defaultFilter != null) {
        return;
      }
      this.state.defaultFilter = defaultFilter;
      if ((base = this.state).filter == null) {
        base.filter = defaultFilter;
      }
      return BrowseStore.__super__.init.call(this);
    };

    BrowseStore.prototype.doLoadNextPage = function(page, cb) {
      return this.restClient.post("", {
        filter: this.state.filter,
        pageSize: 10,
        page: page
      }, cb);
    };

    BrowseStore.prototype.search = function() {
      this.reset();
      this.loadNextPage();
      this.emit('change');
      return void 0;
    };

    BrowseStore.prototype.handleFilterChange = function(filterName, newValue) {
      var updates;
      updates = {};
      updates[filterName] = newValue;
      _.merge(this.state.filter, d.formToObj(updates));
      return this.search();
    };

    BrowseStore.prototype.getProfile = function(index) {
      return this.getItem(index);
    };

    BrowseStore.prototype.getFilter = function() {
      return _.cloneDeep(this.state.filter);
    };

    return BrowseStore;

  })(PagingStore);

  exports.PhotosStore = PhotoStore = (function(superClass) {
    extend(PhotoStore, superClass);

    function PhotoStore() {
      return PhotoStore.__super__.constructor.apply(this, arguments);
    }

    PhotoStore.prototype.init = function(photos) {
      if (!this.state.photos) {
        return this.state.photos = photos;
      }
    };

    PhotoStore.prototype.makePrimary = function(guid) {
      return this.restClient.post('/make_primary', {
        guid: guid
      }, (function(_this) {
        return function(results) {
          _this.state.photos = results.photos.photos;
          return _this.emit('change');
        };
      })(this));
    };

    PhotoStore.prototype["delete"] = function(guid) {
      return this.restClient["delete"]('', {
        guid: guid
      }, (function(_this) {
        return function(results) {
          _this.state.photos = results.photos.photos;
          return _this.emit('change');
        };
      })(this));
    };

    PhotoStore.prototype.getPhotos = function() {
      return this.state.photos;
    };

    PhotoStore.prototype.refresh = function() {
      return this.restClient.get("", {}, (function(_this) {
        return function(results) {
          _this.state.photos = results.photos.photos;
          return _this.emit('change');
        };
      })(this));
    };

    return PhotoStore;

  })(Store);

  exports.InboxStore = InboxStore = (function(superClass) {
    extend(InboxStore, superClass);

    function InboxStore() {
      return InboxStore.__super__.constructor.apply(this, arguments);
    }

    InboxStore.prototype.doLoadNextPage = function(page, cb) {
      return this.restClient.post("", {
        pageSize: 10,
        page: this.state.page + 1
      }, cb);
    };

    InboxStore.prototype["delete"] = function(conversationWithGuid) {
      return this.restClient.post("/" + conversationWithGuid + "/delete", null, (function(_this) {
        return function() {
          var conv;
          conv = _.find(_this.state.items, function(conv) {
            return conv.fromProfileGuid === conversationWithGuid;
          });
          if (conv != null) {
            conv.deleted = true;
          }
          return _this.emit('change');
        };
      })(this));
    };

    return InboxStore;

  })(PagingStore);

  exports.ConversationStore = ConversationStore = (function(superClass) {
    extend(ConversationStore, superClass);

    function ConversationStore() {
      return ConversationStore.__super__.constructor.apply(this, arguments);
    }

    ConversationStore.prototype.init = function(conversation) {
      var base;
      if ((base = this.state).conversations == null) {
        base.conversations = {};
      }
      if (conversation == null) {
        return;
      }
      return this.state.conversations[conversation.conversationWithGuid] = conversation;
    };

    ConversationStore.prototype.getConversation = function(conversationWithGuid) {
      return this.state.conversations[conversationWithGuid];
    };

    ConversationStore.prototype.sendMessage = function(conversationWithGuid, text, cb) {
      return this.restClient.put('', {
        text: text
      }, (function(_this) {
        return function() {
          _this.state.conversations[conversationWithGuid].messages.push({
            text: text,
            type: 'sent',
            timestamp: moment().utc()
          });
          cb();
          return _this.emit('change');
        };
      })(this));
    };

    return ConversationStore;

  })(Store);

  exports.NotificationStore = NotificationStore = (function(superClass) {
    extend(NotificationStore, superClass);

    function NotificationStore() {
      return NotificationStore.__super__.constructor.apply(this, arguments);
    }

    NotificationStore.prototype.init = function(counters) {
      return this.state.counters = counters;
    };

    NotificationStore.prototype.updateCounters = function(counters) {
      this.state.counters = counters;
      return this.emit('change');
    };

    NotificationStore.prototype.updateDiscoverCounter = function(value) {
      this.state.counters.newDiscover = value;
      return this.emit('change');
    };

    NotificationStore.prototype.getNewMessages = function() {
      var ref, ref1;
      return (ref = this.state) != null ? (ref1 = ref.counters) != null ? ref1.newMessages : void 0 : void 0;
    };

    NotificationStore.prototype.getNewDiscover = function() {
      var ref, ref1;
      return (ref = this.state) != null ? (ref1 = ref.counters) != null ? ref1.newDiscover : void 0 : void 0;
    };

    NotificationStore.prototype.getNewVisitors = function() {
      var ref, ref1;
      return (ref = this.state) != null ? (ref1 = ref.counters) != null ? ref1.newVisitors : void 0 : void 0;
    };

    NotificationStore.prototype.getNewLikedBy = function() {
      var ref, ref1;
      return (ref = this.state) != null ? (ref1 = ref.counters) != null ? ref1.newLikedBy : void 0 : void 0;
    };

    return NotificationStore;

  })(Store);

  exports.ProfileStore = ProfileStore = (function(superClass) {
    extend(ProfileStore, superClass);

    function ProfileStore() {
      return ProfileStore.__super__.constructor.apply(this, arguments);
    }

    ProfileStore.prototype.flipLikeFlag = function() {
      var action, ref;
      action = ((ref = this.state.flags) != null ? ref.liked : void 0) ? '/unlike' : '/like';
      return this.restClient.post(action, {}, (function(_this) {
        return function(profile) {
          _this.state = profile;
          return _this.emit('change');
        };
      })(this));
    };

    ProfileStore.prototype.hide = function() {
      return this.restClient.post('/hide', {}, (function(_this) {
        return function(profile) {
          _this.state = profile;
          return _this.emit('change');
        };
      })(this));
    };

    ProfileStore.prototype.report = function(reason) {
      return this.restClient.post('/report', {
        reason: reason
      }, (function(_this) {
        return function() {};
      })(this));
    };

    return ProfileStore;

  })(Store);

  exports.DiscoverStore = DiscoverStore = (function(superClass) {
    extend(DiscoverStore, superClass);

    function DiscoverStore() {
      return DiscoverStore.__super__.constructor.apply(this, arguments);
    }

    DiscoverStore.prototype.loadNextProfile = function() {
      var ref;
      if (((ref = this.state.items) != null ? ref.length : void 0) > 0) {
        this.state.lastProfile = this.state.items.shift();
        if (this.state.items.length < 5) {
          this.loadMoreProfiles();
        }
      } else {
        this.loadMoreProfiles();
      }
      return this.emit('change');
    };

    DiscoverStore.prototype.loadMoreProfiles = function() {
      var skipProfiles;
      if (this.state.loading || (this.restClient == null)) {
        return;
      }
      if (this.state.totalFound === 0) {
        return;
      }
      skipProfiles = _.map(this.state.items, function(i) {
        return i.guid;
      });
      skipProfiles = skipProfiles.concat(this.state.pending);
      this.state.loading = true;
      return this.restClient.post('', {
        skipProfiles: skipProfiles
      }, {
        error: (function(_this) {
          return function(err) {
            _this.state.loading = false;
            _this.state.error = true;
            return _this.emit('change');
          };
        })(this),
        success: (function(_this) {
          return function(results) {
            var noProfiles;
            noProfiles = _this.state.items.length === 0;
            _this.state.items = _this.state.items.concat(results.profiles);
            _this.state.totalFound = results.totalFound;
            if (results.profiles.length === 0) {
              _this.state.totalFound = _this.state.items.length;
            }
            _this.state.loading = false;
            return _this.emit('change');
          };
        })(this)
      });
    };

    DiscoverStore.prototype.preload = function(items, totalFound) {
      DiscoverStore.__super__.preload.call(this, {
        items: items,
        totalFound: totalFound
      });
      this.state.pending = [];
      this.state.loading = false;
      return this.emit('change');
    };

    DiscoverStore.prototype.action = function(action) {
      var done, guid, ref;
      guid = (ref = this.getCurrentProfile()) != null ? ref.guid : void 0;
      if (guid == null) {
        return;
      }
      this.state.totalFound--;
      this.state.pending.push(guid);
      done = (function(_this) {
        return function() {
          _this.state.pending = _.without(_this.state.pending, guid);
          return _this.emit('change');
        };
      })(this);
      this.restClient.post(action + "/" + guid, {}, {
        error: done,
        success: done
      });
      return this.loadNextProfile();
    };

    DiscoverStore.prototype.getStatus = function() {
      if (this.state.items.length === 0 && this.state.loading === false) {
        return 'empty';
      } else if ((this.state.items.length === 0 && this.state.loading) || this.state.pending.length > 3) {
        return 'loading';
      } else {
        return 'ok';
      }
    };

    DiscoverStore.prototype.getTotalFound = function() {
      return this.state.totalFound;
    };

    DiscoverStore.prototype.getCurrentProfile = function() {
      var ref;
      return (ref = this.state.items) != null ? ref[0] : void 0;
    };

    DiscoverStore.prototype.like = function() {
      return this.action('/like');
    };

    DiscoverStore.prototype.hide = function() {
      return this.action('/hide');
    };

    return DiscoverStore;

  })(Store);

  exports.ProfileListStore = ProfileListStore = (function(superClass) {
    extend(ProfileListStore, superClass);

    function ProfileListStore() {
      return ProfileListStore.__super__.constructor.apply(this, arguments);
    }

    ProfileListStore.prototype.action = function(action, guid) {
      var done;
      if (guid == null) {
        return;
      }
      done = (function(_this) {
        return function() {
          return _this.emit('change');
        };
      })(this);
      return this.restClient.post("/" + action + "/" + guid, {}, {
        error: done,
        success: done
      });
    };

    ProfileListStore.prototype.doLoadNextPage = function(page, cb) {
      return this.restClient.post("", {
        pageSize: 10,
        page: this.state.page + 1
      }, cb);
    };

    ProfileListStore.prototype.like = function(guid) {
      var profile;
      profile = _.find(this.state.items, function(item) {
        return item.guid === guid;
      });
      if (profile == null) {
        return;
      }
      if (profile.liked !== true) {
        this.action('like', guid);
        profile.liked = true;
        if (profile != null) {
          profile.hidden = false;
        }
      } else {
        this.action('unlike', guid);
        profile.liked = false;
      }
      return void 0;
    };

    ProfileListStore.prototype.hide = function(guid) {
      var profile;
      this.action('hide', guid);
      profile = _.find(this.state.items, function(item) {
        return item.guid === guid;
      });
      if (profile != null) {
        profile.hidden = true;
      }
      if (profile != null) {
        profile.liked = false;
      }
      return void 0;
    };

    ProfileListStore.prototype.block = function(guid) {
      var profile;
      this.action('block', guid);
      profile = _.find(this.state.items, function(item) {
        return item.guid === guid;
      });
      if (profile != null) {
        profile.blocked = true;
      }
      return void 0;
    };

    return ProfileListStore;

  })(PagingStore);

  exports.LocationStore = LocationStore = (function(superClass) {
    extend(LocationStore, superClass);

    function LocationStore() {
      return LocationStore.__super__.constructor.apply(this, arguments);
    }

    LocationStore.prototype.preload = function(locations) {
      return this.state.locations = locations;
    };

    LocationStore.prototype.updateLocations = function(postalCode) {
      if ((postalCode || "").length === 0) {
        return;
      }
      return this.restClient.get("/locations/" + postalCode, {}, (function(_this) {
        return function(locations) {
          _this.state.locations = locations;
          return _this.emit('change');
        };
      })(this));
    };

    LocationStore.prototype.getLocations = function() {
      return this.state.locations || [];
    };

    LocationStore.prototype.getLocation = function(guid) {
      return _.filter(this.state.locations, function(l) {
        return l.guid === guid;
      })[0];
    };

    return LocationStore;

  })(Store);

}).call(this);

//# sourceMappingURL=stores.js.map
