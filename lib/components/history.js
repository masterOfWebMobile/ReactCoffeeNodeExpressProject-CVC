// Generated by CoffeeScript 1.9.3
(function() {
  var EventEmitter, History, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  _ = require('lodash');

  History = (function(superClass) {
    var _history, backOffset, backSupported, currentId, states;

    extend(History, superClass);

    function History() {
      return History.__super__.constructor.apply(this, arguments);
    }

    currentId = 0;

    states = [];

    _history = void 0;

    backSupported = false;

    backOffset = 0;

    History.prototype.mount = function(window) {
      if (window.history == null) {
        return;
      }
      backSupported = !((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)));
      _history = window.history;
      return window.addEventListener('popstate', (function(_this) {
        return function(e) {
          var entry;
          if (e.state != null) {
            currentId = e.state - backOffset;
            entry = states[currentId];
            if (entry == null) {
              return;
            }
            _this.emit('popState', _.cloneDeep(entry.state), entry.title, entry.url);
          }
        };
      })(this));
    };

    History.prototype.replaceState = function(state, title, url) {
      states[currentId] = {
        state: _.cloneDeep(state),
        title: title,
        url: url
      };
      if (_history != null) {
        _history.replaceState(currentId, title, url);
      }
    };

    History.prototype.pushState = function(state, title, url) {
      currentId++;
      backOffset = 0;
      states[currentId] = {
        state: _.cloneDeep(state),
        title: title,
        url: url
      };
      if (_history != null) {
        _history.pushState(currentId, title, url);
      }
    };

    History.prototype.back = function() {
      var entry;
      if ((_history != null) && backSupported) {
        return _history.back();
      } else {
        currentId--;
        if (backOffset === 0) {
          backOffset += 2;
        } else {
          backOffset++;
        }
        entry = states[currentId];
        this.emit('popState', _.cloneDeep(entry.state), entry.title, entry.url);
      }
    };

    return History;

  })(EventEmitter);

  module.exports = new History();

}).call(this);

//# sourceMappingURL=history.js.map
