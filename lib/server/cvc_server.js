// Generated by CoffeeScript 1.9.3
(function() {
  var $p, _, bodyParser, cookieParser, fs, genericServer, markdown, qs, ref1, restClient, url,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (!global.Intl) {
    require('intl');
  }

  require('coffee-script/register');

  require('source-map-support').install();

  markdown = require('markdown').markdown;

  ref1 = require('core'), $p = ref1.$p, genericServer = ref1.genericServer, restClient = ref1.restClient;

  bodyParser = require('body-parser');

  cookieParser = require('cookie-parser');

  _ = require('lodash');

  fs = require('fs');

  url = require('url');

  qs = require('querystring');

  genericServer.defaultRestServer({
    maxMemory: 300
  }, function(context) {
    var App, assetMapping, cookieMaxAge;
    if (fs.existsSync("lib/assets.json")) {
      assetMapping = JSON.parse(fs.readFileSync('lib/assets.json'));
    }
    App = require('../components/app');
    cookieMaxAge = 90 * 24 * 60 * 60 * 1000;
    context.registerAll(restClient);
    context.registerAll(require('core').aws);
    context.registerAll(require('./react_compiler'));
    context.registerAll(require('./site_definitions'));
    context.registerAll(require('./emails'));
    context.registerAll(require('./zendesk'));
    context.register('assetPipeline', function() {
      var assetPipeline;
      assetPipeline = require('core').assetPipeline;
      return assetPipeline({
        root: ["./assets", "./public"],
        assetPrefix: "/assets/"
      });
    });
    context.register('assetPath', function(assetPipeline) {
      return assetPipeline.assetPath.bind(assetPipeline);
    });
    context.register('socialApiFactory', function($options, restClientFactory) {
      var baseUrl;
      baseUrl = $options.baseUrl;
      return function(database) {
        return restClientFactory(_.defaults({
          baseUrl: baseUrl + "/" + database
        }, $options));
      };
    });
    return function(server) {
      return context.invoke(function($u, $req, $res, scope, scopedVariableFactory, siteDefinitions, assetPath, bootstrapReactApp, assetPipeline, localizedMessages, socialApiFactory, emailProviderFactory, zendeskApi) {
        var $socialApi, _route, forwardCookies, forwardHeaders, getProfile, monitorQueue, multipart, raw, registerProfileActions, rest, searchProfiles, staticCache;
        $socialApi = scopedVariableFactory('socialApi');
        server.locals.assetPath = assetPath;
        server.locals.lookupErrorMessage = function(messages, formMessages, fieldName, errorType) {
          var error, formFieldError, ref2, ref3, ref4;
          formFieldError = formMessages != null ? (ref2 = formMessages.errors) != null ? ref2[fieldName] : void 0 : void 0;
          if (formFieldError != null) {
            if (_.isString(formFieldError)) {
              return formFieldError;
            }
            error = formFieldError[errorType] || formFieldError['INVALID'];
          }
          if (error != null) {
            return error;
          }
          if ((formMessages != null ? (ref3 = formMessages.errors) != null ? ref3[errorType] : void 0 : void 0) != null) {
            return formMessages != null ? (ref4 = formMessages.errors) != null ? ref4[errorType] : void 0 : void 0;
          }
          return messages.common.errors[errorType] || messages.common.errors["INVALID"];
        };
        server.use(function(req, res, next) {
          var deviceType, userAgent;
          userAgent = req.headers['user-agent'] || "";
          deviceType = req.headers['app-type'] === 'android' ? 'android-app' : /iPhone|Android|Mobile Safari/.test(userAgent) ? 'mobile-site' : /MSIE 9.0|MSIE 8.0|^Mozilla\/4.0 \(compatible; MSIE 6.0;/.test(userAgent) ? 'semi-old' : /MSIE 7.0|MSIE 8.0|^Mozilla\/4.0 \(compatible; MSIE 6.0;/.test(userAgent) ? 'old-ie' : void 0;
          req.deviceType = deviceType;
          return next();
        });
        server.use(function(req, res, next) {
          var language, messages, siteKey;
          siteKey = siteDefinitions.portMap[req.socket.localPort];
          if (siteKey == null) {
            return res.sendError(500, "Unsupported site on port " + req.socket.localPort + "!");
          }
          if (siteDefinitions[siteKey].socialApiDatabase == null) {
            return res.sendError(500, "No Database Defined!");
          }
          scope.context.socialApi = socialApiFactory(siteDefinitions[siteKey].socialApiDatabase);
          language = siteDefinitions[siteKey].supportedLanguages[0];
          messages = localizedMessages.getMessages(siteKey);
          res.locals.production = process.env.NODE_ENV === 'production';
          res.locals.siteDefinition = siteDefinitions[siteKey];
          res.locals.siteDefinition.siteKey = siteKey;
          res.locals.language = language;
          res.locals.siteClass = siteKey;
          res.locals.siteId = siteKey;
          res.locals.messages = messages;
          res.locals.pretty = true;
          return $p.when(emailProviderFactory(res.locals.siteDefinition)).then(function(emailProvider) {
            req.emailProvider = emailProvider;
            return next();
          });
        });
        server.use("/assets", assetPipeline.createServerModule());
        server.set('view engine', 'jade');
        server.use(bodyParser.urlencoded({
          extended: true
        }));
        server.use(cookieParser());
        server.use(function(req, res, next) {
          req.locale = req.params.locale || "en";
          return next();
        });
        server.use(function(req, res, next) {
          var type;
          type = req.accepts('html') !== 'html' ? "REST" : "HTML";
          server.$logger.tagScope(type);
          server.$logger.info(req.url, {
            query: req.query,
            headers: req.headers,
            cookies: req.cookies
          });
          return next();
        });
        forwardCookies = ['tg', 'token'];
        forwardHeaders = ['referer'];
        server.use(function(req, res, next) {
          var cookies;
          cookies = req.headers['local-cookies'];
          if (cookies != null) {
            cookies = JSON.parse(cookies);
            cookies = _.pick(cookies, forwardCookies);
            _.each(cookies, function(v, k) {
              return req.cookies[k] = v;
            });
          }
          return next();
        });
        server.use(function(req, res, next) {
          var basePath, desiredProto, forward, forwardQuery, forwardTo, parsedHost, parsedUrl, proto, ref2, ref3, ref4;
          proto = req.headers['x-forwarded-proto'] || "http";
          server.options = (ref2 = context.config) != null ? ref2.server : void 0;
          res.redirectWithCookies = function(redirectTo, query) {
            var redirect, redirectQuery;
            redirect = _.merge.apply(_, [query || {}, _.pick.apply(_, [req.cookies].concat(slice.call(forwardCookies))), _.pick.apply(_, [req.headers].concat(slice.call(forwardHeaders)))]);
            redirect.sig = $u.objectHmac(server.options.forwardHmacKey, redirect);
            redirectQuery = qs.stringify(redirect);
            redirectTo = redirectTo + "?" + redirectQuery;
            return res.redirect(redirectTo);
          };
          if ((((ref3 = server.options) != null ? ref3.forceHttps : void 0) && req.method === 'GET' && (proto != null) && proto.toLowerCase() !== 'https') || ((req.headers['host'] || "").match(/^www/) != null)) {
            forward = _.merge.apply(_, [_.omit(req.query, forwardCookies.join(forwardHeaders)), _.pick.apply(_, [req.cookies].concat(slice.call(forwardCookies))), _.pick.apply(_, [req.headers].concat(slice.call(forwardHeaders)))]);
            forward.sig = $u.objectHmac(server.options.forwardHmacKey, forward);
            desiredProto = proto;
            if (req.headers['host'] != null) {
              parsedHost = url.parse(req.headers['host']);
            }
            desiredProto = parsedHost.protocol;
            desiredProto = ((ref4 = server.options) != null ? ref4.forceHttps : void 0) ? "https" : 'http';
            parsedUrl = url.parse(req.originalUrl);
            basePath = parsedUrl.path.replace(/\?.*/, '');
            forwardQuery = qs.stringify(forward);
            forwardTo = desiredProto + "://" + res.locals.siteDefinition.siteUrl + basePath + "?" + forwardQuery;
            return res.redirect(forwardTo);
          }
          return next();
        });
        server.use(function(req, res, next) {
          var query;
          if (req.query.sig != null) {
            query = _.omit(req.query, 'sig');
            if (req.query.sig === $u.objectHmac(server.options.forwardHmacKey, query)) {
              _.each(_.pick(query, forwardCookies), function(v, k) {
                req.cookies[k] = v;
                return res.cookie(k, v, {
                  httpOnly: true,
                  maxAge: cookieMaxAge
                });
              });
              _.each(_.pick(query, forwardHeaders), function(v, k) {
                return req.headers[k] = v;
              });
            }
          }
          return next();
        });
        server.use(function(req, res, next) {
          var base;
          if ((base = res.locals).form == null) {
            base.form = req.method === 'POST' ? req.body : {};
          }
          res.locals.form.errors = {};
          return next();
        });
        server.use(function(req, res, next) {
          req.clientInfo = function() {
            var forwardedFor;
            forwardedFor = req.headers['HTTP_X_FORWARDED_FOR'] || req.headers['x-forwarded-for'];
            if (forwardedFor != null) {
              forwardedFor = forwardedFor.split(',');
              forwardedFor = forwardedFor[forwardedFor.length - 1].trim();
            }
            return {
              source: req.query['utm_source'] || req.query['source'] || req.query['src'],
              campaign: req.query['utm_campaign'] || req.query['campaign'],
              creative: req.query['creative'],
              ipAddress: forwardedFor || req.connection.remoteAddress,
              userAgent: req.headers['user-agent'],
              referrer: req.headers['referer']
            };
          };
          return next();
        });
        server.route('/robots.txt').get(function(req, res) {
          res.setHeader('content-type', 'text/plain');
          return res.send("");
        });
        server.route('/country').get(function(req, res) {
          return res.render('country', {
            noHelp: true
          });
        });
        server.use(function(req, res, next) {
          var ref2;
          if (req.cookies['tg'] && ((ref2 = req.cookies['tg']) != null ? ref2.length : void 0) > 0) {
            server.$logger.tagScope(req.cookies['tg'].substring(0, 7));
          }
          return next();
        });
        _route = server.route;
        server.route = function() {
          var args, setTransactionName;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          setTransactionName = function(req, res, next) {
            var ref2;
            if (((ref2 = server.locals.newrelic) != null ? ref2.setTransactionName : void 0) != null) {
              server.locals.newrelic.setTransactionName("[" + req.method + "] " + (_.flatten([req.route.path])[0]));
            }
            return next();
          };
          return _route.apply(server, args).all(setTransactionName);
        };
        server.route('/').get(function(req, res, next) {
          if (req.cookies['token'] == null) {
            return next();
          }
          return res.redirect('/app/browse');
        }).all(function(req, res, next) {
          var hit;
          hit = req.clientInfo();
          return ($p.when(req.cookies['tg'] != null ? $socialApi().get("/tracking", req.cookies['tg'], {
            ipAddress: hit.ipAddress
          }) : void 0).then(function(validCookie) {
            if (validCookie) {
              return;
            }
            if (req.accepts('html') !== 'html') {
              server.$logger.error("REST REQUEST WITHOUT A TRACKING COOKIE", {
                headers: req.headers,
                query: req.query,
                cookies: req.cookies
              });
              return;
            }
            if (req.cookies['tg'] != null) {
              server.$logger.error("RESETTING INVALID COOKIE", {
                headers: req.headers,
                query: req.query,
                cookies: req.cookies
              });
            }
            return $socialApi().put('/tracking', hit).then(function(guid) {
              server.$logger.debug("NEW HIT", guid);
              if (guid != null) {
                res.cookie('tg', guid, {
                  httpOnly: true,
                  maxAge: cookieMaxAge
                });
              }
              req.cookies['tg'] = guid;
              return res.locals.confirmTrackingGuid = guid;
            });
          })).then({
            success: function() {
              return next();
            },
            error: function(err) {
              var errors, ref2;
              if (err.statusCode >= 500) {
                return $p.error(err);
              }
              errors = err;
              if ((errors != null ? errors.errors : void 0) != null) {
                errors = errors.errors;
              }
              errors = _.flatten([errors]);
              errors = _.indexBy(errors, 'field');
              if (((ref2 = errors.ipAddress) != null ? ref2.type : void 0) === 'INVALID') {
                req.invalidIpAddress = true;
                return next();
              }
              return $p.error(err);
            }
          });
        }).post(function(req, res, next) {
          var ref2, ref3;
          if (!(((ref2 = req.body.emailAddress) != null ? ref2.length : void 0) > 0 && ((ref3 = req.body.password) != null ? ref3.length : void 0) > 0)) {
            return next();
          }
          return $socialApi().post('/authenticate/email', {
            emailAddress: req.body.emailAddress,
            password: req.body.password,
            trackingGuid: req.cookies['tg']
          }).then({
            success: function(result) {
              if (result.loginToken == null) {
                return res.rediect('/');
              }
              res.cookie('token', result.loginToken, {
                httpOnly: true,
                maxAge: cookieMaxAge
              });
              req.cookies['token'] = result.loginToken;
              return res.redirect('/app/browse');
            },
            error: function(err) {
              return next();
            }
          });
        }).post(function(req, res, next) {
          var ref2;
          if (req.body.profileData == null) {
            return next();
          }
          req.body = JSON.parse(req.body.profileData);
          req.body.genders = "" + req.body.gender + ((ref2 = req.body.lookingFor) != null ? ref2.gender : void 0);
          return next();
        }).post(function(req, res, next) {
          var account, profile;
          account = _.pick(req.body, 'emailAddress', 'password', 'referralCode');
          account.firstHitGuid = req.cookies['tg'] || "INVALID";
          profile = {
            postalCode: req.body.postalCode,
            age: parseInt(req.body.age),
            gender: req.body.genders[0],
            lookingFor: {
              gender: req.body.genders[1]
            }
          };
          return $socialApi().put('/register', {
            account: account,
            profile: profile,
            ipAddress: req.clientInfo().ipAddress
          }).then({
            success: function(result) {
              if (result.loginToken != null) {
                return $p.when(emailProviderFactory(res.locals.siteDefinition)).then(function(emailProvider) {
                  emailProvider.sendWelcomeEmail(result.guid, {
                    password: result.password
                  });
                  res.cookie('token', result.loginToken, {
                    httpOnly: true,
                    maxAge: cookieMaxAge
                  });
                  req.cookies['token'] = result.loginToken;
                  return [
                    (req.body.photos != null ? $socialApi().put('/photos', result.profileGuid, 'import', req.body.photos) : void 0), (req.body.content != null ? $socialApi().post('/profiles', result.profileGuid, {
                      content: req.body.content,
                      advancedCriteria: req.body.advancedCriteria
                    }) : void 0)
                  ].then(function() {
                    if (req.body.photos != null) {
                      return res.redirect('/app/browse');
                    } else {
                      return res.redirect('/app/photos?continueTo=/browse');
                    }
                  });
                });
              } else {
                return res.redirect('/');
              }
            },
            error: function(err) {
              var errorMap, errors;
              if (err.statusCode >= 500) {
                return next();
              }
              errors = err;
              if ((errors != null ? errors.errors : void 0) != null) {
                errors = errors.errors;
              }
              errors = _.flatten([errors]);
              errorMap = {};
              _.each(errors, function(error) {
                if (errorMap[error.field] == null) {
                  return errorMap[error.field] = error.type;
                }
              });
              if (errorMap['emailAddress'] === 'ACCOUNT_REMOVED') {
                return res.redirect("/reinstate?email_address=" + account.emailAddress);
              } else {
                res.locals.form.errors = errorMap;
                return next();
              }
            }
          });
        }).all(function(req, res) {
          return res.render('landing_pages/shared');
        });
        server.route('/tg/:guid.gif').get(function(req, res) {
          return $socialApi().put('/tracking', req.params.guid, 'confirm').then(function() {
            var pixel;
            res.set('Content-Type', 'image/gif');
            pixel = new Buffer("R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7", 'base64');
            return res.send(pixel);
          });
        });
        server.route('/not_enough_members').get(function(req, res) {
          res.locals.fullScreenErrorMessage = "notEnoughUsers";
          return res.render('landing_pages/shared');
        });
        server.route('/reinstate').get(function(req, res) {
          return res.render('reinstate', {
            emailAddress: req.query.email_address
          });
        }).post(function(req, res) {
          return $socialApi().post('/accounts/email_address/reinstate', {
            emailAddress: req.body.emailAddress
          }).then({
            success: function(results) {
              return req.emailProvider.sendForgotPasswordNotification(results.guid).then(function() {
                res.locals.fullScreenErrorMessage = "reinstateConfirmation";
                return res.render('landing_pages/shared');
              });
            },
            error: function(err) {
              return res.redirect('/');
            }
          });
        });
        server.route('/signin').get(function(req, res, next) {
          if (req.cookies['token'] == null) {
            return next();
          }
          return res.redirect('/app/browse');
        }).post(function(req, res, next) {
          return $socialApi().post('/authenticate/email', {
            emailAddress: req.body.emailAddress,
            password: req.body.password,
            trackingGuid: req.cookies['tg']
          }).then({
            success: function(result) {
              var params;
              if (result.loginToken != null) {
                res.cookie('token', result.loginToken, {
                  httpOnly: true,
                  maxAge: cookieMaxAge
                });
                req.cookies['token'] = result.loginToken;
                params = _.pick(req.cookies, forwardCookies);
                params.sig = $u.objectHmac(server.options.forwardHmacKey, params);
                return res.redirect("/app/browse?" + (qs.stringify(params)));
              } else {
                return res.redirect('/not_enough_members');
              }
            },
            error: function(err) {
              var errorMap, errors;
              if (err.statusCode >= 500) {
                return $p.error(err);
              }
              errors = err;
              if ((errors != null ? errors.errors : void 0) != null) {
                errors = errors.errors;
              }
              errors = _.flatten([errors]);
              errorMap = {};
              _.each(errors, function(error) {
                if (errorMap[error.field] == null) {
                  return errorMap[error.field] = error.type;
                }
              });
              if (errorMap['emailAddress'] === 'ACCOUNT_REMOVED') {
                return res.redirect("/reinstate?email_address=" + req.body.emailAddress);
              } else {
                res.locals.form.errors = errorMap;
                return next();
              }
            }
          });
        }).all(function(req, res) {
          return res.render('signin');
        });
        server.route('/signout').post(function(req, res, next) {
          if (req.cookies['token'] != null) {
            res.clearCookie('token');
          }
          return res.redirect('signin');
        });
        server.route('/forgot_password').post(function(req, res, next) {
          return $socialApi().post('/accounts/email_address', {
            emailAddress: req.body.emailAddress
          }).then({
            success: function(results) {
              req.emailProvider.sendForgotPasswordNotification(results.guid).then(function() {});
              res.locals.fullScreenErrorMessage = "forgotPasswordSent";
              return res.render('landing_pages/shared');
            },
            error: function(err) {
              var errorMap, errors;
              if (err.statusCode >= 500) {
                return $p.error(err);
              }
              errors = err;
              if ((errors != null ? errors.errors : void 0) != null) {
                errors = errors.errors;
              }
              errors = _.flatten([errors]);
              errorMap = {};
              _.each(errors, function(error) {
                if (errorMap[error.field] == null) {
                  return errorMap[error.field] = error.type;
                }
              });
              res.locals.form.errors = errorMap;
              return next();
            }
          });
        }).all(function(req, res) {
          return res.render('forgot_password');
        });
        staticCache = {};
        server.route(['/privacy_policy', '/tos', '/about_us', '/faq']).get(function(req, res, next) {
          var content, page, parsedUrl, path, ref2, siteId;
          parsedUrl = (ref2 = url.parse(req.url)) != null ? ref2.pathname : void 0;
          page = parsedUrl.replace(/^\//, '');
          siteId = res.locals.siteId;
          path = "static/" + siteId + "/" + page + ".md";
          content = staticCache[path];
          if ((content == null) || process.env.NODE_ENV === "development") {
            content = staticCache[path] = fs.readFileSync(path).toString();
          }
          return res.render('static', {
            content: markdown.toHTML(content, 'Maruku')
          });
        });
        server.use(function(req, res, next) {
          var token;
          token = req.query.auth || req.cookies['token'];
          if (token == null) {
            return res.redirectWithCookies("/signin");
          }
          return $socialApi().post('/authenticate/token', {
            token: token,
            trackingGuid: req.cookies['tg']
          }).then({
            error: function(err) {
              server.$logger.error(err);
              if (err.code === 'ECONNREFUSED') {
                return res.sendError(500, "Site is currently unavailable, please try again");
              }
              res.clearCookie('token');
              return res.redirect("/signin");
            },
            success: function(result) {
              var newUrl, parsedUrl;
              server.$logger.tagScope(result.guid.substring(0, 7));
              req.accountGuid = result.guid;
              res.cookie('token', result.loginToken, {
                httpOnly: true,
                maxAge: cookieMaxAge
              });
              req.cookies['token'] = result.loginToken;
              if (req.query.auth != null) {
                parsedUrl = url.parse(req.url);
                newUrl = {
                  pathname: parsedUrl.pathname,
                  search: qs.stringify(_.omit(req.query, 'auth'))
                };
                return res.redirect(url.format(newUrl));
              }
              return $socialApi().get("/profiles/by_account/" + result.guid).then(function(result) {
                req.profileGuid = result;
                return next();
              });
            }
          });
        });
        server.route('/unsubscribe/:emailType').get(function(req, res) {
          return $p.when(req.params.emailType === 'all' ? $socialApi().put('/accounts', $req().accountGuid, 'unsubscribe') : $socialApi().get('/notification_preferences', $req().accountGuid).then(function(newPreferences) {
            var def;
            def = newPreferences[req.params.emailType];
            if (def != null) {
              def.mediums = _.without(def.mediums, 'email');
              return $socialApi().put('/notification_preferences', $req().accountGuid, newPreferences);
            }
          })).then(function() {
            return res.redirect("/app/settings/email_preferences");
          });
        });
        if (process.env.NODE_ENV === "development") {
          server.route('/email/welcome').get(function(req, res) {
            return $p.when(emailProviderFactory(res.locals.siteDefinition)).then(function(emailProvider) {
              return emailProvider.renderWelcomeEmail(req.accountGuid, {
                password: "test"
              }).then(function(result) {
                return res.send(result.html);
              });
            });
          });
          server.route('/email/unread').get(function(req, res) {
            return $p.when(emailProviderFactory(res.locals.siteDefinition)).then(function(emailProvider) {
              return emailProvider.renderUnreadMessagesEmail(req.accountGuid).then(function(result) {
                return res.send(result.html);
              });
            });
          });
          server.route('/email/new_message/:toProfileGuid').get(function(req, res) {
            return $p.when(emailProviderFactory(res.locals.siteDefinition)).then(function(emailProvider) {
              return emailProvider.renderNewMessageNotification(req.accountGuid, req.params.toProfileGuid).then(function(result) {
                return res.send(result.html);
              });
            });
          });
        }
        server.route(['/app', '/app(/*)']).all(function(req, res, next) {
          var path, redirect, ref2, version;
          path = req.params[0] || "/";
          version = (ref2 = assetPath("client/app_client.js").match(/.*app_client-(.*).js/)) != null ? ref2[1] : void 0;
          req.state = {
            path: path,
            version: version,
            profileGuid: req.profileGuid
          };
          redirect = res.redirect;
          res.redirect = function(redirectTo) {
            if (req.accepts('html') === 'html') {
              return redirect.apply(res, ["/app" + redirectTo]);
            }
            if (req.state == null) {
              req.state = {};
            }
            req.state._redirectTo = redirectTo;
            return res.send(req.state);
          };
          return [$socialApi().get('/features', req.accountGuid)].then(function(features) {
            req.features = features;
            return next();
          });
        });
        server.post('/javascript_error', function(req, res) {
          server.$logger.warn("[JAVASCRIPT] " + req.body.message + "\n" + req.headers['user-agent'] + "\n" + (req.body.stackTrace != null ? "\n" + req.body.stackTrace : ""));
          return res.send({
            status: "OK"
          });
        });
        rest = server.rest.nest('/app');
        searchProfiles = function(filter, page, pageSize) {
          filter = _.merge({}, filter, {
            hasPicture: true,
            banned: false,
            prankster: false,
            ignored: false,
            profileGuid: $req().state.profileGuid
          });
          return $socialApi().post('/profiles/search', {
            criteria: filter,
            sortBy: [
              {
                field: 'distance',
                dir: 'asc'
              }
            ],
            pageSize: pageSize,
            page: page
          });
        };
        rest.get('/discover', function($next) {
          return $socialApi().post('/discovery', $req().state.profileGuid).then(function(results) {
            $req().state.discover = {
              totalFound: results.totalFound,
              items: results.profiles
            };
            return $next();
          });
        });
        rest.post('/discover', function($next) {
          var ref2, skipProfiles;
          skipProfiles = (ref2 = $req().body) != null ? ref2.skipProfiles : void 0;
          return $socialApi().post('/discovery', $req().state.profileGuid, {
            skipProfiles: skipProfiles
          });
        });
        rest.post('/discover/like/:guid', function(guid) {
          guid = guid.isPresent().value();
          return $socialApi().put('/index/like_profile', $req().state.profileGuid, guid).then(function() {
            return {};
          });
        });
        rest.post('/discover/hide/:guid', function(guid) {
          guid = guid.isPresent().value();
          return $socialApi().put('/index/maybe_profile', $req().state.profileGuid, guid).then(function() {
            return {};
          });
        });
        registerProfileActions = function(baseUrl, restEndPoint) {
          restEndPoint.post(baseUrl + "/like/:guid", function(guid) {
            guid = guid.isPresent().value();
            return $socialApi().put('/index/like_profile', $req().state.profileGuid, guid).then(function() {
              return {};
            });
          });
          restEndPoint.post(baseUrl + "/unlike/:guid", function(guid) {
            guid = guid.isPresent().value();
            return $socialApi().put('/index/unlike_profile', $req().state.profileGuid, guid).then(function() {
              return {};
            });
          });
          restEndPoint.post(baseUrl + "/hide/:guid", function(guid) {
            guid = guid.isPresent().value();
            return $socialApi().put('/index/hide_profile', $req().state.profileGuid, guid).then(function() {
              return {};
            });
          });
          return restEndPoint.post(baseUrl + "/block/:guid", function(guid) {
            guid = guid.isPresent().value();
            return $socialApi().put('/index/block_profile', $req().state.profileGuid, guid).then(function() {
              return {};
            });
          });
        };
        rest.get('/liked_by', function($next) {
          return $next();
        });
        rest.post('/liked_by', function(page, pageSize) {
          page = page.intValue();
          pageSize = pageSize.intValue() || 20;
          return $socialApi().get('/discovery', $req().state.profileGuid, 'liked_by', {
            page: page,
            pageSize: pageSize,
            markAsViewed: true
          }).then(function(results) {
            return {
              items: results.profiles,
              totalFound: results.totalFound
            };
          });
        });
        registerProfileActions("/liked_by", rest);
        rest.get('/visitors', function($next) {
          return $next();
        });
        rest.post('/visitors', function(page, pageSize) {
          page = page.intValue();
          pageSize = pageSize.intValue() || 20;
          return $socialApi().get('/visitors', $req().state.profileGuid, {
            page: page,
            pageSize: pageSize,
            markAsViewed: true
          }).then(function(results) {
            return {
              items: results.profiles,
              totalFound: results.totalFound
            };
          });
        });
        registerProfileActions("/visitors", rest);
        rest.get('/browse', function($next) {
          return $socialApi().get('/profiles', $req().state.profileGuid).then(function(profile) {
            var filter;
            filter = {
              gender: profile.lookingFor.gender,
              minAge: Math.max(18, profile.lookingFor.minAge - 5),
              maxAge: Math.min(99, profile.lookingFor.maxAge + 5),
              lookingFor: {
                gender: profile.gender
              }
            };
            return searchProfiles(filter, 1, 10).then(function(results) {
              $req().state.browse = {
                defaultFilter: filter,
                totalFound: results.totalFound,
                items: results.profiles
              };
              return $next();
            });
          });
        });
        rest.post('/browse', function(filter, page, pageSize, $next) {
          filter = filter.isPresent().value();
          page = page.intValue();
          pageSize = pageSize.intValue();
          return searchProfiles(filter, page, pageSize).then(function(results) {
            return $res().send({
              totalFound: results.totalFound,
              items: results.profiles
            });
          });
        });
        getProfile = function(guid) {
          return [$socialApi().get('/profiles', guid), $socialApi().get('/discovery/status', $req().state.profileGuid, guid)].then(function(profile, discoverStatus) {
            var ref2, ref3;
            if (profile == null) {
              return profile;
            }
            profile.flags = {
              liked: (ref2 = discoverStatus[guid]) != null ? ref2.liked : void 0,
              hidden: (ref3 = discoverStatus[guid]) != null ? ref3.hidden : void 0
            };
            return profile;
          });
        };
        rest.get('/profile/:guid', function(guid, $next) {
          guid = guid.isPresent().value();
          return getProfile(guid).then(function(profile) {
            return $socialApi().put('/visitors', guid, $req().state.profileGuid).then(function() {
              $req().state.profile = {
                profile: profile
              };
              return $next();
            });
          });
        });
        rest.post('/profile/:guid/like', function(guid) {
          guid = guid.isPresent().value();
          return $socialApi().put('/index/like_profile', $req().state.profileGuid, guid).then(function() {
            return getProfile(guid).then(function(profile) {
              return $res().send(profile);
            });
          });
        });
        rest.post('/profile/:guid/unlike', function(guid) {
          guid = guid.isPresent().value();
          return $socialApi().put('/index/unlike_profile', $req().state.profileGuid, guid).then(function() {
            return getProfile(guid).then(function(profile) {
              return $res().send(profile);
            });
          });
        });
        rest.post('/profile/:guid/hide', function(guid) {
          guid = guid.isPresent().value();
          return $socialApi().put('/index/hide_profile', $req().state.profileGuid, guid).then(function() {
            return getProfile(guid).then(function(profile) {
              return $res().send(profile);
            });
          });
        });
        rest.post("/profile/:guid/report", function(guid, reason) {
          guid = guid.isPresent().value();
          reason = reason.isPresent().value();
          return $socialApi().post('/index/report', $req().state.profileGuid, guid, {
            reason: reason
          }).then(function() {
            return {};
          });
        });
        rest.post('/myprofile', function($next) {
          return $socialApi().post('/profiles', $req().state.profileGuid, $req().body).then(function(profile) {
            $req().state.profile = {
              profile: profile
            };
            return $next();
          });
        });
        rest.get('/myprofile', function($next) {
          return $socialApi().get('/profiles/private', $req().state.profileGuid).then(function(profile) {
            $req().state.profile = {
              profile: profile
            };
            return $next();
          });
        });
        rest.get('/locations/:postalCode', function(postalCode) {
          postalCode = postalCode.isPresent().value();
          return $socialApi().get('/profiles/search_locations', "US", postalCode);
        });
        multipart = require('connect-multiparty');
        raw = bodyParser.raw({
          type: 'image/*',
          limit: '50mb'
        });
        server.post('/app/photos', function(req, res, next) {
          if (req.is('image/*')) {
            return raw(req, res, next);
          } else {
            return multipart()(req, res, next);
          }
        });
        server.post('/app/photos', function(req, res, next) {
          var data, ref2, ref3, ref4;
          if (((ref2 = server.locals.newrelic) != null ? ref2.setTransactionName : void 0) != null) {
            server.locals.newrelic.setTransactionName("[" + req.method + "] /app/photos");
          }
          if (!((((ref3 = req.files) != null ? (ref4 = ref3.photo) != null ? ref4.path : void 0 : void 0) != null) || req.is('image/*'))) {
            return next();
          }
          if (req.is('image/*')) {
            data = req.body;
          } else {
            data = fs.readFileSync(req.files.photo.path);
          }
          return $socialApi().put("/photos/" + ($req().state.profileGuid) + "/primary", data).then({
            success: function(results) {
              var ref5;
              if (req.is('image/*')) {
                return res.send({
                  status: 'OK'
                });
              }
              if (((ref5 = req.body.continueTo) != null ? ref5.length : void 0) > 0) {
                return res.redirect(req.body.continueTo);
              }
              return res.redirect("/photos");
            },
            error: function(err) {
              req.state.errorMessage = "Unable to upload photo";
              return next();
            }
          });
        });
        rest["delete"]('/photos', function(guid, $next) {
          guid = guid.isPresent().value();
          return $socialApi()["delete"]("/photos", $req().state.profileGuid, guid).then(function() {
            return $next();
          });
        });
        rest.post('/photos/make_primary', function(guid, $next) {
          guid = guid.isPresent().value();
          return $socialApi().post("/photos", $req().state.profileGuid, guid, "album", {
            album: 'primary'
          }).then(function() {
            return $next();
          });
        });
        rest.all(['/photos', '/photos/*'], function(continueTo, $next) {
          continueTo = continueTo.value();
          return $socialApi().get("/photos/" + ($req().state.profileGuid)).then(function(photos) {
            photos = _.sortBy(photos, function(photo) {
              if (photo.album === 'primary') {
                return "0" + photo.guid;
              } else {
                return "1" + photo.guid;
              }
            });
            $req().state.photos = {
              photos: photos,
              continueTo: continueTo
            };
            return $next();
          });
        });
        rest.post('/inbox', function(page, pageSize) {
          page = page.intValue() || 1;
          pageSize = pageSize.intValue();
          return $socialApi().get('/messaging/inbox', $req().state.profileGuid, page, {
            pageSize: pageSize
          }).then(function(results) {
            return $res().send({
              totalFound: results.total,
              items: results.list
            });
          });
        });
        rest.post('/inbox/:convWithGuid/delete', function(convWithGuid, $next) {
          convWithGuid = convWithGuid.isPresent().value();
          return $socialApi()["delete"]('/messaging/conversation', $req().state.profileGuid, convWithGuid).then(function() {
            return $res().send({
              status: "OK"
            });
          });
        });
        rest.get('/conversation/:convWithGuid', function(convWithGuid, $next) {
          var ref2, ref3;
          convWithGuid = convWithGuid.isPresent().value();
          if (((ref2 = $req().features) != null ? (ref3 = ref2.messaging) != null ? ref3.available : void 0 : void 0) !== true) {
            return $res().redirect("/upgrade?navigateTo=/conversation/" + (encodeURIComponent(convWithGuid)));
          }
          return [
            $socialApi().get('/profiles', convWithGuid), $socialApi().get('/messaging/conversations', $req().state.profileGuid, convWithGuid, {
              markAsRead: true
            })
          ].then(function(profileSummary, messages) {
            $req().state.conversation = {
              conversation: {
                conversationWithGuid: convWithGuid,
                profileSummary: profileSummary,
                messages: messages
              }
            };
            return $next();
          });
        });
        rest.put('/conversation/:convWithGuid', function(convWithGuid, text) {
          convWithGuid = convWithGuid.isPresent().value();
          text = text.isPresent().value();
          return $socialApi().put('/messaging/conversation', $req().state.profileGuid, convWithGuid, {
            text: text
          }).then(function() {
            return $res().send({
              status: "OK"
            });
          });
        });
        rest.get('/settings', function($next) {
          return $next();
        });
        rest.post('/settings/change_password', function(password, $next) {
          password = password.isPresent().value();
          return $socialApi().put('/accounts', $req().accountGuid, 'password', {
            password: password
          }).then(function() {
            return $next();
          });
        });
        rest.get('/settings/manage_subscription', function($next) {
          return $socialApi().get('/billing', $req().accountGuid, 'subscription').then(function(subscription) {
            $req().state.subscription = {
              subscription: subscription
            };
            return $next();
          });
        });
        rest.post('/settings/manage_subscription/cancel', function() {
          return $socialApi().put('/billing', $req().accountGuid, 'subscription', 'cancel');
        });
        rest.post('/settings/manage_subscription/start', function() {
          return $socialApi().put('/billing', $req().accountGuid, 'subscription', 'start');
        });
        rest.get('/settings/email_preferences', function($next) {
          return [$socialApi().get('/accounts', $req().accountGuid), $socialApi().get('/notification_preferences', $req().accountGuid)].then(function(account, preferences) {
            $req().state.emailPreferences = {
              emailAddress: account.emailAddress,
              subscribed: !account.unsubscribed,
              preferences: preferences
            };
            return $next();
          });
        });
        rest.post('/settings/email_preferences', function(emailAddress, subscribed, preferences, $next) {
          var unsubscribed;
          emailAddress = emailAddress.isPresent().value();
          unsubscribed = subscribed.value() === 'false';
          preferences = preferences.value();
          return [
            $socialApi().get('/notification_preferences', $req().accountGuid), $socialApi().put('/accounts', $req().accountGuid, 'email_preferences', {
              emailAddress: emailAddress,
              unsubscribed: unsubscribed
            }).then(function() {})
          ].then(function(newPreferences) {
            _.each(newPreferences, function(def, pref) {
              if (preferences[pref] != null) {
                if (preferences[pref] === 'true') {
                  return def.mediums = _.uniq(def.mediums.concat(['email']));
                } else {
                  return def.mediums = _.without(def.mediums, 'email');
                }
              }
            });
            return $socialApi().put('/notification_preferences', $req().accountGuid, newPreferences).then(function() {
              return $next();
            });
          });
        });
        rest.post('/settings/remove_profile', function($next) {
          return $socialApi()["delete"]('/accounts', $req().accountGuid).then(function() {
            $res().setHeader("change-location", "/");
            return $res().send($req().state || {});
          });
        });
        rest.post('/support', function(message) {
          message = message.value();
          if (!((message != null ? message.length : void 0) > 0)) {
            return $res().send({});
          }
          return [$socialApi().get('/accounts', $req().accountGuid), $socialApi().get('/profiles/private', $req().state.profileGuid)].then(function(account, profile) {
            var accountIdentifier, info;
            info = $req().clientInfo();
            accountIdentifier = ($req().accountGuid || "").substring(0, 6);
            return zendeskApi.createTicket(profile.username, info.ipAddress, info.userAgent, accountIdentifier, account.emailAddress, message).then({
              error: function() {
                return $res().send({
                  confirmation: 'Unable to submit message at this time, please try again later.'
                });
              },
              success: function() {
                return $res().send({
                  confirmation: 'Your message has been submitted!'
                });
              }
            });
          });
        });
        rest.get(['/upgrade', '/upgrade(/*)'], function($next) {
          return $socialApi().get('/billing', $req().accountGuid, 'pricing').then(function(pricing) {
            $req().state.upgrade = {
              upgrade: {
                pricing: pricing
              }
            };
            if ($req().query.navigateTo != null) {
              $req().state.path += "?navigateTo=" + (decodeURIComponent($req().query.navigateTo));
            }
            return $next();
          });
        });
        rest.get('/upgrade/:option', function(option, $next) {
          option = option.isPresent().value();
          return $socialApi().get('/billing/spreedly/environment_key').then(function(key) {
            _.merge($req().state.upgrade.upgrade, {
              currentOption: option,
              environmentKey: key
            });
            return $next();
          });
        });
        rest.post('/upgrade/:option/:token', function(option, token) {
          option = option.isPresent().value();
          token = token.isPresent().value();
          return $socialApi().post('/billing', $req().accountGuid, "complete_purchase", {
            option: option,
            token: token
          }).then(function(result) {
            return $socialApi().get('/features', $req().accountGuid);
          });
        });
        server.route(['/app', '/app(/*)']).all(function(req, res, next) {
          return [
            $socialApi().get('/messaging/inbox', req.state.profileGuid, 1, {
              unreadOnly: true,
              pageSize: 0
            }), $socialApi().get('/discovery', req.state.profileGuid, "count"), $socialApi().get('/visitors', req.state.profileGuid, "unviewed_count"), $socialApi().get('/discovery', req.state.profileGuid, "liked_by", "count")
          ].then(function(inbox, discover, visitors, likedBy) {
            req.state.counters = {
              newMessages: inbox != null ? inbox.total : void 0,
              newDiscover: discover != null ? discover.count : void 0,
              newLikedBy: likedBy.totalUnviewed,
              newVisitors: visitors.totalUnviewed
            };
            req.state.features = req.features;
            if (req.accepts('html') !== 'html') {
              return res.send(req.state || {});
            }
            req.state.cookies = _.pick(req.cookies, forwardCookies);
            req.state.messages = res.locals.messages['app'];
            req.state.messages.genericPhotos = {
              F: assetPath('generic-female.png'),
              M: assetPath('generic-male.png')
            };
            return $socialApi().get('/profiles/private', $req().state.profileGuid).then(function(myProfile) {
              req.state.myProfileSummary = myProfile;
              return res.send(bootstrapReactApp(App, "client/app_client.js", "app.css", req.state));
            });
          });
        });
        monitorQueue = function(queue, def, block) {
          var doIt, socialApi;
          console.log("MONITORING", queue, def.socialApiDatabase);
          socialApi = socialApiFactory(def.socialApiDatabase);
          doIt = function() {
            (socialApi.get('/queue_bridge', queue, {
              waitTime: 10,
              retryIn: 60,
              count: 1
            }).then(function(items) {
              var processedRefs;
              processedRefs = [];
              return (_.map(items, function(item, ref) {
                server.$logger.info("[" + def.siteKey + "][" + queue + "]", item);
                return $p.when(block(item)).then({
                  success: function() {
                    return processedRefs.push(ref);
                  },
                  error: function(err) {
                    return server.$logger.error("[" + def.siteKey + "][" + queue + "] Error [" + (err.message || err) + "] while processing", item);
                  },
                  failure: function(err) {
                    return server.$logger.error("[" + def.siteKey + "][" + queue + "] Failure [" + (err.message || err) + "] while processing", item);
                  }
                });
              })).then(function() {
                return $p.when(processedRefs.length > 0 ? socialApi["delete"]('/queue_bridge', queue, processedRefs.join(',')) : void 0);
              });
            })).then({
              success: function() {
                return doIt();
              },
              error: function() {
                return setTimeout(doIt, 300);
              }
            });
            return null;
          };
          doIt();
          return doIt();
        };
        return _.each(siteDefinitions, function(def, name) {
          if (!def.disableQueueMonitoring && (def.socialApiDatabase != null)) {
            def.siteKey = name;
            return [$p.when(emailProviderFactory(def)), $p.when(socialApiFactory(def.socialApiDatabase))].then(function(emailProvider, socialApi) {
              var batchNotifications, instantNotifications;
              instantNotifications = {
                message_notification: function(notification) {
                  return emailProvider.sendNewMessageNotification(notification.aboutProfileGuid, notification.accountGuid);
                },
                like_notification: function(notification) {
                  return emailProvider.sendNewLikeNotification(notification.aboutProfileGuid, notification.accountGuid);
                }
              };
              batchNotifications = {
                unread_messages: function(notification) {
                  return emailProvider.sendUnreadMessagesEmail(notification.accountGuid);
                },
                discover_new_profiles: function(notification) {
                  return emailProvider.sendDiscoverNewProfiles(notification.accountGuid);
                }
              };
              monitorQueue('NOTIFICATIONS:INSTANT', def, function(notification) {
                if (instantNotifications[notification.type] == null) {
                  return $p.error("Unknown notification [" + notification.type + "]");
                }
                if (indexOf.call(notification.mediums, 'email') < 0) {
                  return;
                }
                return instantNotifications[notification.type](notification).then(function() {
                  if ((notification.profileGuid != null) && (notification.aboutProfileGuid != null)) {
                    return socialApi.put('/notifications', notification.profileGuid, notification.aboutProfileGuid, notification.type);
                  }
                });
              });
              return monitorQueue('NOTIFICATIONS:BATCH', def, function(notification) {
                if (batchNotifications[notification.type] == null) {
                  return $p.error("Unknown notification [" + notification.type + "]");
                }
                if (indexOf.call(notification.mediums, 'email') < 0) {
                  return;
                }
                return batchNotifications[notification.type](notification).then(function() {
                  if (notification.profileGuid != null) {
                    return socialApi.put('/notifications', notification.profileGuid, notification.type);
                  }
                });
              });
            });
          }
        });
      });
    };
  });

}).call(this);

//# sourceMappingURL=cvc_server.js.map
